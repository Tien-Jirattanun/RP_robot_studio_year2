
RP_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063bc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08006594  08006594  00007594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a4  080065a4  00008014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080065a4  080065a4  00008014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080065a4  080065a4  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065a4  080065a4  000075a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065a8  080065a8  000075a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080065ac  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000018  080065c0  00008018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080065c0  000082ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120e3  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026fe  00000000  00000000  0001a127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  0001c828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e0e  00000000  00000000  0001da60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283b4  00000000  00000000  0001e86e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013930  00000000  00000000  00046c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e80e  00000000  00000000  0005a552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168d60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005014  00000000  00000000  00168da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0016ddb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800657c 	.word	0x0800657c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	0800657c 	.word	0x0800657c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb8:	f001 f841 	bl	8001c3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bbc:	f000 f872 	bl	8000ca4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc0:	f000 fb80 	bl	80012c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bc4:	f000 fb54 	bl	8001270 <MX_DMA_Init>
  MX_TIM1_Init();
 8000bc8:	f000 f940 	bl	8000e4c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000bcc:	f000 fa54 	bl	8001078 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000bd0:	f000 faa8 	bl	8001124 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000bd4:	f000 f8b2 	bl	8000d3c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000bd8:	f000 fa00 	bl	8000fdc <MX_TIM2_Init>
  MX_TIM5_Init();
 8000bdc:	f000 faf8 	bl	80011d0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

	// Setup PWM Generator
	HAL_TIM_Base_Start(&htim1);
 8000be0:	4826      	ldr	r0, [pc, #152]	@ (8000c7c <main+0xc8>)
 8000be2:	f003 fe81 	bl	80048e8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000be6:	2100      	movs	r1, #0
 8000be8:	4824      	ldr	r0, [pc, #144]	@ (8000c7c <main+0xc8>)
 8000bea:	f003 ffc7 	bl	8004b7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000bee:	2104      	movs	r1, #4
 8000bf0:	4822      	ldr	r0, [pc, #136]	@ (8000c7c <main+0xc8>)
 8000bf2:	f003 ffc3 	bl	8004b7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000bf6:	2108      	movs	r1, #8
 8000bf8:	4820      	ldr	r0, [pc, #128]	@ (8000c7c <main+0xc8>)
 8000bfa:	f003 ffbf 	bl	8004b7c <HAL_TIM_PWM_Start>

	// Setup Encoder
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000bfe:	213c      	movs	r1, #60	@ 0x3c
 8000c00:	481f      	ldr	r0, [pc, #124]	@ (8000c80 <main+0xcc>)
 8000c02:	f004 f973 	bl	8004eec <HAL_TIM_Encoder_Start>
	prismatic_raw_encoder_val = __HAL_TIM_GET_COUNTER(&htim4);
 8000c06:	4b1e      	ldr	r3, [pc, #120]	@ (8000c80 <main+0xcc>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c84 <main+0xd0>)
 8000c10:	601a      	str	r2, [r3, #0]

	// Setup Timer 2 for sensor reading
	HAL_TIM_Base_Start_IT(&htim2);
 8000c12:	481d      	ldr	r0, [pc, #116]	@ (8000c88 <main+0xd4>)
 8000c14:	f003 fed8 	bl	80049c8 <HAL_TIM_Base_Start_IT>

	// Setup Timer 5 for Main Process
	HAL_TIM_Base_Start_IT(&htim5);
 8000c18:	481c      	ldr	r0, [pc, #112]	@ (8000c8c <main+0xd8>)
 8000c1a:	f003 fed5 	bl	80049c8 <HAL_TIM_Base_Start_IT>

	//PID
	PID.Kp = prismatic_Kp;
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <main+0xdc>)
 8000c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c24:	4610      	mov	r0, r2
 8000c26:	4619      	mov	r1, r3
 8000c28:	f7ff ff74 	bl	8000b14 <__aeabi_d2f>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4a19      	ldr	r2, [pc, #100]	@ (8000c94 <main+0xe0>)
 8000c30:	6193      	str	r3, [r2, #24]
	PID.Ki = prismatic_Ki;
 8000c32:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <main+0xe4>)
 8000c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c38:	4610      	mov	r0, r2
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f7ff ff6a 	bl	8000b14 <__aeabi_d2f>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4a14      	ldr	r2, [pc, #80]	@ (8000c94 <main+0xe0>)
 8000c44:	61d3      	str	r3, [r2, #28]
	PID.Kd = prismatic_Kd;
 8000c46:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <main+0xe8>)
 8000c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4c:	4610      	mov	r0, r2
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f7ff ff60 	bl	8000b14 <__aeabi_d2f>
 8000c54:	4603      	mov	r3, r0
 8000c56:	4a0f      	ldr	r2, [pc, #60]	@ (8000c94 <main+0xe0>)
 8000c58:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 0);
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	480d      	ldr	r0, [pc, #52]	@ (8000c94 <main+0xe0>)
 8000c5e:	f005 fc2b 	bl	80064b8 <arm_pid_init_f32>

	SetHomePrismatic();
 8000c62:	f000 fbdf 	bl	8001424 <SetHomePrismatic>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		PrismaticPIDControl(prismatic_setposition);
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <main+0xec>)
 8000c68:	ed93 7b00 	vldr	d7, [r3]
 8000c6c:	eeb0 0a47 	vmov.f32	s0, s14
 8000c70:	eef0 0a67 	vmov.f32	s1, s15
 8000c74:	f000 fc36 	bl	80014e4 <PrismaticPIDControl>
 8000c78:	e7f5      	b.n	8000c66 <main+0xb2>
 8000c7a:	bf00      	nop
 8000c7c:	20000100 	.word	0x20000100
 8000c80:	200001e4 	.word	0x200001e4
 8000c84:	20000280 	.word	0x20000280
 8000c88:	2000014c 	.word	0x2000014c
 8000c8c:	20000230 	.word	0x20000230
 8000c90:	20000000 	.word	0x20000000
 8000c94:	200002a8 	.word	0x200002a8
 8000c98:	200002d8 	.word	0x200002d8
 8000c9c:	200002e0 	.word	0x200002e0
 8000ca0:	200002d0 	.word	0x200002d0

08000ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b094      	sub	sp, #80	@ 0x50
 8000ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000caa:	f107 0318 	add.w	r3, r7, #24
 8000cae:	2238      	movs	r2, #56	@ 0x38
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f005 fc36 	bl	8006524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f002 fdbe 	bl	8003848 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cd6:	2340      	movs	r3, #64	@ 0x40
 8000cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ce6:	2355      	movs	r3, #85	@ 0x55
 8000ce8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf6:	f107 0318 	add.w	r3, r7, #24
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 fe58 	bl	80039b0 <HAL_RCC_OscConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d06:	f000 fd2b 	bl	8001760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0a:	230f      	movs	r3, #15
 8000d0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2104      	movs	r1, #4
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 f956 	bl	8003fd4 <HAL_RCC_ClockConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d2e:	f000 fd17 	bl	8001760 <Error_Handler>
  }
}
 8000d32:	bf00      	nop
 8000d34:	3750      	adds	r7, #80	@ 0x50
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	@ 0x30
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2220      	movs	r2, #32
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f005 fbe5 	bl	8006524 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d5a:	4b39      	ldr	r3, [pc, #228]	@ (8000e40 <MX_ADC1_Init+0x104>)
 8000d5c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d60:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d62:	4b37      	ldr	r3, [pc, #220]	@ (8000e40 <MX_ADC1_Init+0x104>)
 8000d64:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000d68:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d6a:	4b35      	ldr	r3, [pc, #212]	@ (8000e40 <MX_ADC1_Init+0x104>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d70:	4b33      	ldr	r3, [pc, #204]	@ (8000e40 <MX_ADC1_Init+0x104>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d76:	4b32      	ldr	r3, [pc, #200]	@ (8000e40 <MX_ADC1_Init+0x104>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d7c:	4b30      	ldr	r3, [pc, #192]	@ (8000e40 <MX_ADC1_Init+0x104>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d82:	4b2f      	ldr	r3, [pc, #188]	@ (8000e40 <MX_ADC1_Init+0x104>)
 8000d84:	2204      	movs	r2, #4
 8000d86:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d88:	4b2d      	ldr	r3, [pc, #180]	@ (8000e40 <MX_ADC1_Init+0x104>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e40 <MX_ADC1_Init+0x104>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000d94:	4b2a      	ldr	r3, [pc, #168]	@ (8000e40 <MX_ADC1_Init+0x104>)
 8000d96:	2202      	movs	r2, #2
 8000d98:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d9a:	4b29      	ldr	r3, [pc, #164]	@ (8000e40 <MX_ADC1_Init+0x104>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da2:	4b27      	ldr	r3, [pc, #156]	@ (8000e40 <MX_ADC1_Init+0x104>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000da8:	4b25      	ldr	r3, [pc, #148]	@ (8000e40 <MX_ADC1_Init+0x104>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000dae:	4b24      	ldr	r3, [pc, #144]	@ (8000e40 <MX_ADC1_Init+0x104>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000db6:	4b22      	ldr	r3, [pc, #136]	@ (8000e40 <MX_ADC1_Init+0x104>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000dbc:	4b20      	ldr	r3, [pc, #128]	@ (8000e40 <MX_ADC1_Init+0x104>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dc4:	481e      	ldr	r0, [pc, #120]	@ (8000e40 <MX_ADC1_Init+0x104>)
 8000dc6:	f001 f981 	bl	80020cc <HAL_ADC_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000dd0:	f000 fcc6 	bl	8001760 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4818      	ldr	r0, [pc, #96]	@ (8000e40 <MX_ADC1_Init+0x104>)
 8000de0:	f001 ff96 	bl	8002d10 <HAL_ADCEx_MultiModeConfigChannel>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000dea:	f000 fcb9 	bl	8001760 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000dee:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <MX_ADC1_Init+0x108>)
 8000df0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df2:	2306      	movs	r3, #6
 8000df4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000df6:	2307      	movs	r3, #7
 8000df8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dfa:	237f      	movs	r3, #127	@ 0x7f
 8000dfc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480d      	ldr	r0, [pc, #52]	@ (8000e40 <MX_ADC1_Init+0x104>)
 8000e0c:	f001 fb1a 	bl	8002444 <HAL_ADC_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000e16:	f000 fca3 	bl	8001760 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <MX_ADC1_Init+0x10c>)
 8000e1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e1e:	230c      	movs	r3, #12
 8000e20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	@ (8000e40 <MX_ADC1_Init+0x104>)
 8000e28:	f001 fb0c 	bl	8002444 <HAL_ADC_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000e32:	f000 fc95 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3730      	adds	r7, #48	@ 0x30
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000034 	.word	0x20000034
 8000e44:	1d500080 	.word	0x1d500080
 8000e48:	21800100 	.word	0x21800100

08000e4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b09c      	sub	sp, #112	@ 0x70
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e52:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e6c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	615a      	str	r2, [r3, #20]
 8000e7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2234      	movs	r2, #52	@ 0x34
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f005 fb4c 	bl	8006524 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e8c:	4b51      	ldr	r3, [pc, #324]	@ (8000fd4 <MX_TIM1_Init+0x188>)
 8000e8e:	4a52      	ldr	r2, [pc, #328]	@ (8000fd8 <MX_TIM1_Init+0x18c>)
 8000e90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000e92:	4b50      	ldr	r3, [pc, #320]	@ (8000fd4 <MX_TIM1_Init+0x188>)
 8000e94:	22a9      	movs	r2, #169	@ 0xa9
 8000e96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b4e      	ldr	r3, [pc, #312]	@ (8000fd4 <MX_TIM1_Init+0x188>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000e9e:	4b4d      	ldr	r3, [pc, #308]	@ (8000fd4 <MX_TIM1_Init+0x188>)
 8000ea0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000ea4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea6:	4b4b      	ldr	r3, [pc, #300]	@ (8000fd4 <MX_TIM1_Init+0x188>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eac:	4b49      	ldr	r3, [pc, #292]	@ (8000fd4 <MX_TIM1_Init+0x188>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb2:	4b48      	ldr	r3, [pc, #288]	@ (8000fd4 <MX_TIM1_Init+0x188>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eb8:	4846      	ldr	r0, [pc, #280]	@ (8000fd4 <MX_TIM1_Init+0x188>)
 8000eba:	f003 fcbd 	bl	8004838 <HAL_TIM_Base_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ec4:	f000 fc4c 	bl	8001760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ecc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ece:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	483f      	ldr	r0, [pc, #252]	@ (8000fd4 <MX_TIM1_Init+0x188>)
 8000ed6:	f004 fba1 	bl	800561c <HAL_TIM_ConfigClockSource>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ee0:	f000 fc3e 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ee4:	483b      	ldr	r0, [pc, #236]	@ (8000fd4 <MX_TIM1_Init+0x188>)
 8000ee6:	f003 fde7 	bl	8004ab8 <HAL_TIM_PWM_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ef0:	f000 fc36 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f04:	4619      	mov	r1, r3
 8000f06:	4833      	ldr	r0, [pc, #204]	@ (8000fd4 <MX_TIM1_Init+0x188>)
 8000f08:	f005 f966 	bl	80061d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000f12:	f000 fc25 	bl	8001760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f16:	2360      	movs	r3, #96	@ 0x60
 8000f18:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f22:	2300      	movs	r3, #0
 8000f24:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f32:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f36:	2200      	movs	r2, #0
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4826      	ldr	r0, [pc, #152]	@ (8000fd4 <MX_TIM1_Init+0x188>)
 8000f3c:	f004 fa5a 	bl	80053f4 <HAL_TIM_PWM_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000f46:	f000 fc0b 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f4a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f4e:	2204      	movs	r2, #4
 8000f50:	4619      	mov	r1, r3
 8000f52:	4820      	ldr	r0, [pc, #128]	@ (8000fd4 <MX_TIM1_Init+0x188>)
 8000f54:	f004 fa4e 	bl	80053f4 <HAL_TIM_PWM_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000f5e:	f000 fbff 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f66:	2208      	movs	r2, #8
 8000f68:	4619      	mov	r1, r3
 8000f6a:	481a      	ldr	r0, [pc, #104]	@ (8000fd4 <MX_TIM1_Init+0x188>)
 8000f6c:	f004 fa42 	bl	80053f4 <HAL_TIM_PWM_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000f76:	f000 fbf3 	bl	8001760 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fa0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000faa:	2300      	movs	r3, #0
 8000fac:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4807      	ldr	r0, [pc, #28]	@ (8000fd4 <MX_TIM1_Init+0x188>)
 8000fb8:	f005 f9a4 	bl	8006304 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000fc2:	f000 fbcd 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fc6:	4803      	ldr	r0, [pc, #12]	@ (8000fd4 <MX_TIM1_Init+0x188>)
 8000fc8:	f000 fd50 	bl	8001a6c <HAL_TIM_MspPostInit>

}
 8000fcc:	bf00      	nop
 8000fce:	3770      	adds	r7, #112	@ 0x70
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000100 	.word	0x20000100
 8000fd8:	40012c00 	.word	0x40012c00

08000fdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8001074 <MX_TIM2_Init+0x98>)
 8000ffc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001000:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8001002:	4b1c      	ldr	r3, [pc, #112]	@ (8001074 <MX_TIM2_Init+0x98>)
 8001004:	22a9      	movs	r2, #169	@ 0xa9
 8001006:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001008:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <MX_TIM2_Init+0x98>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800100e:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <MX_TIM2_Init+0x98>)
 8001010:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001014:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001016:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <MX_TIM2_Init+0x98>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101c:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <MX_TIM2_Init+0x98>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001022:	4814      	ldr	r0, [pc, #80]	@ (8001074 <MX_TIM2_Init+0x98>)
 8001024:	f003 fc08 	bl	8004838 <HAL_TIM_Base_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800102e:	f000 fb97 	bl	8001760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001032:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001036:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	4619      	mov	r1, r3
 800103e:	480d      	ldr	r0, [pc, #52]	@ (8001074 <MX_TIM2_Init+0x98>)
 8001040:	f004 faec 	bl	800561c <HAL_TIM_ConfigClockSource>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800104a:	f000 fb89 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	4619      	mov	r1, r3
 800105a:	4806      	ldr	r0, [pc, #24]	@ (8001074 <MX_TIM2_Init+0x98>)
 800105c:	f005 f8bc 	bl	80061d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001066:	f000 fb7b 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	3720      	adds	r7, #32
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	2000014c 	.word	0x2000014c

08001078 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08c      	sub	sp, #48	@ 0x30
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	2224      	movs	r2, #36	@ 0x24
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f005 fa4c 	bl	8006524 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108c:	463b      	mov	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001096:	4b21      	ldr	r3, [pc, #132]	@ (800111c <MX_TIM3_Init+0xa4>)
 8001098:	4a21      	ldr	r2, [pc, #132]	@ (8001120 <MX_TIM3_Init+0xa8>)
 800109a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800109c:	4b1f      	ldr	r3, [pc, #124]	@ (800111c <MX_TIM3_Init+0xa4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a2:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_TIM3_Init+0xa4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2048;
 80010a8:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <MX_TIM3_Init+0xa4>)
 80010aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <MX_TIM3_Init+0xa4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b6:	4b19      	ldr	r3, [pc, #100]	@ (800111c <MX_TIM3_Init+0xa4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010bc:	2303      	movs	r3, #3
 80010be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010c4:	2301      	movs	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010d4:	2301      	movs	r3, #1
 80010d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	4619      	mov	r1, r3
 80010e6:	480d      	ldr	r0, [pc, #52]	@ (800111c <MX_TIM3_Init+0xa4>)
 80010e8:	f003 fe5a 	bl	8004da0 <HAL_TIM_Encoder_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80010f2:	f000 fb35 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010fe:	463b      	mov	r3, r7
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <MX_TIM3_Init+0xa4>)
 8001104:	f005 f868 	bl	80061d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800110e:	f000 fb27 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3730      	adds	r7, #48	@ 0x30
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000198 	.word	0x20000198
 8001120:	40000400 	.word	0x40000400

08001124 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	@ 0x30
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	2224      	movs	r2, #36	@ 0x24
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f005 f9f6 	bl	8006524 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001138:	463b      	mov	r3, r7
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001142:	4b21      	ldr	r3, [pc, #132]	@ (80011c8 <MX_TIM4_Init+0xa4>)
 8001144:	4a21      	ldr	r2, [pc, #132]	@ (80011cc <MX_TIM4_Init+0xa8>)
 8001146:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001148:	4b1f      	ldr	r3, [pc, #124]	@ (80011c8 <MX_TIM4_Init+0xa4>)
 800114a:	2200      	movs	r2, #0
 800114c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114e:	4b1e      	ldr	r3, [pc, #120]	@ (80011c8 <MX_TIM4_Init+0xa4>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001154:	4b1c      	ldr	r3, [pc, #112]	@ (80011c8 <MX_TIM4_Init+0xa4>)
 8001156:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800115a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115c:	4b1a      	ldr	r3, [pc, #104]	@ (80011c8 <MX_TIM4_Init+0xa4>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001162:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <MX_TIM4_Init+0xa4>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001168:	2303      	movs	r3, #3
 800116a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001170:	2301      	movs	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001180:	2301      	movs	r3, #1
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	4619      	mov	r1, r3
 8001192:	480d      	ldr	r0, [pc, #52]	@ (80011c8 <MX_TIM4_Init+0xa4>)
 8001194:	f003 fe04 	bl	8004da0 <HAL_TIM_Encoder_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800119e:	f000 fadf 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	@ (80011c8 <MX_TIM4_Init+0xa4>)
 80011b0:	f005 f812 	bl	80061d8 <HAL_TIMEx_MasterConfigSynchronization>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80011ba:	f000 fad1 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3730      	adds	r7, #48	@ 0x30
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200001e4 	.word	0x200001e4
 80011cc:	40000800 	.word	0x40000800

080011d0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001268 <MX_TIM5_Init+0x98>)
 80011f0:	4a1e      	ldr	r2, [pc, #120]	@ (800126c <MX_TIM5_Init+0x9c>)
 80011f2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1699;
 80011f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <MX_TIM5_Init+0x98>)
 80011f6:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80011fa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <MX_TIM5_Init+0x98>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001202:	4b19      	ldr	r3, [pc, #100]	@ (8001268 <MX_TIM5_Init+0x98>)
 8001204:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001208:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120a:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <MX_TIM5_Init+0x98>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001210:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <MX_TIM5_Init+0x98>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001216:	4814      	ldr	r0, [pc, #80]	@ (8001268 <MX_TIM5_Init+0x98>)
 8001218:	f003 fb0e 	bl	8004838 <HAL_TIM_Base_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001222:	f000 fa9d 	bl	8001760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4619      	mov	r1, r3
 8001232:	480d      	ldr	r0, [pc, #52]	@ (8001268 <MX_TIM5_Init+0x98>)
 8001234:	f004 f9f2 	bl	800561c <HAL_TIM_ConfigClockSource>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800123e:	f000 fa8f 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4619      	mov	r1, r3
 800124e:	4806      	ldr	r0, [pc, #24]	@ (8001268 <MX_TIM5_Init+0x98>)
 8001250:	f004 ffc2 	bl	80061d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800125a:	f000 fa81 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000230 	.word	0x20000230
 800126c:	40000c00 	.word	0x40000c00

08001270 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001276:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <MX_DMA_Init+0x50>)
 8001278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800127a:	4a11      	ldr	r2, [pc, #68]	@ (80012c0 <MX_DMA_Init+0x50>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6493      	str	r3, [r2, #72]	@ 0x48
 8001282:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <MX_DMA_Init+0x50>)
 8001284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800128e:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <MX_DMA_Init+0x50>)
 8001290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001292:	4a0b      	ldr	r2, [pc, #44]	@ (80012c0 <MX_DMA_Init+0x50>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6493      	str	r3, [r2, #72]	@ 0x48
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <MX_DMA_Init+0x50>)
 800129c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	200b      	movs	r0, #11
 80012ac:	f001 ff13 	bl	80030d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012b0:	200b      	movs	r0, #11
 80012b2:	f001 ff2a 	bl	800310a <HAL_NVIC_EnableIRQ>

}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40021000 	.word	0x40021000

080012c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	@ 0x28
 80012c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	4b4f      	ldr	r3, [pc, #316]	@ (8001418 <MX_GPIO_Init+0x154>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	4a4e      	ldr	r2, [pc, #312]	@ (8001418 <MX_GPIO_Init+0x154>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001418 <MX_GPIO_Init+0x154>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012f2:	4b49      	ldr	r3, [pc, #292]	@ (8001418 <MX_GPIO_Init+0x154>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f6:	4a48      	ldr	r2, [pc, #288]	@ (8001418 <MX_GPIO_Init+0x154>)
 80012f8:	f043 0320 	orr.w	r3, r3, #32
 80012fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fe:	4b46      	ldr	r3, [pc, #280]	@ (8001418 <MX_GPIO_Init+0x154>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	f003 0320 	and.w	r3, r3, #32
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	4b43      	ldr	r3, [pc, #268]	@ (8001418 <MX_GPIO_Init+0x154>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	4a42      	ldr	r2, [pc, #264]	@ (8001418 <MX_GPIO_Init+0x154>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001316:	4b40      	ldr	r3, [pc, #256]	@ (8001418 <MX_GPIO_Init+0x154>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	4b3d      	ldr	r3, [pc, #244]	@ (8001418 <MX_GPIO_Init+0x154>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	4a3c      	ldr	r2, [pc, #240]	@ (8001418 <MX_GPIO_Init+0x154>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132e:	4b3a      	ldr	r3, [pc, #232]	@ (8001418 <MX_GPIO_Init+0x154>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2120      	movs	r1, #32
 800133e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001342:	f002 fa51 	bl	80037e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR_Driver_1_Pin|Dir_Driver_2_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	21c0      	movs	r1, #192	@ 0xc0
 800134a:	4834      	ldr	r0, [pc, #208]	@ (800141c <MX_GPIO_Init+0x158>)
 800134c:	f002 fa4c 	bl	80037e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EMERGENCY_Pin JOY_BUTTON_Pin QEI_1_X_Pin */
  GPIO_InitStruct.Pin = EMERGENCY_Pin|JOY_BUTTON_Pin|QEI_1_X_Pin;
 8001350:	2319      	movs	r3, #25
 8001352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001354:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	482d      	ldr	r0, [pc, #180]	@ (800141c <MX_GPIO_Init+0x158>)
 8001366:	f002 f8a5 	bl	80034b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800136a:	230c      	movs	r3, #12
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800137a:	230c      	movs	r3, #12
 800137c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001388:	f002 f894 	bl	80034b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800138c:	2320      	movs	r3, #32
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a6:	f002 f885 	bl	80034b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prismatic_right_limit_Pin Prismatic_left_limit_Pin */
  GPIO_InitStruct.Pin = Prismatic_right_limit_Pin|Prismatic_left_limit_Pin;
 80013aa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013b0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4817      	ldr	r0, [pc, #92]	@ (8001420 <MX_GPIO_Init+0x15c>)
 80013c2:	f002 f877 	bl	80034b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : step_one_plotter_Pin step_two_plotter_Pin */
  GPIO_InitStruct.Pin = step_one_plotter_Pin|step_two_plotter_Pin;
 80013c6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	4810      	ldr	r0, [pc, #64]	@ (8001420 <MX_GPIO_Init+0x15c>)
 80013de:	f002 f869 	bl	80034b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Driver_1_Pin Dir_Driver_2_Pin */
  GPIO_InitStruct.Pin = DIR_Driver_1_Pin|Dir_Driver_2_Pin;
 80013e2:	23c0      	movs	r3, #192	@ 0xc0
 80013e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	4808      	ldr	r0, [pc, #32]	@ (800141c <MX_GPIO_Init+0x158>)
 80013fa:	f002 f85b 	bl	80034b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	2028      	movs	r0, #40	@ 0x28
 8001404:	f001 fe67 	bl	80030d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001408:	2028      	movs	r0, #40	@ 0x28
 800140a:	f001 fe7e 	bl	800310a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800140e:	bf00      	nop
 8001410:	3728      	adds	r7, #40	@ 0x28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000
 800141c:	48000800 	.word	0x48000800
 8001420:	48000400 	.word	0x48000400

08001424 <SetHomePrismatic>:

/* USER CODE BEGIN 4 */

// Set Prismatic to home
void SetHomePrismatic() {
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	while (prismatic_left_sw == false) {
 8001428:	e003      	b.n	8001432 <SetHomePrismatic+0xe>
		PrismaticMotorControl(30, 1);
 800142a:	2101      	movs	r1, #1
 800142c:	201e      	movs	r0, #30
 800142e:	f000 f82b 	bl	8001488 <PrismaticMotorControl>
	while (prismatic_left_sw == false) {
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <SetHomePrismatic+0x50>)
 8001434:	f993 3000 	ldrsb.w	r3, [r3]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f6      	beq.n	800142a <SetHomePrismatic+0x6>
	}
	PrismaticMotorControl(0, 0);
 800143c:	2100      	movs	r1, #0
 800143e:	2000      	movs	r0, #0
 8001440:	f000 f822 	bl	8001488 <PrismaticMotorControl>

	//reset encoder val
	HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_ALL);
 8001444:	213c      	movs	r1, #60	@ 0x3c
 8001446:	480c      	ldr	r0, [pc, #48]	@ (8001478 <SetHomePrismatic+0x54>)
 8001448:	f003 fdde 	bl	8005008 <HAL_TIM_Encoder_Stop>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800144c:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <SetHomePrismatic+0x54>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2200      	movs	r2, #0
 8001452:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_raw_encoder_val = 0;
 8001454:	4b09      	ldr	r3, [pc, #36]	@ (800147c <SetHomePrismatic+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
	prismatic_raw_encoder_prev = 0;
 800145a:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <SetHomePrismatic+0x5c>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
	prismatic_encoder_val = 0;
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <SetHomePrismatic+0x60>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001466:	213c      	movs	r1, #60	@ 0x3c
 8001468:	4803      	ldr	r0, [pc, #12]	@ (8001478 <SetHomePrismatic+0x54>)
 800146a:	f003 fd3f 	bl	8004eec <HAL_TIM_Encoder_Start>
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000027c 	.word	0x2000027c
 8001478:	200001e4 	.word	0x200001e4
 800147c:	20000280 	.word	0x20000280
 8001480:	20000284 	.word	0x20000284
 8001484:	20000288 	.word	0x20000288

08001488 <PrismaticMotorControl>:

void PrismaticMotorControl(int speed, int dir) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af02      	add	r7, sp, #8
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
	// Saturation
	speed = (speed > 100) ? 100 : speed;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b64      	cmp	r3, #100	@ 0x64
 8001496:	bfa8      	it	ge
 8001498:	2364      	movge	r3, #100	@ 0x64
 800149a:	607b      	str	r3, [r7, #4]

	if (dir == 0) {
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d105      	bne.n	80014ae <PrismaticMotorControl+0x26>
		// Set motor2 direction to ___
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2180      	movs	r1, #128	@ 0x80
 80014a6:	480d      	ldr	r0, [pc, #52]	@ (80014dc <PrismaticMotorControl+0x54>)
 80014a8:	f002 f99e 	bl	80037e8 <HAL_GPIO_WritePin>
 80014ac:	e004      	b.n	80014b8 <PrismaticMotorControl+0x30>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80014ae:	2201      	movs	r2, #1
 80014b0:	2180      	movs	r1, #128	@ 0x80
 80014b2:	480a      	ldr	r0, [pc, #40]	@ (80014dc <PrismaticMotorControl+0x54>)
 80014b4:	f002 f998 	bl	80037e8 <HAL_GPIO_WritePin>
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, map(speed, 0, 100, 0, 19999));
 80014b8:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2300      	movs	r3, #0
 80014c0:	2264      	movs	r2, #100	@ 0x64
 80014c2:	2100      	movs	r1, #0
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 f8ad 	bl	8001624 <map>
 80014ca:	4602      	mov	r2, r0
 80014cc:	4b04      	ldr	r3, [pc, #16]	@ (80014e0 <PrismaticMotorControl+0x58>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	48000800 	.word	0x48000800
 80014e0:	20000100 	.word	0x20000100

080014e4 <PrismaticPIDControl>:

void PrismaticPIDControl(double set_point) {
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b08b      	sub	sp, #44	@ 0x2c
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	ed87 0b00 	vstr	d0, [r7]
	double position = (prismatic_encoder_val * 16.00) / 8192.00;
 80014ee:	4b47      	ldr	r3, [pc, #284]	@ (800160c <PrismaticPIDControl+0x128>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7fe ffe2 	bl	80004bc <__aeabi_i2d>
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	4b44      	ldr	r3, [pc, #272]	@ (8001610 <PrismaticPIDControl+0x12c>)
 80014fe:	f7ff f847 	bl	8000590 <__aeabi_dmul>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	4b41      	ldr	r3, [pc, #260]	@ (8001614 <PrismaticPIDControl+0x130>)
 8001510:	f7ff f968 	bl	80007e4 <__aeabi_ddiv>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double speed = arm_pid_f32(&PID, set_point - position);
 800151c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001520:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001524:	f7fe fe7c 	bl	8000220 <__aeabi_dsub>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4610      	mov	r0, r2
 800152e:	4619      	mov	r1, r3
 8001530:	f7ff faf0 	bl	8000b14 <__aeabi_d2f>
 8001534:	4603      	mov	r3, r0
 8001536:	4a38      	ldr	r2, [pc, #224]	@ (8001618 <PrismaticPIDControl+0x134>)
 8001538:	613a      	str	r2, [r7, #16]
 800153a:	60fb      	str	r3, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	ed93 7a00 	vldr	s14, [r3]
 8001542:	edd7 7a03 	vldr	s15, [r7, #12]
 8001546:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	edd3 7a03 	vldr	s15, [r3, #12]
 8001556:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800155a:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	edd3 6a02 	vldr	s13, [r3, #8]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	edd3 7a04 	vldr	s15, [r3, #16]
 800156a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800156e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157c:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ffa2 	bl	80004e0 <__aeabi_f2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	prismatic_error = set_point - position;
 80015a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015ac:	f7fe fe38 	bl	8000220 <__aeabi_dsub>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4919      	ldr	r1, [pc, #100]	@ (800161c <PrismaticPIDControl+0x138>)
 80015b6:	e9c1 2300 	strd	r2, r3, [r1]
	prismatic_feedback = speed;
 80015ba:	4919      	ldr	r1, [pc, #100]	@ (8001620 <PrismaticPIDControl+0x13c>)
 80015bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015c0:	e9c1 2300 	strd	r2, r3, [r1]
	int dir = (speed > 0) ? 0 : 1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	461c      	mov	r4, r3
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015d4:	f7ff fa6c 	bl	8000ab0 <__aeabi_dcmpgt>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <PrismaticPIDControl+0xfe>
 80015de:	2300      	movs	r3, #0
 80015e0:	461c      	mov	r4, r3
 80015e2:	b2e3      	uxtb	r3, r4
 80015e4:	f083 0301 	eor.w	r3, r3, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	617b      	str	r3, [r7, #20]
	PrismaticMotorControl(abs(speed), dir);
 80015ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015f0:	f7ff fa68 	bl	8000ac4 <__aeabi_d2iz>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	bfb8      	it	lt
 80015fa:	425b      	neglt	r3, r3
 80015fc:	6979      	ldr	r1, [r7, #20]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff42 	bl	8001488 <PrismaticMotorControl>
}
 8001604:	bf00      	nop
 8001606:	372c      	adds	r7, #44	@ 0x2c
 8001608:	46bd      	mov	sp, r7
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	20000288 	.word	0x20000288
 8001610:	40300000 	.word	0x40300000
 8001614:	40c00000 	.word	0x40c00000
 8001618:	200002a8 	.word	0x200002a8
 800161c:	20000298 	.word	0x20000298
 8001620:	200002a0 	.word	0x200002a0

08001624 <map>:

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	69b9      	ldr	r1, [r7, #24]
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	1a8a      	subs	r2, r1, r2
 800163e:	fb03 f202 	mul.w	r2, r3, r2
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	1acb      	subs	r3, r1, r3
 8001648:	fb92 f2f3 	sdiv	r2, r2, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	4413      	add	r3, r2
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_GPIO_EXTI_Callback>:

// External Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_12) {
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800166c:	d109      	bne.n	8001682 <HAL_GPIO_EXTI_Callback+0x26>
		prismatic_left_sw = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 800166e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001672:	480c      	ldr	r0, [pc, #48]	@ (80016a4 <HAL_GPIO_EXTI_Callback+0x48>)
 8001674:	f002 f8a0 	bl	80037b8 <HAL_GPIO_ReadPin>
 8001678:	4603      	mov	r3, r0
 800167a:	b25a      	sxtb	r2, r3
 800167c:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <HAL_GPIO_EXTI_Callback+0x4c>)
 800167e:	701a      	strb	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_11) {
		prismatic_right_sw = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
	}
}
 8001680:	e00c      	b.n	800169c <HAL_GPIO_EXTI_Callback+0x40>
	} else if (GPIO_Pin == GPIO_PIN_11) {
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001688:	d108      	bne.n	800169c <HAL_GPIO_EXTI_Callback+0x40>
		prismatic_right_sw = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 800168a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800168e:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <HAL_GPIO_EXTI_Callback+0x48>)
 8001690:	f002 f892 	bl	80037b8 <HAL_GPIO_ReadPin>
 8001694:	4603      	mov	r3, r0
 8001696:	b25a      	sxtb	r2, r3
 8001698:	4b04      	ldr	r3, [pc, #16]	@ (80016ac <HAL_GPIO_EXTI_Callback+0x50>)
 800169a:	701a      	strb	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	48000400 	.word	0x48000400
 80016a8:	2000027c 	.word	0x2000027c
 80016ac:	2000027d 	.word	0x2000027d

080016b0 <HAL_TIM_PeriodElapsedCallback>:

// Timer loop (Read sensor data and calculate here)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a21      	ldr	r2, [pc, #132]	@ (8001740 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d13a      	bne.n	8001736 <HAL_TIM_PeriodElapsedCallback+0x86>

		//-------------------------Read QEI Prismatic-------------------------
		prismatic_raw_encoder_val = __HAL_TIM_GET_COUNTER(&htim4);
 80016c0:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80016ca:	601a      	str	r2, [r3, #0]
		int16_t delta = prismatic_raw_encoder_val - prismatic_raw_encoder_prev;
 80016cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001748 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	4b1e      	ldr	r3, [pc, #120]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	81fb      	strh	r3, [r7, #14]

		if (delta > 65535 / 2) {
			delta -= 65535;
		} else if (delta < -65535 / 2) {
 80016de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016e2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80016e6:	d103      	bne.n	80016f0 <HAL_TIM_PeriodElapsedCallback+0x40>
			delta += 65535;
 80016e8:	89fb      	ldrh	r3, [r7, #14]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	81fb      	strh	r3, [r7, #14]
		}

		prismatic_encoder_val += delta;
 80016f0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016f4:	4b16      	ldr	r3, [pc, #88]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4413      	add	r3, r2
 80016fa:	4a15      	ldr	r2, [pc, #84]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80016fc:	6013      	str	r3, [r2, #0]
		prismatic_position = (prismatic_encoder_val * 16.00) / 8192.00;
 80016fe:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe feda 	bl	80004bc <__aeabi_i2d>
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800170e:	f7fe ff3f 	bl	8000590 <__aeabi_dmul>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001720:	f7ff f860 	bl	80007e4 <__aeabi_ddiv>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	490c      	ldr	r1, [pc, #48]	@ (800175c <HAL_TIM_PeriodElapsedCallback+0xac>)
 800172a:	e9c1 2300 	strd	r2, r3, [r1]
		prismatic_raw_encoder_prev = prismatic_raw_encoder_val;
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a06      	ldr	r2, [pc, #24]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001734:	6013      	str	r3, [r2, #0]
	}

	if(htim == &htim5){

	}
}
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000014c 	.word	0x2000014c
 8001744:	200001e4 	.word	0x200001e4
 8001748:	20000280 	.word	0x20000280
 800174c:	20000284 	.word	0x20000284
 8001750:	20000288 	.word	0x20000288
 8001754:	40300000 	.word	0x40300000
 8001758:	40c00000 	.word	0x40c00000
 800175c:	20000290 	.word	0x20000290

08001760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001764:	b672      	cpsid	i
}
 8001766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <Error_Handler+0x8>

0800176c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <HAL_MspInit+0x44>)
 8001774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001776:	4a0e      	ldr	r2, [pc, #56]	@ (80017b0 <HAL_MspInit+0x44>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6613      	str	r3, [r2, #96]	@ 0x60
 800177e:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <HAL_MspInit+0x44>)
 8001780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <HAL_MspInit+0x44>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178e:	4a08      	ldr	r2, [pc, #32]	@ (80017b0 <HAL_MspInit+0x44>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001794:	6593      	str	r3, [r2, #88]	@ 0x58
 8001796:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <HAL_MspInit+0x44>)
 8001798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017a2:	f002 f8f5 	bl	8003990 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000

080017b4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b09e      	sub	sp, #120	@ 0x78
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017cc:	f107 0310 	add.w	r3, r7, #16
 80017d0:	2254      	movs	r2, #84	@ 0x54
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f004 fea5 	bl	8006524 <memset>
  if(hadc->Instance==ADC1)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017e2:	d15e      	bne.n	80018a2 <HAL_ADC_MspInit+0xee>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80017e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017e8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80017ea:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80017ee:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	4618      	mov	r0, r3
 80017f6:	f002 fdd1 	bl	800439c <HAL_RCCEx_PeriphCLKConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001800:	f7ff ffae 	bl	8001760 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001804:	4b29      	ldr	r3, [pc, #164]	@ (80018ac <HAL_ADC_MspInit+0xf8>)
 8001806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001808:	4a28      	ldr	r2, [pc, #160]	@ (80018ac <HAL_ADC_MspInit+0xf8>)
 800180a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800180e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001810:	4b26      	ldr	r3, [pc, #152]	@ (80018ac <HAL_ADC_MspInit+0xf8>)
 8001812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001814:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800181c:	4b23      	ldr	r3, [pc, #140]	@ (80018ac <HAL_ADC_MspInit+0xf8>)
 800181e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001820:	4a22      	ldr	r2, [pc, #136]	@ (80018ac <HAL_ADC_MspInit+0xf8>)
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001828:	4b20      	ldr	r3, [pc, #128]	@ (80018ac <HAL_ADC_MspInit+0xf8>)
 800182a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = JOY_X_AXIS_Pin|JOY_Y_AXIS_Pin;
 8001834:	2306      	movs	r3, #6
 8001836:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001838:	2303      	movs	r3, #3
 800183a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001840:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001844:	4619      	mov	r1, r3
 8001846:	481a      	ldr	r0, [pc, #104]	@ (80018b0 <HAL_ADC_MspInit+0xfc>)
 8001848:	f001 fe34 	bl	80034b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <HAL_ADC_MspInit+0x100>)
 800184e:	4a1a      	ldr	r2, [pc, #104]	@ (80018b8 <HAL_ADC_MspInit+0x104>)
 8001850:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001852:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <HAL_ADC_MspInit+0x100>)
 8001854:	2205      	movs	r2, #5
 8001856:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001858:	4b16      	ldr	r3, [pc, #88]	@ (80018b4 <HAL_ADC_MspInit+0x100>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800185e:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <HAL_ADC_MspInit+0x100>)
 8001860:	2200      	movs	r2, #0
 8001862:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001864:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <HAL_ADC_MspInit+0x100>)
 8001866:	2280      	movs	r2, #128	@ 0x80
 8001868:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800186a:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <HAL_ADC_MspInit+0x100>)
 800186c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001870:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <HAL_ADC_MspInit+0x100>)
 8001874:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001878:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800187a:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <HAL_ADC_MspInit+0x100>)
 800187c:	2220      	movs	r2, #32
 800187e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001880:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <HAL_ADC_MspInit+0x100>)
 8001882:	2200      	movs	r2, #0
 8001884:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001886:	480b      	ldr	r0, [pc, #44]	@ (80018b4 <HAL_ADC_MspInit+0x100>)
 8001888:	f001 fc5a 	bl	8003140 <HAL_DMA_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8001892:	f7ff ff65 	bl	8001760 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a06      	ldr	r2, [pc, #24]	@ (80018b4 <HAL_ADC_MspInit+0x100>)
 800189a:	655a      	str	r2, [r3, #84]	@ 0x54
 800189c:	4a05      	ldr	r2, [pc, #20]	@ (80018b4 <HAL_ADC_MspInit+0x100>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80018a2:	bf00      	nop
 80018a4:	3778      	adds	r7, #120	@ 0x78
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000
 80018b0:	48000800 	.word	0x48000800
 80018b4:	200000a0 	.word	0x200000a0
 80018b8:	40020008 	.word	0x40020008

080018bc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a23      	ldr	r2, [pc, #140]	@ (8001958 <HAL_TIM_Base_MspInit+0x9c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d10c      	bne.n	80018e8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ce:	4b23      	ldr	r3, [pc, #140]	@ (800195c <HAL_TIM_Base_MspInit+0xa0>)
 80018d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d2:	4a22      	ldr	r2, [pc, #136]	@ (800195c <HAL_TIM_Base_MspInit+0xa0>)
 80018d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80018da:	4b20      	ldr	r3, [pc, #128]	@ (800195c <HAL_TIM_Base_MspInit+0xa0>)
 80018dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 80018e6:	e032      	b.n	800194e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018f0:	d114      	bne.n	800191c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018f2:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <HAL_TIM_Base_MspInit+0xa0>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f6:	4a19      	ldr	r2, [pc, #100]	@ (800195c <HAL_TIM_Base_MspInit+0xa0>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80018fe:	4b17      	ldr	r3, [pc, #92]	@ (800195c <HAL_TIM_Base_MspInit+0xa0>)
 8001900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	201c      	movs	r0, #28
 8001910:	f001 fbe1 	bl	80030d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001914:	201c      	movs	r0, #28
 8001916:	f001 fbf8 	bl	800310a <HAL_NVIC_EnableIRQ>
}
 800191a:	e018      	b.n	800194e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM5)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0f      	ldr	r2, [pc, #60]	@ (8001960 <HAL_TIM_Base_MspInit+0xa4>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d113      	bne.n	800194e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001926:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <HAL_TIM_Base_MspInit+0xa0>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192a:	4a0c      	ldr	r2, [pc, #48]	@ (800195c <HAL_TIM_Base_MspInit+0xa0>)
 800192c:	f043 0308 	orr.w	r3, r3, #8
 8001930:	6593      	str	r3, [r2, #88]	@ 0x58
 8001932:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <HAL_TIM_Base_MspInit+0xa0>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	2032      	movs	r0, #50	@ 0x32
 8001944:	f001 fbc7 	bl	80030d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001948:	2032      	movs	r0, #50	@ 0x32
 800194a:	f001 fbde 	bl	800310a <HAL_NVIC_EnableIRQ>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40012c00 	.word	0x40012c00
 800195c:	40021000 	.word	0x40021000
 8001960:	40000c00 	.word	0x40000c00

08001964 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	@ 0x30
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a36      	ldr	r2, [pc, #216]	@ (8001a5c <HAL_TIM_Encoder_MspInit+0xf8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d131      	bne.n	80019ea <HAL_TIM_Encoder_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001986:	4b36      	ldr	r3, [pc, #216]	@ (8001a60 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198a:	4a35      	ldr	r2, [pc, #212]	@ (8001a60 <HAL_TIM_Encoder_MspInit+0xfc>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6593      	str	r3, [r2, #88]	@ 0x58
 8001992:	4b33      	ldr	r3, [pc, #204]	@ (8001a60 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	61bb      	str	r3, [r7, #24]
 800199c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	4b30      	ldr	r3, [pc, #192]	@ (8001a60 <HAL_TIM_Encoder_MspInit+0xfc>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001a60 <HAL_TIM_Encoder_MspInit+0xfc>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001a60 <HAL_TIM_Encoder_MspInit+0xfc>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = QEI_1_A_Pin|QEI_1_B_Pin;
 80019b6:	23c0      	movs	r3, #192	@ 0xc0
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019c6:	2302      	movs	r3, #2
 80019c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	4619      	mov	r1, r3
 80019d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019d4:	f001 fd6e 	bl	80034b4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2100      	movs	r1, #0
 80019dc:	201d      	movs	r0, #29
 80019de:	f001 fb7a 	bl	80030d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019e2:	201d      	movs	r0, #29
 80019e4:	f001 fb91 	bl	800310a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019e8:	e034      	b.n	8001a54 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(htim_encoder->Instance==TIM4)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001a64 <HAL_TIM_Encoder_MspInit+0x100>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d12f      	bne.n	8001a54 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a60 <HAL_TIM_Encoder_MspInit+0xfc>)
 80019f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f8:	4a19      	ldr	r2, [pc, #100]	@ (8001a60 <HAL_TIM_Encoder_MspInit+0xfc>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a00:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0c:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a10:	4a13      	ldr	r2, [pc, #76]	@ (8001a60 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001a12:	f043 0302 	orr.w	r3, r3, #2
 8001a16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a18:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = QEI_2_A_Pin|QEI_2_B_Pin;
 8001a24:	23c0      	movs	r3, #192	@ 0xc0
 8001a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a34:	2302      	movs	r3, #2
 8001a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	480a      	ldr	r0, [pc, #40]	@ (8001a68 <HAL_TIM_Encoder_MspInit+0x104>)
 8001a40:	f001 fd38 	bl	80034b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2100      	movs	r1, #0
 8001a48:	201e      	movs	r0, #30
 8001a4a:	f001 fb44 	bl	80030d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a4e:	201e      	movs	r0, #30
 8001a50:	f001 fb5b 	bl	800310a <HAL_NVIC_EnableIRQ>
}
 8001a54:	bf00      	nop
 8001a56:	3730      	adds	r7, #48	@ 0x30
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40000400 	.word	0x40000400
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40000800 	.word	0x40000800
 8001a68:	48000400 	.word	0x48000400

08001a6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a12      	ldr	r2, [pc, #72]	@ (8001ad4 <HAL_TIM_MspPostInit+0x68>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d11d      	bne.n	8001aca <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <HAL_TIM_MspPostInit+0x6c>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a92:	4a11      	ldr	r2, [pc, #68]	@ (8001ad8 <HAL_TIM_MspPostInit+0x6c>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <HAL_TIM_MspPostInit+0x6c>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Servo_PWM_Pin|Motor_1_PWM_Pin|Motor_2_PWM_Pin;
 8001aa6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001aaa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ab8:	2306      	movs	r3, #6
 8001aba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ac6:	f001 fcf5 	bl	80034b4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001aca:	bf00      	nop
 8001acc:	3720      	adds	r7, #32
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40012c00 	.word	0x40012c00
 8001ad8:	40021000 	.word	0x40021000

08001adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <NMI_Handler+0x4>

08001ae4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <HardFault_Handler+0x4>

08001aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <MemManage_Handler+0x4>

08001af4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <BusFault_Handler+0x4>

08001afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <UsageFault_Handler+0x4>

08001b04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b32:	f000 f8d7 	bl	8001ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b40:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <DMA1_Channel1_IRQHandler+0x10>)
 8001b42:	f001 fba5 	bl	8003290 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200000a0 	.word	0x200000a0

08001b50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b54:	4802      	ldr	r0, [pc, #8]	@ (8001b60 <TIM2_IRQHandler+0x10>)
 8001b56:	f003 fafe 	bl	8005156 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000014c 	.word	0x2000014c

08001b64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b68:	4802      	ldr	r0, [pc, #8]	@ (8001b74 <TIM3_IRQHandler+0x10>)
 8001b6a:	f003 faf4 	bl	8005156 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000198 	.word	0x20000198

08001b78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b7c:	4802      	ldr	r0, [pc, #8]	@ (8001b88 <TIM4_IRQHandler+0x10>)
 8001b7e:	f003 faea 	bl	8005156 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200001e4 	.word	0x200001e4

08001b8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Prismatic_right_limit_Pin);
 8001b90:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001b94:	f001 fe40 	bl	8003818 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Prismatic_left_limit_Pin);
 8001b98:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001b9c:	f001 fe3c 	bl	8003818 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(step_one_plotter_Pin);
 8001ba0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ba4:	f001 fe38 	bl	8003818 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(step_two_plotter_Pin);
 8001ba8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001bac:	f001 fe34 	bl	8003818 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001bb8:	4802      	ldr	r0, [pc, #8]	@ (8001bc4 <TIM5_IRQHandler+0x10>)
 8001bba:	f003 facc 	bl	8005156 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000230 	.word	0x20000230

08001bc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bcc:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <SystemInit+0x20>)
 8001bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bd2:	4a05      	ldr	r2, [pc, #20]	@ (8001be8 <SystemInit+0x20>)
 8001bd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bec:	480d      	ldr	r0, [pc, #52]	@ (8001c24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bf0:	f7ff ffea 	bl	8001bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf4:	480c      	ldr	r0, [pc, #48]	@ (8001c28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bf6:	490d      	ldr	r1, [pc, #52]	@ (8001c2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <LoopForever+0xe>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bfc:	e002      	b.n	8001c04 <LoopCopyDataInit>

08001bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c02:	3304      	adds	r3, #4

08001c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c08:	d3f9      	bcc.n	8001bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c38 <LoopForever+0x16>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c10:	e001      	b.n	8001c16 <LoopFillZerobss>

08001c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c14:	3204      	adds	r2, #4

08001c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c18:	d3fb      	bcc.n	8001c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c1a:	f004 fc8b 	bl	8006534 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c1e:	f7fe ffc9 	bl	8000bb4 <main>

08001c22 <LoopForever>:

LoopForever:
    b LoopForever
 8001c22:	e7fe      	b.n	8001c22 <LoopForever>
  ldr   r0, =_estack
 8001c24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c2c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001c30:	080065ac 	.word	0x080065ac
  ldr r2, =_sbss
 8001c34:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001c38:	200002ec 	.word	0x200002ec

08001c3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c3c:	e7fe      	b.n	8001c3c <ADC1_2_IRQHandler>

08001c3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f001 fa39 	bl	80030c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f000 f80e 	bl	8001c70 <HAL_InitTick>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	71fb      	strb	r3, [r7, #7]
 8001c5e:	e001      	b.n	8001c64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c60:	f7ff fd84 	bl	800176c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c64:	79fb      	ldrb	r3, [r7, #7]

}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c7c:	4b16      	ldr	r3, [pc, #88]	@ (8001cd8 <HAL_InitTick+0x68>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d022      	beq.n	8001cca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c84:	4b15      	ldr	r3, [pc, #84]	@ (8001cdc <HAL_InitTick+0x6c>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <HAL_InitTick+0x68>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f001 fa44 	bl	8003126 <HAL_SYSTICK_Config>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10f      	bne.n	8001cc4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b0f      	cmp	r3, #15
 8001ca8:	d809      	bhi.n	8001cbe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001caa:	2200      	movs	r2, #0
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb2:	f001 fa10 	bl	80030d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <HAL_InitTick+0x70>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	e007      	b.n	8001cce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
 8001cc2:	e004      	b.n	8001cce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
 8001cc8:	e001      	b.n	8001cce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000010 	.word	0x20000010
 8001cdc:	20000008 	.word	0x20000008
 8001ce0:	2000000c 	.word	0x2000000c

08001ce4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ce8:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <HAL_IncTick+0x1c>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <HAL_IncTick+0x20>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	4a03      	ldr	r2, [pc, #12]	@ (8001d00 <HAL_IncTick+0x1c>)
 8001cf4:	6013      	str	r3, [r2, #0]
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	200002e8 	.word	0x200002e8
 8001d04:	20000010 	.word	0x20000010

08001d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d0c:	4b03      	ldr	r3, [pc, #12]	@ (8001d1c <HAL_GetTick+0x14>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	200002e8 	.word	0x200002e8

08001d20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	609a      	str	r2, [r3, #8]
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3360      	adds	r3, #96	@ 0x60
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <LL_ADC_SetOffset+0x44>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	4313      	orrs	r3, r2
 8001db8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001dc0:	bf00      	nop
 8001dc2:	371c      	adds	r7, #28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	03fff000 	.word	0x03fff000

08001dd0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3360      	adds	r3, #96	@ 0x60
 8001dde:	461a      	mov	r2, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3360      	adds	r3, #96	@ 0x60
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	431a      	orrs	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e26:	bf00      	nop
 8001e28:	371c      	adds	r7, #28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b087      	sub	sp, #28
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	3360      	adds	r3, #96	@ 0x60
 8001e42:	461a      	mov	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	431a      	orrs	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001e5c:	bf00      	nop
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	3360      	adds	r3, #96	@ 0x60
 8001e78:	461a      	mov	r2, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001e92:	bf00      	nop
 8001e94:	371c      	adds	r7, #28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	615a      	str	r2, [r3, #20]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3330      	adds	r3, #48	@ 0x30
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	f003 030c 	and.w	r3, r3, #12
 8001ee0:	4413      	add	r3, r2
 8001ee2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	211f      	movs	r1, #31
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	0e9b      	lsrs	r3, r3, #26
 8001efc:	f003 011f 	and.w	r1, r3, #31
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f003 031f 	and.w	r3, r3, #31
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f10:	bf00      	nop
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3314      	adds	r3, #20
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	0e5b      	lsrs	r3, r3, #25
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	4413      	add	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	0d1b      	lsrs	r3, r3, #20
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	2107      	movs	r1, #7
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	401a      	ands	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	0d1b      	lsrs	r3, r3, #20
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	431a      	orrs	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f66:	bf00      	nop
 8001f68:	371c      	adds	r7, #28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	401a      	ands	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0318 	and.w	r3, r3, #24
 8001f96:	4908      	ldr	r1, [pc, #32]	@ (8001fb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f98:	40d9      	lsrs	r1, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	400b      	ands	r3, r1
 8001f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	0007ffff 	.word	0x0007ffff

08001fbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001fcc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6093      	str	r3, [r2, #8]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ff0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ff4:	d101      	bne.n	8001ffa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002018:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800201c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002040:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002044:	d101      	bne.n	800204a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <LL_ADC_IsEnabled+0x18>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <LL_ADC_IsEnabled+0x1a>
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b04      	cmp	r3, #4
 8002090:	d101      	bne.n	8002096 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d101      	bne.n	80020bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b089      	sub	sp, #36	@ 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e1a9      	b.n	800243a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d109      	bne.n	8002108 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff fb5d 	bl	80017b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff67 	bl	8001fe0 <LL_ADC_IsDeepPowerDownEnabled>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d004      	beq.n	8002122 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff4d 	bl	8001fbc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ff82 	bl	8002030 <LL_ADC_IsInternalRegulatorEnabled>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d115      	bne.n	800215e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ff66 	bl	8002008 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800213c:	4b9c      	ldr	r3, [pc, #624]	@ (80023b0 <HAL_ADC_Init+0x2e4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	099b      	lsrs	r3, r3, #6
 8002142:	4a9c      	ldr	r2, [pc, #624]	@ (80023b4 <HAL_ADC_Init+0x2e8>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	099b      	lsrs	r3, r3, #6
 800214a:	3301      	adds	r3, #1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002150:	e002      	b.n	8002158 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3b01      	subs	r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f9      	bne.n	8002152 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff ff64 	bl	8002030 <LL_ADC_IsInternalRegulatorEnabled>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10d      	bne.n	800218a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002172:	f043 0210 	orr.w	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217e:	f043 0201 	orr.w	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ff75 	bl	800207e <LL_ADC_REG_IsConversionOngoing>
 8002194:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f040 8142 	bne.w	8002428 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 813e 	bne.w	8002428 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021b4:	f043 0202 	orr.w	r2, r3, #2
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff49 	bl	8002058 <LL_ADC_IsEnabled>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d141      	bne.n	8002250 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021d4:	d004      	beq.n	80021e0 <HAL_ADC_Init+0x114>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a77      	ldr	r2, [pc, #476]	@ (80023b8 <HAL_ADC_Init+0x2ec>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d10f      	bne.n	8002200 <HAL_ADC_Init+0x134>
 80021e0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80021e4:	f7ff ff38 	bl	8002058 <LL_ADC_IsEnabled>
 80021e8:	4604      	mov	r4, r0
 80021ea:	4873      	ldr	r0, [pc, #460]	@ (80023b8 <HAL_ADC_Init+0x2ec>)
 80021ec:	f7ff ff34 	bl	8002058 <LL_ADC_IsEnabled>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4323      	orrs	r3, r4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bf0c      	ite	eq
 80021f8:	2301      	moveq	r3, #1
 80021fa:	2300      	movne	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	e012      	b.n	8002226 <HAL_ADC_Init+0x15a>
 8002200:	486e      	ldr	r0, [pc, #440]	@ (80023bc <HAL_ADC_Init+0x2f0>)
 8002202:	f7ff ff29 	bl	8002058 <LL_ADC_IsEnabled>
 8002206:	4604      	mov	r4, r0
 8002208:	486d      	ldr	r0, [pc, #436]	@ (80023c0 <HAL_ADC_Init+0x2f4>)
 800220a:	f7ff ff25 	bl	8002058 <LL_ADC_IsEnabled>
 800220e:	4603      	mov	r3, r0
 8002210:	431c      	orrs	r4, r3
 8002212:	486c      	ldr	r0, [pc, #432]	@ (80023c4 <HAL_ADC_Init+0x2f8>)
 8002214:	f7ff ff20 	bl	8002058 <LL_ADC_IsEnabled>
 8002218:	4603      	mov	r3, r0
 800221a:	4323      	orrs	r3, r4
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d012      	beq.n	8002250 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002232:	d004      	beq.n	800223e <HAL_ADC_Init+0x172>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a5f      	ldr	r2, [pc, #380]	@ (80023b8 <HAL_ADC_Init+0x2ec>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d101      	bne.n	8002242 <HAL_ADC_Init+0x176>
 800223e:	4a62      	ldr	r2, [pc, #392]	@ (80023c8 <HAL_ADC_Init+0x2fc>)
 8002240:	e000      	b.n	8002244 <HAL_ADC_Init+0x178>
 8002242:	4a62      	ldr	r2, [pc, #392]	@ (80023cc <HAL_ADC_Init+0x300>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f7ff fd68 	bl	8001d20 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7f5b      	ldrb	r3, [r3, #29]
 8002254:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800225a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002260:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002266:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800226e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800227a:	2b01      	cmp	r3, #1
 800227c:	d106      	bne.n	800228c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002282:	3b01      	subs	r3, #1
 8002284:	045b      	lsls	r3, r3, #17
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d009      	beq.n	80022a8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002298:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	4b48      	ldr	r3, [pc, #288]	@ (80023d0 <HAL_ADC_Init+0x304>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	69b9      	ldr	r1, [r7, #24]
 80022b8:	430b      	orrs	r3, r1
 80022ba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fee4 	bl	80020a4 <LL_ADC_INJ_IsConversionOngoing>
 80022dc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d17f      	bne.n	80023e4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d17c      	bne.n	80023e4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022ee:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022f6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002306:	f023 0302 	bic.w	r3, r3, #2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	69b9      	ldr	r1, [r7, #24]
 8002310:	430b      	orrs	r3, r1
 8002312:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d017      	beq.n	800234c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800232a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002334:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002338:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6911      	ldr	r1, [r2, #16]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	430b      	orrs	r3, r1
 8002346:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800234a:	e013      	b.n	8002374 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800235a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800236c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002370:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800237a:	2b01      	cmp	r3, #1
 800237c:	d12a      	bne.n	80023d4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002388:	f023 0304 	bic.w	r3, r3, #4
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002394:	4311      	orrs	r1, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800239a:	4311      	orrs	r1, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023a0:	430a      	orrs	r2, r1
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0201 	orr.w	r2, r2, #1
 80023ac:	611a      	str	r2, [r3, #16]
 80023ae:	e019      	b.n	80023e4 <HAL_ADC_Init+0x318>
 80023b0:	20000008 	.word	0x20000008
 80023b4:	053e2d63 	.word	0x053e2d63
 80023b8:	50000100 	.word	0x50000100
 80023bc:	50000400 	.word	0x50000400
 80023c0:	50000500 	.word	0x50000500
 80023c4:	50000600 	.word	0x50000600
 80023c8:	50000300 	.word	0x50000300
 80023cc:	50000700 	.word	0x50000700
 80023d0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d10c      	bne.n	8002406 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	f023 010f 	bic.w	r1, r3, #15
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	1e5a      	subs	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	631a      	str	r2, [r3, #48]	@ 0x30
 8002404:	e007      	b.n	8002416 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 020f 	bic.w	r2, r2, #15
 8002414:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241a:	f023 0303 	bic.w	r3, r3, #3
 800241e:	f043 0201 	orr.w	r2, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002426:	e007      	b.n	8002438 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242c:	f043 0210 	orr.w	r2, r3, #16
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002438:	7ffb      	ldrb	r3, [r7, #31]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3724      	adds	r7, #36	@ 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd90      	pop	{r4, r7, pc}
 8002442:	bf00      	nop

08002444 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b0b6      	sub	sp, #216	@ 0xd8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800245e:	2b01      	cmp	r3, #1
 8002460:	d102      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x24>
 8002462:	2302      	movs	r3, #2
 8002464:	f000 bc13 	b.w	8002c8e <HAL_ADC_ConfigChannel+0x84a>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fe02 	bl	800207e <LL_ADC_REG_IsConversionOngoing>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	f040 83f3 	bne.w	8002c68 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6859      	ldr	r1, [r3, #4]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	f7ff fd18 	bl	8001ec4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fdf0 	bl	800207e <LL_ADC_REG_IsConversionOngoing>
 800249e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fdfc 	bl	80020a4 <LL_ADC_INJ_IsConversionOngoing>
 80024ac:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 81d9 	bne.w	800286c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 81d4 	bne.w	800286c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80024cc:	d10f      	bne.n	80024ee <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2200      	movs	r2, #0
 80024d8:	4619      	mov	r1, r3
 80024da:	f7ff fd1f 	bl	8001f1c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fcd9 	bl	8001e9e <LL_ADC_SetSamplingTimeCommonConfig>
 80024ec:	e00e      	b.n	800250c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	6819      	ldr	r1, [r3, #0]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	461a      	mov	r2, r3
 80024fc:	f7ff fd0e 	bl	8001f1c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fcc9 	bl	8001e9e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	695a      	ldr	r2, [r3, #20]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	08db      	lsrs	r3, r3, #3
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	2b04      	cmp	r3, #4
 800252c:	d022      	beq.n	8002574 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6919      	ldr	r1, [r3, #16]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800253e:	f7ff fc23 	bl	8001d88 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6919      	ldr	r1, [r3, #16]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	461a      	mov	r2, r3
 8002550:	f7ff fc6f 	bl	8001e32 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002560:	2b01      	cmp	r3, #1
 8002562:	d102      	bne.n	800256a <HAL_ADC_ConfigChannel+0x126>
 8002564:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002568:	e000      	b.n	800256c <HAL_ADC_ConfigChannel+0x128>
 800256a:	2300      	movs	r3, #0
 800256c:	461a      	mov	r2, r3
 800256e:	f7ff fc7b 	bl	8001e68 <LL_ADC_SetOffsetSaturation>
 8002572:	e17b      	b.n	800286c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fc28 	bl	8001dd0 <LL_ADC_GetOffsetChannel>
 8002580:	4603      	mov	r3, r0
 8002582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10a      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x15c>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2100      	movs	r1, #0
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fc1d 	bl	8001dd0 <LL_ADC_GetOffsetChannel>
 8002596:	4603      	mov	r3, r0
 8002598:	0e9b      	lsrs	r3, r3, #26
 800259a:	f003 021f 	and.w	r2, r3, #31
 800259e:	e01e      	b.n	80025de <HAL_ADC_ConfigChannel+0x19a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fc12 	bl	8001dd0 <LL_ADC_GetOffsetChannel>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80025ce:	2320      	movs	r3, #32
 80025d0:	e004      	b.n	80025dc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80025d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d105      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x1b2>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	0e9b      	lsrs	r3, r3, #26
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	e018      	b.n	8002628 <HAL_ADC_ConfigChannel+0x1e4>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800260a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800260e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002612:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800261a:	2320      	movs	r3, #32
 800261c:	e004      	b.n	8002628 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800261e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002628:	429a      	cmp	r2, r3
 800262a:	d106      	bne.n	800263a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2200      	movs	r2, #0
 8002632:	2100      	movs	r1, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fbe1 	bl	8001dfc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2101      	movs	r1, #1
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fbc5 	bl	8001dd0 <LL_ADC_GetOffsetChannel>
 8002646:	4603      	mov	r3, r0
 8002648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10a      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x222>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2101      	movs	r1, #1
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fbba 	bl	8001dd0 <LL_ADC_GetOffsetChannel>
 800265c:	4603      	mov	r3, r0
 800265e:	0e9b      	lsrs	r3, r3, #26
 8002660:	f003 021f 	and.w	r2, r3, #31
 8002664:	e01e      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x260>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2101      	movs	r1, #1
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fbaf 	bl	8001dd0 <LL_ADC_GetOffsetChannel>
 8002672:	4603      	mov	r3, r0
 8002674:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002684:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002688:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800268c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002694:	2320      	movs	r3, #32
 8002696:	e004      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002698:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d105      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x278>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0e9b      	lsrs	r3, r3, #26
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	e018      	b.n	80026ee <HAL_ADC_ConfigChannel+0x2aa>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80026d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80026d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80026e0:	2320      	movs	r3, #32
 80026e2:	e004      	b.n	80026ee <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80026e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026e8:	fab3 f383 	clz	r3, r3
 80026ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d106      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2200      	movs	r2, #0
 80026f8:	2101      	movs	r1, #1
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fb7e 	bl	8001dfc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2102      	movs	r1, #2
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fb62 	bl	8001dd0 <LL_ADC_GetOffsetChannel>
 800270c:	4603      	mov	r3, r0
 800270e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10a      	bne.n	800272c <HAL_ADC_ConfigChannel+0x2e8>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2102      	movs	r1, #2
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fb57 	bl	8001dd0 <LL_ADC_GetOffsetChannel>
 8002722:	4603      	mov	r3, r0
 8002724:	0e9b      	lsrs	r3, r3, #26
 8002726:	f003 021f 	and.w	r2, r3, #31
 800272a:	e01e      	b.n	800276a <HAL_ADC_ConfigChannel+0x326>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2102      	movs	r1, #2
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fb4c 	bl	8001dd0 <LL_ADC_GetOffsetChannel>
 8002738:	4603      	mov	r3, r0
 800273a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800274a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800274e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002752:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800275a:	2320      	movs	r3, #32
 800275c:	e004      	b.n	8002768 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800275e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002772:	2b00      	cmp	r3, #0
 8002774:	d105      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x33e>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	0e9b      	lsrs	r3, r3, #26
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	e016      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x36c>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002794:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002796:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800279a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80027a2:	2320      	movs	r3, #32
 80027a4:	e004      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80027a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d106      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2200      	movs	r2, #0
 80027ba:	2102      	movs	r1, #2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fb1d 	bl	8001dfc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2103      	movs	r1, #3
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fb01 	bl	8001dd0 <LL_ADC_GetOffsetChannel>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x3aa>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2103      	movs	r1, #3
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff faf6 	bl	8001dd0 <LL_ADC_GetOffsetChannel>
 80027e4:	4603      	mov	r3, r0
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	f003 021f 	and.w	r2, r3, #31
 80027ec:	e017      	b.n	800281e <HAL_ADC_ConfigChannel+0x3da>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2103      	movs	r1, #3
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff faeb 	bl	8001dd0 <LL_ADC_GetOffsetChannel>
 80027fa:	4603      	mov	r3, r0
 80027fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002806:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002808:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800280a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002810:	2320      	movs	r3, #32
 8002812:	e003      	b.n	800281c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002814:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002816:	fab3 f383 	clz	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002826:	2b00      	cmp	r3, #0
 8002828:	d105      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x3f2>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	0e9b      	lsrs	r3, r3, #26
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	e011      	b.n	800285a <HAL_ADC_ConfigChannel+0x416>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002844:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002846:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002848:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800284e:	2320      	movs	r3, #32
 8002850:	e003      	b.n	800285a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002852:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800285a:	429a      	cmp	r2, r3
 800285c:	d106      	bne.n	800286c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	2103      	movs	r1, #3
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fac8 	bl	8001dfc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fbf1 	bl	8002058 <LL_ADC_IsEnabled>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	f040 813d 	bne.w	8002af8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6819      	ldr	r1, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	461a      	mov	r2, r3
 800288c:	f7ff fb72 	bl	8001f74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4aa2      	ldr	r2, [pc, #648]	@ (8002b20 <HAL_ADC_ConfigChannel+0x6dc>)
 8002896:	4293      	cmp	r3, r2
 8002898:	f040 812e 	bne.w	8002af8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10b      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x480>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	0e9b      	lsrs	r3, r3, #26
 80028b2:	3301      	adds	r3, #1
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	2b09      	cmp	r3, #9
 80028ba:	bf94      	ite	ls
 80028bc:	2301      	movls	r3, #1
 80028be:	2300      	movhi	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	e019      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x4b4>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80028d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028d4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80028d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80028dc:	2320      	movs	r3, #32
 80028de:	e003      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80028e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	3301      	adds	r3, #1
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	2b09      	cmp	r3, #9
 80028f0:	bf94      	ite	ls
 80028f2:	2301      	movls	r3, #1
 80028f4:	2300      	movhi	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d079      	beq.n	80029f0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002904:	2b00      	cmp	r3, #0
 8002906:	d107      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x4d4>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	0e9b      	lsrs	r3, r3, #26
 800290e:	3301      	adds	r3, #1
 8002910:	069b      	lsls	r3, r3, #26
 8002912:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002916:	e015      	b.n	8002944 <HAL_ADC_ConfigChannel+0x500>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002920:	fa93 f3a3 	rbit	r3, r3
 8002924:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002928:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800292a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002930:	2320      	movs	r3, #32
 8002932:	e003      	b.n	800293c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	3301      	adds	r3, #1
 800293e:	069b      	lsls	r3, r3, #26
 8002940:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294c:	2b00      	cmp	r3, #0
 800294e:	d109      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x520>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	0e9b      	lsrs	r3, r3, #26
 8002956:	3301      	adds	r3, #1
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	2101      	movs	r1, #1
 800295e:	fa01 f303 	lsl.w	r3, r1, r3
 8002962:	e017      	b.n	8002994 <HAL_ADC_ConfigChannel+0x550>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002974:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002976:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800297c:	2320      	movs	r3, #32
 800297e:	e003      	b.n	8002988 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002980:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002982:	fab3 f383 	clz	r3, r3
 8002986:	b2db      	uxtb	r3, r3
 8002988:	3301      	adds	r3, #1
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	2101      	movs	r1, #1
 8002990:	fa01 f303 	lsl.w	r3, r1, r3
 8002994:	ea42 0103 	orr.w	r1, r2, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10a      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x576>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	0e9b      	lsrs	r3, r3, #26
 80029aa:	3301      	adds	r3, #1
 80029ac:	f003 021f 	and.w	r2, r3, #31
 80029b0:	4613      	mov	r3, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4413      	add	r3, r2
 80029b6:	051b      	lsls	r3, r3, #20
 80029b8:	e018      	b.n	80029ec <HAL_ADC_ConfigChannel+0x5a8>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80029c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80029cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80029d2:	2320      	movs	r3, #32
 80029d4:	e003      	b.n	80029de <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80029d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	3301      	adds	r3, #1
 80029e0:	f003 021f 	and.w	r2, r3, #31
 80029e4:	4613      	mov	r3, r2
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4413      	add	r3, r2
 80029ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029ec:	430b      	orrs	r3, r1
 80029ee:	e07e      	b.n	8002aee <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d107      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x5c8>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	0e9b      	lsrs	r3, r3, #26
 8002a02:	3301      	adds	r3, #1
 8002a04:	069b      	lsls	r3, r3, #26
 8002a06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a0a:	e015      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x5f4>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002a24:	2320      	movs	r3, #32
 8002a26:	e003      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	3301      	adds	r3, #1
 8002a32:	069b      	lsls	r3, r3, #26
 8002a34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d109      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x614>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	0e9b      	lsrs	r3, r3, #26
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	2101      	movs	r1, #1
 8002a52:	fa01 f303 	lsl.w	r3, r1, r3
 8002a56:	e017      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x644>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	61fb      	str	r3, [r7, #28]
  return result;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002a70:	2320      	movs	r3, #32
 8002a72:	e003      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	2101      	movs	r1, #1
 8002a84:	fa01 f303 	lsl.w	r3, r1, r3
 8002a88:	ea42 0103 	orr.w	r1, r2, r3
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10d      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x670>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	0e9b      	lsrs	r3, r3, #26
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f003 021f 	and.w	r2, r3, #31
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3b1e      	subs	r3, #30
 8002aac:	051b      	lsls	r3, r3, #20
 8002aae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ab2:	e01b      	b.n	8002aec <HAL_ADC_ConfigChannel+0x6a8>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	613b      	str	r3, [r7, #16]
  return result;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002acc:	2320      	movs	r3, #32
 8002ace:	e003      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f003 021f 	and.w	r2, r3, #31
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3b1e      	subs	r3, #30
 8002ae6:	051b      	lsls	r3, r3, #20
 8002ae8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002af2:	4619      	mov	r1, r3
 8002af4:	f7ff fa12 	bl	8001f1c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b09      	ldr	r3, [pc, #36]	@ (8002b24 <HAL_ADC_ConfigChannel+0x6e0>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80be 	beq.w	8002c82 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b0e:	d004      	beq.n	8002b1a <HAL_ADC_ConfigChannel+0x6d6>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a04      	ldr	r2, [pc, #16]	@ (8002b28 <HAL_ADC_ConfigChannel+0x6e4>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d10a      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x6ec>
 8002b1a:	4b04      	ldr	r3, [pc, #16]	@ (8002b2c <HAL_ADC_ConfigChannel+0x6e8>)
 8002b1c:	e009      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x6ee>
 8002b1e:	bf00      	nop
 8002b20:	407f0000 	.word	0x407f0000
 8002b24:	80080000 	.word	0x80080000
 8002b28:	50000100 	.word	0x50000100
 8002b2c:	50000300 	.word	0x50000300
 8002b30:	4b59      	ldr	r3, [pc, #356]	@ (8002c98 <HAL_ADC_ConfigChannel+0x854>)
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff f91a 	bl	8001d6c <LL_ADC_GetCommonPathInternalCh>
 8002b38:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a56      	ldr	r2, [pc, #344]	@ (8002c9c <HAL_ADC_ConfigChannel+0x858>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d004      	beq.n	8002b50 <HAL_ADC_ConfigChannel+0x70c>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a55      	ldr	r2, [pc, #340]	@ (8002ca0 <HAL_ADC_ConfigChannel+0x85c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d13a      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d134      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b64:	d005      	beq.n	8002b72 <HAL_ADC_ConfigChannel+0x72e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a4e      	ldr	r2, [pc, #312]	@ (8002ca4 <HAL_ADC_ConfigChannel+0x860>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	f040 8085 	bne.w	8002c7c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b7a:	d004      	beq.n	8002b86 <HAL_ADC_ConfigChannel+0x742>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a49      	ldr	r2, [pc, #292]	@ (8002ca8 <HAL_ADC_ConfigChannel+0x864>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x746>
 8002b86:	4a49      	ldr	r2, [pc, #292]	@ (8002cac <HAL_ADC_ConfigChannel+0x868>)
 8002b88:	e000      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x748>
 8002b8a:	4a43      	ldr	r2, [pc, #268]	@ (8002c98 <HAL_ADC_ConfigChannel+0x854>)
 8002b8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b94:	4619      	mov	r1, r3
 8002b96:	4610      	mov	r0, r2
 8002b98:	f7ff f8d5 	bl	8001d46 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b9c:	4b44      	ldr	r3, [pc, #272]	@ (8002cb0 <HAL_ADC_ConfigChannel+0x86c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	099b      	lsrs	r3, r3, #6
 8002ba2:	4a44      	ldr	r2, [pc, #272]	@ (8002cb4 <HAL_ADC_ConfigChannel+0x870>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	099b      	lsrs	r3, r3, #6
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bb6:	e002      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f9      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bc4:	e05a      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a3b      	ldr	r2, [pc, #236]	@ (8002cb8 <HAL_ADC_ConfigChannel+0x874>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d125      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d11f      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a31      	ldr	r2, [pc, #196]	@ (8002ca8 <HAL_ADC_ConfigChannel+0x864>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d104      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x7ac>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a34      	ldr	r2, [pc, #208]	@ (8002cbc <HAL_ADC_ConfigChannel+0x878>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d047      	beq.n	8002c80 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bf8:	d004      	beq.n	8002c04 <HAL_ADC_ConfigChannel+0x7c0>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca8 <HAL_ADC_ConfigChannel+0x864>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d101      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x7c4>
 8002c04:	4a29      	ldr	r2, [pc, #164]	@ (8002cac <HAL_ADC_ConfigChannel+0x868>)
 8002c06:	e000      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x7c6>
 8002c08:	4a23      	ldr	r2, [pc, #140]	@ (8002c98 <HAL_ADC_ConfigChannel+0x854>)
 8002c0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c12:	4619      	mov	r1, r3
 8002c14:	4610      	mov	r0, r2
 8002c16:	f7ff f896 	bl	8001d46 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c1a:	e031      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a27      	ldr	r2, [pc, #156]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x87c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d12d      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d127      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca8 <HAL_ADC_ConfigChannel+0x864>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d022      	beq.n	8002c82 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c44:	d004      	beq.n	8002c50 <HAL_ADC_ConfigChannel+0x80c>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a17      	ldr	r2, [pc, #92]	@ (8002ca8 <HAL_ADC_ConfigChannel+0x864>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d101      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x810>
 8002c50:	4a16      	ldr	r2, [pc, #88]	@ (8002cac <HAL_ADC_ConfigChannel+0x868>)
 8002c52:	e000      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x812>
 8002c54:	4a10      	ldr	r2, [pc, #64]	@ (8002c98 <HAL_ADC_ConfigChannel+0x854>)
 8002c56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4610      	mov	r0, r2
 8002c62:	f7ff f870 	bl	8001d46 <LL_ADC_SetCommonPathInternalCh>
 8002c66:	e00c      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6c:	f043 0220 	orr.w	r2, r3, #32
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002c7a:	e002      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c7c:	bf00      	nop
 8002c7e:	e000      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c8a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	37d8      	adds	r7, #216	@ 0xd8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	50000700 	.word	0x50000700
 8002c9c:	c3210000 	.word	0xc3210000
 8002ca0:	90c00010 	.word	0x90c00010
 8002ca4:	50000600 	.word	0x50000600
 8002ca8:	50000100 	.word	0x50000100
 8002cac:	50000300 	.word	0x50000300
 8002cb0:	20000008 	.word	0x20000008
 8002cb4:	053e2d63 	.word	0x053e2d63
 8002cb8:	c7520000 	.word	0xc7520000
 8002cbc:	50000500 	.word	0x50000500
 8002cc0:	cb840000 	.word	0xcb840000

08002cc4 <LL_ADC_IsEnabled>:
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <LL_ADC_IsEnabled+0x18>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <LL_ADC_IsEnabled+0x1a>
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <LL_ADC_REG_IsConversionOngoing>:
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d101      	bne.n	8002d02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002d10:	b590      	push	{r4, r7, lr}
 8002d12:	b0a1      	sub	sp, #132	@ 0x84
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e0e7      	b.n	8002efe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002d36:	2300      	movs	r3, #0
 8002d38:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d46:	d102      	bne.n	8002d4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d48:	4b6f      	ldr	r3, [pc, #444]	@ (8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	e009      	b.n	8002d62 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a6e      	ldr	r2, [pc, #440]	@ (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d102      	bne.n	8002d5e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002d58:	4b6d      	ldr	r3, [pc, #436]	@ (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	e001      	b.n	8002d62 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10b      	bne.n	8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6c:	f043 0220 	orr.w	r2, r3, #32
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0be      	b.n	8002efe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff ffb1 	bl	8002cea <LL_ADC_REG_IsConversionOngoing>
 8002d88:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff ffab 	bl	8002cea <LL_ADC_REG_IsConversionOngoing>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f040 80a0 	bne.w	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002d9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f040 809c 	bne.w	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dac:	d004      	beq.n	8002db8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a55      	ldr	r2, [pc, #340]	@ (8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d101      	bne.n	8002dbc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002db8:	4b56      	ldr	r3, [pc, #344]	@ (8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002dba:	e000      	b.n	8002dbe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002dbc:	4b56      	ldr	r3, [pc, #344]	@ (8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002dbe:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d04b      	beq.n	8002e60 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002dc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	6859      	ldr	r1, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002dda:	035b      	lsls	r3, r3, #13
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	431a      	orrs	r2, r3
 8002de0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002de2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dec:	d004      	beq.n	8002df8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a45      	ldr	r2, [pc, #276]	@ (8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d10f      	bne.n	8002e18 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002df8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002dfc:	f7ff ff62 	bl	8002cc4 <LL_ADC_IsEnabled>
 8002e00:	4604      	mov	r4, r0
 8002e02:	4841      	ldr	r0, [pc, #260]	@ (8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e04:	f7ff ff5e 	bl	8002cc4 <LL_ADC_IsEnabled>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	4323      	orrs	r3, r4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e012      	b.n	8002e3e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002e18:	483c      	ldr	r0, [pc, #240]	@ (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002e1a:	f7ff ff53 	bl	8002cc4 <LL_ADC_IsEnabled>
 8002e1e:	4604      	mov	r4, r0
 8002e20:	483b      	ldr	r0, [pc, #236]	@ (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002e22:	f7ff ff4f 	bl	8002cc4 <LL_ADC_IsEnabled>
 8002e26:	4603      	mov	r3, r0
 8002e28:	431c      	orrs	r4, r3
 8002e2a:	483c      	ldr	r0, [pc, #240]	@ (8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002e2c:	f7ff ff4a 	bl	8002cc4 <LL_ADC_IsEnabled>
 8002e30:	4603      	mov	r3, r0
 8002e32:	4323      	orrs	r3, r4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d056      	beq.n	8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e4a:	f023 030f 	bic.w	r3, r3, #15
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	6811      	ldr	r1, [r2, #0]
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	6892      	ldr	r2, [r2, #8]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e5c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e5e:	e047      	b.n	8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e6a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e74:	d004      	beq.n	8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a23      	ldr	r2, [pc, #140]	@ (8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d10f      	bne.n	8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002e80:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002e84:	f7ff ff1e 	bl	8002cc4 <LL_ADC_IsEnabled>
 8002e88:	4604      	mov	r4, r0
 8002e8a:	481f      	ldr	r0, [pc, #124]	@ (8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e8c:	f7ff ff1a 	bl	8002cc4 <LL_ADC_IsEnabled>
 8002e90:	4603      	mov	r3, r0
 8002e92:	4323      	orrs	r3, r4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	e012      	b.n	8002ec6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002ea0:	481a      	ldr	r0, [pc, #104]	@ (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ea2:	f7ff ff0f 	bl	8002cc4 <LL_ADC_IsEnabled>
 8002ea6:	4604      	mov	r4, r0
 8002ea8:	4819      	ldr	r0, [pc, #100]	@ (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002eaa:	f7ff ff0b 	bl	8002cc4 <LL_ADC_IsEnabled>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	431c      	orrs	r4, r3
 8002eb2:	481a      	ldr	r0, [pc, #104]	@ (8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002eb4:	f7ff ff06 	bl	8002cc4 <LL_ADC_IsEnabled>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	4323      	orrs	r3, r4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d012      	beq.n	8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002eca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002ed2:	f023 030f 	bic.w	r3, r3, #15
 8002ed6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002ed8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002eda:	e009      	b.n	8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee0:	f043 0220 	orr.w	r2, r3, #32
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002eee:	e000      	b.n	8002ef2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ef0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002efa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3784      	adds	r7, #132	@ 0x84
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd90      	pop	{r4, r7, pc}
 8002f06:	bf00      	nop
 8002f08:	50000100 	.word	0x50000100
 8002f0c:	50000400 	.word	0x50000400
 8002f10:	50000500 	.word	0x50000500
 8002f14:	50000300 	.word	0x50000300
 8002f18:	50000700 	.word	0x50000700
 8002f1c:	50000600 	.word	0x50000600

08002f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f30:	4b0c      	ldr	r3, [pc, #48]	@ (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f52:	4a04      	ldr	r2, [pc, #16]	@ (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	60d3      	str	r3, [r2, #12]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f6c:	4b04      	ldr	r3, [pc, #16]	@ (8002f80 <__NVIC_GetPriorityGrouping+0x18>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	0a1b      	lsrs	r3, r3, #8
 8002f72:	f003 0307 	and.w	r3, r3, #7
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	db0b      	blt.n	8002fae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	f003 021f 	and.w	r2, r3, #31
 8002f9c:	4907      	ldr	r1, [pc, #28]	@ (8002fbc <__NVIC_EnableIRQ+0x38>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8002faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	e000e100 	.word	0xe000e100

08002fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	6039      	str	r1, [r7, #0]
 8002fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	db0a      	blt.n	8002fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	490c      	ldr	r1, [pc, #48]	@ (800300c <__NVIC_SetPriority+0x4c>)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	0112      	lsls	r2, r2, #4
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fe8:	e00a      	b.n	8003000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	4908      	ldr	r1, [pc, #32]	@ (8003010 <__NVIC_SetPriority+0x50>)
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	3b04      	subs	r3, #4
 8002ff8:	0112      	lsls	r2, r2, #4
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	761a      	strb	r2, [r3, #24]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000e100 	.word	0xe000e100
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	@ 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f1c3 0307 	rsb	r3, r3, #7
 800302e:	2b04      	cmp	r3, #4
 8003030:	bf28      	it	cs
 8003032:	2304      	movcs	r3, #4
 8003034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3304      	adds	r3, #4
 800303a:	2b06      	cmp	r3, #6
 800303c:	d902      	bls.n	8003044 <NVIC_EncodePriority+0x30>
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3b03      	subs	r3, #3
 8003042:	e000      	b.n	8003046 <NVIC_EncodePriority+0x32>
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003048:	f04f 32ff 	mov.w	r2, #4294967295
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43da      	mvns	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	401a      	ands	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800305c:	f04f 31ff 	mov.w	r1, #4294967295
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	fa01 f303 	lsl.w	r3, r1, r3
 8003066:	43d9      	mvns	r1, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800306c:	4313      	orrs	r3, r2
         );
}
 800306e:	4618      	mov	r0, r3
 8003070:	3724      	adds	r7, #36	@ 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3b01      	subs	r3, #1
 8003088:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800308c:	d301      	bcc.n	8003092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800308e:	2301      	movs	r3, #1
 8003090:	e00f      	b.n	80030b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003092:	4a0a      	ldr	r2, [pc, #40]	@ (80030bc <SysTick_Config+0x40>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3b01      	subs	r3, #1
 8003098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800309a:	210f      	movs	r1, #15
 800309c:	f04f 30ff 	mov.w	r0, #4294967295
 80030a0:	f7ff ff8e 	bl	8002fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030a4:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <SysTick_Config+0x40>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030aa:	4b04      	ldr	r3, [pc, #16]	@ (80030bc <SysTick_Config+0x40>)
 80030ac:	2207      	movs	r2, #7
 80030ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	e000e010 	.word	0xe000e010

080030c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff ff29 	bl	8002f20 <__NVIC_SetPriorityGrouping>
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
 80030dc:	4603      	mov	r3, r0
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030e4:	f7ff ff40 	bl	8002f68 <__NVIC_GetPriorityGrouping>
 80030e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	6978      	ldr	r0, [r7, #20]
 80030f0:	f7ff ff90 	bl	8003014 <NVIC_EncodePriority>
 80030f4:	4602      	mov	r2, r0
 80030f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff ff5f 	bl	8002fc0 <__NVIC_SetPriority>
}
 8003102:	bf00      	nop
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	4603      	mov	r3, r0
 8003112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff ff33 	bl	8002f84 <__NVIC_EnableIRQ>
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff ffa4 	bl	800307c <SysTick_Config>
 8003134:	4603      	mov	r3, r0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e08d      	b.n	800326e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	4b47      	ldr	r3, [pc, #284]	@ (8003278 <HAL_DMA_Init+0x138>)
 800315a:	429a      	cmp	r2, r3
 800315c:	d80f      	bhi.n	800317e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	4b45      	ldr	r3, [pc, #276]	@ (800327c <HAL_DMA_Init+0x13c>)
 8003166:	4413      	add	r3, r2
 8003168:	4a45      	ldr	r2, [pc, #276]	@ (8003280 <HAL_DMA_Init+0x140>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	091b      	lsrs	r3, r3, #4
 8003170:	009a      	lsls	r2, r3, #2
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a42      	ldr	r2, [pc, #264]	@ (8003284 <HAL_DMA_Init+0x144>)
 800317a:	641a      	str	r2, [r3, #64]	@ 0x40
 800317c:	e00e      	b.n	800319c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	4b40      	ldr	r3, [pc, #256]	@ (8003288 <HAL_DMA_Init+0x148>)
 8003186:	4413      	add	r3, r2
 8003188:	4a3d      	ldr	r2, [pc, #244]	@ (8003280 <HAL_DMA_Init+0x140>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	091b      	lsrs	r3, r3, #4
 8003190:	009a      	lsls	r2, r3, #2
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a3c      	ldr	r2, [pc, #240]	@ (800328c <HAL_DMA_Init+0x14c>)
 800319a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80031b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80031c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f8fe 	bl	80033f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031fc:	d102      	bne.n	8003204 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003218:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d010      	beq.n	8003244 <HAL_DMA_Init+0x104>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b04      	cmp	r3, #4
 8003228:	d80c      	bhi.n	8003244 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f91e 	bl	800346c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	e008      	b.n	8003256 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40020407 	.word	0x40020407
 800327c:	bffdfff8 	.word	0xbffdfff8
 8003280:	cccccccd 	.word	0xcccccccd
 8003284:	40020000 	.word	0x40020000
 8003288:	bffdfbf8 	.word	0xbffdfbf8
 800328c:	40020400 	.word	0x40020400

08003290 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	2204      	movs	r2, #4
 80032b2:	409a      	lsls	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d026      	beq.n	800330a <HAL_DMA_IRQHandler+0x7a>
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d021      	beq.n	800330a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d107      	bne.n	80032e4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0204 	bic.w	r2, r2, #4
 80032e2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e8:	f003 021f 	and.w	r2, r3, #31
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f0:	2104      	movs	r1, #4
 80032f2:	fa01 f202 	lsl.w	r2, r1, r2
 80032f6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d071      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003308:	e06c      	b.n	80033e4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2202      	movs	r2, #2
 8003314:	409a      	lsls	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4013      	ands	r3, r2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d02e      	beq.n	800337c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d029      	beq.n	800337c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10b      	bne.n	800334e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 020a 	bic.w	r2, r2, #10
 8003344:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003352:	f003 021f 	and.w	r2, r3, #31
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	2102      	movs	r1, #2
 800335c:	fa01 f202 	lsl.w	r2, r1, r2
 8003360:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d038      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800337a:	e033      	b.n	80033e4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	2208      	movs	r2, #8
 8003386:	409a      	lsls	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d02a      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d025      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 020e 	bic.w	r2, r2, #14
 80033a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ae:	f003 021f 	and.w	r2, r3, #31
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	2101      	movs	r1, #1
 80033b8:	fa01 f202 	lsl.w	r2, r1, r2
 80033bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d004      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
}
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	4b16      	ldr	r3, [pc, #88]	@ (8003458 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003400:	429a      	cmp	r2, r3
 8003402:	d802      	bhi.n	800340a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003404:	4b15      	ldr	r3, [pc, #84]	@ (800345c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	e001      	b.n	800340e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800340a:	4b15      	ldr	r3, [pc, #84]	@ (8003460 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800340c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	3b08      	subs	r3, #8
 800341a:	4a12      	ldr	r2, [pc, #72]	@ (8003464 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003428:	089b      	lsrs	r3, r3, #2
 800342a:	009a      	lsls	r2, r3, #2
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4413      	add	r3, r2
 8003430:	461a      	mov	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a0b      	ldr	r2, [pc, #44]	@ (8003468 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800343a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	2201      	movs	r2, #1
 8003444:	409a      	lsls	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40020407 	.word	0x40020407
 800345c:	40020800 	.word	0x40020800
 8003460:	40020820 	.word	0x40020820
 8003464:	cccccccd 	.word	0xcccccccd
 8003468:	40020880 	.word	0x40020880

0800346c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4b0b      	ldr	r3, [pc, #44]	@ (80034ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	461a      	mov	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a08      	ldr	r2, [pc, #32]	@ (80034b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800348e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3b01      	subs	r3, #1
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	2201      	movs	r2, #1
 800349a:	409a      	lsls	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80034a0:	bf00      	nop
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	1000823f 	.word	0x1000823f
 80034b0:	40020940 	.word	0x40020940

080034b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034c2:	e15a      	b.n	800377a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	2101      	movs	r1, #1
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	fa01 f303 	lsl.w	r3, r1, r3
 80034d0:	4013      	ands	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 814c 	beq.w	8003774 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d005      	beq.n	80034f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d130      	bne.n	8003556 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	2203      	movs	r2, #3
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4013      	ands	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800352a:	2201      	movs	r2, #1
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43db      	mvns	r3, r3
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4013      	ands	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	091b      	lsrs	r3, r3, #4
 8003540:	f003 0201 	and.w	r2, r3, #1
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	2b03      	cmp	r3, #3
 8003560:	d017      	beq.n	8003592 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	2203      	movs	r2, #3
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4013      	ands	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d123      	bne.n	80035e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	08da      	lsrs	r2, r3, #3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3208      	adds	r2, #8
 80035a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	220f      	movs	r2, #15
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43db      	mvns	r3, r3
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4013      	ands	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	08da      	lsrs	r2, r3, #3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3208      	adds	r2, #8
 80035e0:	6939      	ldr	r1, [r7, #16]
 80035e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	2203      	movs	r2, #3
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f003 0203 	and.w	r2, r3, #3
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 80a6 	beq.w	8003774 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003628:	4b5b      	ldr	r3, [pc, #364]	@ (8003798 <HAL_GPIO_Init+0x2e4>)
 800362a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362c:	4a5a      	ldr	r2, [pc, #360]	@ (8003798 <HAL_GPIO_Init+0x2e4>)
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	6613      	str	r3, [r2, #96]	@ 0x60
 8003634:	4b58      	ldr	r3, [pc, #352]	@ (8003798 <HAL_GPIO_Init+0x2e4>)
 8003636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003640:	4a56      	ldr	r2, [pc, #344]	@ (800379c <HAL_GPIO_Init+0x2e8>)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	089b      	lsrs	r3, r3, #2
 8003646:	3302      	adds	r3, #2
 8003648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800364c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	220f      	movs	r2, #15
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4013      	ands	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800366a:	d01f      	beq.n	80036ac <HAL_GPIO_Init+0x1f8>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a4c      	ldr	r2, [pc, #304]	@ (80037a0 <HAL_GPIO_Init+0x2ec>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d019      	beq.n	80036a8 <HAL_GPIO_Init+0x1f4>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a4b      	ldr	r2, [pc, #300]	@ (80037a4 <HAL_GPIO_Init+0x2f0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d013      	beq.n	80036a4 <HAL_GPIO_Init+0x1f0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a4a      	ldr	r2, [pc, #296]	@ (80037a8 <HAL_GPIO_Init+0x2f4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00d      	beq.n	80036a0 <HAL_GPIO_Init+0x1ec>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a49      	ldr	r2, [pc, #292]	@ (80037ac <HAL_GPIO_Init+0x2f8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d007      	beq.n	800369c <HAL_GPIO_Init+0x1e8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a48      	ldr	r2, [pc, #288]	@ (80037b0 <HAL_GPIO_Init+0x2fc>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d101      	bne.n	8003698 <HAL_GPIO_Init+0x1e4>
 8003694:	2305      	movs	r3, #5
 8003696:	e00a      	b.n	80036ae <HAL_GPIO_Init+0x1fa>
 8003698:	2306      	movs	r3, #6
 800369a:	e008      	b.n	80036ae <HAL_GPIO_Init+0x1fa>
 800369c:	2304      	movs	r3, #4
 800369e:	e006      	b.n	80036ae <HAL_GPIO_Init+0x1fa>
 80036a0:	2303      	movs	r3, #3
 80036a2:	e004      	b.n	80036ae <HAL_GPIO_Init+0x1fa>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e002      	b.n	80036ae <HAL_GPIO_Init+0x1fa>
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <HAL_GPIO_Init+0x1fa>
 80036ac:	2300      	movs	r3, #0
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	f002 0203 	and.w	r2, r2, #3
 80036b4:	0092      	lsls	r2, r2, #2
 80036b6:	4093      	lsls	r3, r2
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036be:	4937      	ldr	r1, [pc, #220]	@ (800379c <HAL_GPIO_Init+0x2e8>)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	089b      	lsrs	r3, r3, #2
 80036c4:	3302      	adds	r3, #2
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036cc:	4b39      	ldr	r3, [pc, #228]	@ (80037b4 <HAL_GPIO_Init+0x300>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	43db      	mvns	r3, r3
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036f0:	4a30      	ldr	r2, [pc, #192]	@ (80037b4 <HAL_GPIO_Init+0x300>)
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036f6:	4b2f      	ldr	r3, [pc, #188]	@ (80037b4 <HAL_GPIO_Init+0x300>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	43db      	mvns	r3, r3
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	4013      	ands	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800371a:	4a26      	ldr	r2, [pc, #152]	@ (80037b4 <HAL_GPIO_Init+0x300>)
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003720:	4b24      	ldr	r3, [pc, #144]	@ (80037b4 <HAL_GPIO_Init+0x300>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	43db      	mvns	r3, r3
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003744:	4a1b      	ldr	r2, [pc, #108]	@ (80037b4 <HAL_GPIO_Init+0x300>)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800374a:	4b1a      	ldr	r3, [pc, #104]	@ (80037b4 <HAL_GPIO_Init+0x300>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	43db      	mvns	r3, r3
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4013      	ands	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800376e:	4a11      	ldr	r2, [pc, #68]	@ (80037b4 <HAL_GPIO_Init+0x300>)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	3301      	adds	r3, #1
 8003778:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	f47f ae9d 	bne.w	80034c4 <HAL_GPIO_Init+0x10>
  }
}
 800378a:	bf00      	nop
 800378c:	bf00      	nop
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	40021000 	.word	0x40021000
 800379c:	40010000 	.word	0x40010000
 80037a0:	48000400 	.word	0x48000400
 80037a4:	48000800 	.word	0x48000800
 80037a8:	48000c00 	.word	0x48000c00
 80037ac:	48001000 	.word	0x48001000
 80037b0:	48001400 	.word	0x48001400
 80037b4:	40010400 	.word	0x40010400

080037b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	460b      	mov	r3, r1
 80037c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	887b      	ldrh	r3, [r7, #2]
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
 80037d4:	e001      	b.n	80037da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037d6:	2300      	movs	r3, #0
 80037d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037da:	7bfb      	ldrb	r3, [r7, #15]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	807b      	strh	r3, [r7, #2]
 80037f4:	4613      	mov	r3, r2
 80037f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037f8:	787b      	ldrb	r3, [r7, #1]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037fe:	887a      	ldrh	r2, [r7, #2]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003804:	e002      	b.n	800380c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003806:	887a      	ldrh	r2, [r7, #2]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003822:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d006      	beq.n	800383c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800382e:	4a05      	ldr	r2, [pc, #20]	@ (8003844 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003830:	88fb      	ldrh	r3, [r7, #6]
 8003832:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003834:	88fb      	ldrh	r3, [r7, #6]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fd ff10 	bl	800165c <HAL_GPIO_EXTI_Callback>
  }
}
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40010400 	.word	0x40010400

08003848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d141      	bne.n	80038da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003856:	4b4b      	ldr	r3, [pc, #300]	@ (8003984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800385e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003862:	d131      	bne.n	80038c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003864:	4b47      	ldr	r3, [pc, #284]	@ (8003984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003866:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800386a:	4a46      	ldr	r2, [pc, #280]	@ (8003984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800386c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003870:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003874:	4b43      	ldr	r3, [pc, #268]	@ (8003984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800387c:	4a41      	ldr	r2, [pc, #260]	@ (8003984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003882:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003884:	4b40      	ldr	r3, [pc, #256]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2232      	movs	r2, #50	@ 0x32
 800388a:	fb02 f303 	mul.w	r3, r2, r3
 800388e:	4a3f      	ldr	r2, [pc, #252]	@ (800398c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003890:	fba2 2303 	umull	r2, r3, r2, r3
 8003894:	0c9b      	lsrs	r3, r3, #18
 8003896:	3301      	adds	r3, #1
 8003898:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800389a:	e002      	b.n	80038a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3b01      	subs	r3, #1
 80038a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038a2:	4b38      	ldr	r3, [pc, #224]	@ (8003984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ae:	d102      	bne.n	80038b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f2      	bne.n	800389c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038b6:	4b33      	ldr	r3, [pc, #204]	@ (8003984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c2:	d158      	bne.n	8003976 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e057      	b.n	8003978 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80038d8:	e04d      	b.n	8003976 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038e0:	d141      	bne.n	8003966 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038e2:	4b28      	ldr	r3, [pc, #160]	@ (8003984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ee:	d131      	bne.n	8003954 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038f0:	4b24      	ldr	r3, [pc, #144]	@ (8003984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038f6:	4a23      	ldr	r2, [pc, #140]	@ (8003984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003900:	4b20      	ldr	r3, [pc, #128]	@ (8003984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003908:	4a1e      	ldr	r2, [pc, #120]	@ (8003984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800390a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800390e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003910:	4b1d      	ldr	r3, [pc, #116]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2232      	movs	r2, #50	@ 0x32
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	4a1c      	ldr	r2, [pc, #112]	@ (800398c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800391c:	fba2 2303 	umull	r2, r3, r2, r3
 8003920:	0c9b      	lsrs	r3, r3, #18
 8003922:	3301      	adds	r3, #1
 8003924:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003926:	e002      	b.n	800392e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3b01      	subs	r3, #1
 800392c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800392e:	4b15      	ldr	r3, [pc, #84]	@ (8003984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800393a:	d102      	bne.n	8003942 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f2      	bne.n	8003928 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003942:	4b10      	ldr	r3, [pc, #64]	@ (8003984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800394a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800394e:	d112      	bne.n	8003976 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e011      	b.n	8003978 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003954:	4b0b      	ldr	r3, [pc, #44]	@ (8003984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800395a:	4a0a      	ldr	r2, [pc, #40]	@ (8003984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800395c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003960:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003964:	e007      	b.n	8003976 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003966:	4b07      	ldr	r3, [pc, #28]	@ (8003984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800396e:	4a05      	ldr	r2, [pc, #20]	@ (8003984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003970:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003974:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	40007000 	.word	0x40007000
 8003988:	20000008 	.word	0x20000008
 800398c:	431bde83 	.word	0x431bde83

08003990 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003994:	4b05      	ldr	r3, [pc, #20]	@ (80039ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	4a04      	ldr	r2, [pc, #16]	@ (80039ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800399a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800399e:	6093      	str	r3, [r2, #8]
}
 80039a0:	bf00      	nop
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40007000 	.word	0x40007000

080039b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e2fe      	b.n	8003fc0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d075      	beq.n	8003aba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ce:	4b97      	ldr	r3, [pc, #604]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 030c 	and.w	r3, r3, #12
 80039d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039d8:	4b94      	ldr	r3, [pc, #592]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	2b0c      	cmp	r3, #12
 80039e6:	d102      	bne.n	80039ee <HAL_RCC_OscConfig+0x3e>
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	d002      	beq.n	80039f4 <HAL_RCC_OscConfig+0x44>
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d10b      	bne.n	8003a0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f4:	4b8d      	ldr	r3, [pc, #564]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d05b      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x108>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d157      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e2d9      	b.n	8003fc0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a14:	d106      	bne.n	8003a24 <HAL_RCC_OscConfig+0x74>
 8003a16:	4b85      	ldr	r3, [pc, #532]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a84      	ldr	r2, [pc, #528]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	e01d      	b.n	8003a60 <HAL_RCC_OscConfig+0xb0>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x98>
 8003a2e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a7e      	ldr	r2, [pc, #504]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003a34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	4b7c      	ldr	r3, [pc, #496]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a7b      	ldr	r2, [pc, #492]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e00b      	b.n	8003a60 <HAL_RCC_OscConfig+0xb0>
 8003a48:	4b78      	ldr	r3, [pc, #480]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a77      	ldr	r2, [pc, #476]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003a4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	4b75      	ldr	r3, [pc, #468]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a74      	ldr	r2, [pc, #464]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003a5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d013      	beq.n	8003a90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fe f94e 	bl	8001d08 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a70:	f7fe f94a 	bl	8001d08 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b64      	cmp	r3, #100	@ 0x64
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e29e      	b.n	8003fc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a82:	4b6a      	ldr	r3, [pc, #424]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0xc0>
 8003a8e:	e014      	b.n	8003aba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fe f93a 	bl	8001d08 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a98:	f7fe f936 	bl	8001d08 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	@ 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e28a      	b.n	8003fc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aaa:	4b60      	ldr	r3, [pc, #384]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0xe8>
 8003ab6:	e000      	b.n	8003aba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d075      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ac6:	4b59      	ldr	r3, [pc, #356]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 030c 	and.w	r3, r3, #12
 8003ace:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ad0:	4b56      	ldr	r3, [pc, #344]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	2b0c      	cmp	r3, #12
 8003ade:	d102      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x136>
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d002      	beq.n	8003aec <HAL_RCC_OscConfig+0x13c>
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d11f      	bne.n	8003b2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aec:	4b4f      	ldr	r3, [pc, #316]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_RCC_OscConfig+0x154>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e25d      	b.n	8003fc0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b04:	4b49      	ldr	r3, [pc, #292]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	061b      	lsls	r3, r3, #24
 8003b12:	4946      	ldr	r1, [pc, #280]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b18:	4b45      	ldr	r3, [pc, #276]	@ (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fe f8a7 	bl	8001c70 <HAL_InitTick>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d043      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e249      	b.n	8003fc0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d023      	beq.n	8003b7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b34:	4b3d      	ldr	r3, [pc, #244]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a3c      	ldr	r2, [pc, #240]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7fe f8e2 	bl	8001d08 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b48:	f7fe f8de 	bl	8001d08 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e232      	b.n	8003fc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b5a:	4b34      	ldr	r3, [pc, #208]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b66:	4b31      	ldr	r3, [pc, #196]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	061b      	lsls	r3, r3, #24
 8003b74:	492d      	ldr	r1, [pc, #180]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	604b      	str	r3, [r1, #4]
 8003b7a:	e01a      	b.n	8003bb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a2a      	ldr	r2, [pc, #168]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003b82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fe f8be 	bl	8001d08 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b90:	f7fe f8ba 	bl	8001d08 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e20e      	b.n	8003fc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ba2:	4b22      	ldr	r3, [pc, #136]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x1e0>
 8003bae:	e000      	b.n	8003bb2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d041      	beq.n	8003c42 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01c      	beq.n	8003c00 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc6:	4b19      	ldr	r3, [pc, #100]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bcc:	4a17      	ldr	r2, [pc, #92]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd6:	f7fe f897 	bl	8001d08 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bde:	f7fe f893 	bl	8001d08 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e1e7      	b.n	8003fc0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0ef      	beq.n	8003bde <HAL_RCC_OscConfig+0x22e>
 8003bfe:	e020      	b.n	8003c42 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c00:	4b0a      	ldr	r3, [pc, #40]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c06:	4a09      	ldr	r2, [pc, #36]	@ (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 8003c0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c10:	f7fe f87a 	bl	8001d08 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c16:	e00d      	b.n	8003c34 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c18:	f7fe f876 	bl	8001d08 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d906      	bls.n	8003c34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e1ca      	b.n	8003fc0 <HAL_RCC_OscConfig+0x610>
 8003c2a:	bf00      	nop
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c34:	4b8c      	ldr	r3, [pc, #560]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1ea      	bne.n	8003c18 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 80a6 	beq.w	8003d9c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c50:	2300      	movs	r3, #0
 8003c52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c54:	4b84      	ldr	r3, [pc, #528]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_RCC_OscConfig+0x2b4>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <HAL_RCC_OscConfig+0x2b6>
 8003c64:	2300      	movs	r3, #0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00d      	beq.n	8003c86 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c6a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c74:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c76:	4b7c      	ldr	r3, [pc, #496]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c82:	2301      	movs	r3, #1
 8003c84:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c86:	4b79      	ldr	r3, [pc, #484]	@ (8003e6c <HAL_RCC_OscConfig+0x4bc>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d118      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c92:	4b76      	ldr	r3, [pc, #472]	@ (8003e6c <HAL_RCC_OscConfig+0x4bc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a75      	ldr	r2, [pc, #468]	@ (8003e6c <HAL_RCC_OscConfig+0x4bc>)
 8003c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c9e:	f7fe f833 	bl	8001d08 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca6:	f7fe f82f 	bl	8001d08 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e183      	b.n	8003fc0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cb8:	4b6c      	ldr	r3, [pc, #432]	@ (8003e6c <HAL_RCC_OscConfig+0x4bc>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d108      	bne.n	8003cde <HAL_RCC_OscConfig+0x32e>
 8003ccc:	4b66      	ldr	r3, [pc, #408]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd2:	4a65      	ldr	r2, [pc, #404]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cdc:	e024      	b.n	8003d28 <HAL_RCC_OscConfig+0x378>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2b05      	cmp	r3, #5
 8003ce4:	d110      	bne.n	8003d08 <HAL_RCC_OscConfig+0x358>
 8003ce6:	4b60      	ldr	r3, [pc, #384]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cec:	4a5e      	ldr	r2, [pc, #376]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003cee:	f043 0304 	orr.w	r3, r3, #4
 8003cf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cf6:	4b5c      	ldr	r3, [pc, #368]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfc:	4a5a      	ldr	r2, [pc, #360]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d06:	e00f      	b.n	8003d28 <HAL_RCC_OscConfig+0x378>
 8003d08:	4b57      	ldr	r3, [pc, #348]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d0e:	4a56      	ldr	r2, [pc, #344]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003d10:	f023 0301 	bic.w	r3, r3, #1
 8003d14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d18:	4b53      	ldr	r3, [pc, #332]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d1e:	4a52      	ldr	r2, [pc, #328]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003d20:	f023 0304 	bic.w	r3, r3, #4
 8003d24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d016      	beq.n	8003d5e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d30:	f7fd ffea 	bl	8001d08 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d36:	e00a      	b.n	8003d4e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d38:	f7fd ffe6 	bl	8001d08 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e138      	b.n	8003fc0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d4e:	4b46      	ldr	r3, [pc, #280]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0ed      	beq.n	8003d38 <HAL_RCC_OscConfig+0x388>
 8003d5c:	e015      	b.n	8003d8a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5e:	f7fd ffd3 	bl	8001d08 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d64:	e00a      	b.n	8003d7c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d66:	f7fd ffcf 	bl	8001d08 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e121      	b.n	8003fc0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d7c:	4b3a      	ldr	r3, [pc, #232]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1ed      	bne.n	8003d66 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d8a:	7ffb      	ldrb	r3, [r7, #31]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d105      	bne.n	8003d9c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d90:	4b35      	ldr	r3, [pc, #212]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d94:	4a34      	ldr	r2, [pc, #208]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003d96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d9a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d03c      	beq.n	8003e22 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01c      	beq.n	8003dea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003db0:	4b2d      	ldr	r3, [pc, #180]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003db6:	4a2c      	ldr	r2, [pc, #176]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc0:	f7fd ffa2 	bl	8001d08 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dc8:	f7fd ff9e 	bl	8001d08 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e0f2      	b.n	8003fc0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dda:	4b23      	ldr	r3, [pc, #140]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003ddc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0ef      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x418>
 8003de8:	e01b      	b.n	8003e22 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dea:	4b1f      	ldr	r3, [pc, #124]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003dec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003df0:	4a1d      	ldr	r2, [pc, #116]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003df2:	f023 0301 	bic.w	r3, r3, #1
 8003df6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfa:	f7fd ff85 	bl	8001d08 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e02:	f7fd ff81 	bl	8001d08 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e0d5      	b.n	8003fc0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e14:	4b14      	ldr	r3, [pc, #80]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1ef      	bne.n	8003e02 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80c9 	beq.w	8003fbe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 030c 	and.w	r3, r3, #12
 8003e34:	2b0c      	cmp	r3, #12
 8003e36:	f000 8083 	beq.w	8003f40 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d15e      	bne.n	8003f00 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e42:	4b09      	ldr	r3, [pc, #36]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a08      	ldr	r2, [pc, #32]	@ (8003e68 <HAL_RCC_OscConfig+0x4b8>)
 8003e48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4e:	f7fd ff5b 	bl	8001d08 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e54:	e00c      	b.n	8003e70 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e56:	f7fd ff57 	bl	8001d08 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d905      	bls.n	8003e70 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e0ab      	b.n	8003fc0 <HAL_RCC_OscConfig+0x610>
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e70:	4b55      	ldr	r3, [pc, #340]	@ (8003fc8 <HAL_RCC_OscConfig+0x618>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1ec      	bne.n	8003e56 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e7c:	4b52      	ldr	r3, [pc, #328]	@ (8003fc8 <HAL_RCC_OscConfig+0x618>)
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	4b52      	ldr	r3, [pc, #328]	@ (8003fcc <HAL_RCC_OscConfig+0x61c>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6a11      	ldr	r1, [r2, #32]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e8c:	3a01      	subs	r2, #1
 8003e8e:	0112      	lsls	r2, r2, #4
 8003e90:	4311      	orrs	r1, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003e96:	0212      	lsls	r2, r2, #8
 8003e98:	4311      	orrs	r1, r2
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e9e:	0852      	lsrs	r2, r2, #1
 8003ea0:	3a01      	subs	r2, #1
 8003ea2:	0552      	lsls	r2, r2, #21
 8003ea4:	4311      	orrs	r1, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003eaa:	0852      	lsrs	r2, r2, #1
 8003eac:	3a01      	subs	r2, #1
 8003eae:	0652      	lsls	r2, r2, #25
 8003eb0:	4311      	orrs	r1, r2
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003eb6:	06d2      	lsls	r2, r2, #27
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	4943      	ldr	r1, [pc, #268]	@ (8003fc8 <HAL_RCC_OscConfig+0x618>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec0:	4b41      	ldr	r3, [pc, #260]	@ (8003fc8 <HAL_RCC_OscConfig+0x618>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a40      	ldr	r2, [pc, #256]	@ (8003fc8 <HAL_RCC_OscConfig+0x618>)
 8003ec6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ecc:	4b3e      	ldr	r3, [pc, #248]	@ (8003fc8 <HAL_RCC_OscConfig+0x618>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4a3d      	ldr	r2, [pc, #244]	@ (8003fc8 <HAL_RCC_OscConfig+0x618>)
 8003ed2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ed6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7fd ff16 	bl	8001d08 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee0:	f7fd ff12 	bl	8001d08 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e066      	b.n	8003fc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ef2:	4b35      	ldr	r3, [pc, #212]	@ (8003fc8 <HAL_RCC_OscConfig+0x618>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x530>
 8003efe:	e05e      	b.n	8003fbe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f00:	4b31      	ldr	r3, [pc, #196]	@ (8003fc8 <HAL_RCC_OscConfig+0x618>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a30      	ldr	r2, [pc, #192]	@ (8003fc8 <HAL_RCC_OscConfig+0x618>)
 8003f06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fd fefc 	bl	8001d08 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fd fef8 	bl	8001d08 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e04c      	b.n	8003fc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f26:	4b28      	ldr	r3, [pc, #160]	@ (8003fc8 <HAL_RCC_OscConfig+0x618>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003f32:	4b25      	ldr	r3, [pc, #148]	@ (8003fc8 <HAL_RCC_OscConfig+0x618>)
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	4924      	ldr	r1, [pc, #144]	@ (8003fc8 <HAL_RCC_OscConfig+0x618>)
 8003f38:	4b25      	ldr	r3, [pc, #148]	@ (8003fd0 <HAL_RCC_OscConfig+0x620>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	60cb      	str	r3, [r1, #12]
 8003f3e:	e03e      	b.n	8003fbe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e039      	b.n	8003fc0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8003fc8 <HAL_RCC_OscConfig+0x618>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f003 0203 	and.w	r2, r3, #3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d12c      	bne.n	8003fba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d123      	bne.n	8003fba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d11b      	bne.n	8003fba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d113      	bne.n	8003fba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9c:	085b      	lsrs	r3, r3, #1
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d109      	bne.n	8003fba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fb0:	085b      	lsrs	r3, r3, #1
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d001      	beq.n	8003fbe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3720      	adds	r7, #32
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	019f800c 	.word	0x019f800c
 8003fd0:	feeefffc 	.word	0xfeeefffc

08003fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e11e      	b.n	800422a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fec:	4b91      	ldr	r3, [pc, #580]	@ (8004234 <HAL_RCC_ClockConfig+0x260>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 030f 	and.w	r3, r3, #15
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d910      	bls.n	800401c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffa:	4b8e      	ldr	r3, [pc, #568]	@ (8004234 <HAL_RCC_ClockConfig+0x260>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 020f 	bic.w	r2, r3, #15
 8004002:	498c      	ldr	r1, [pc, #560]	@ (8004234 <HAL_RCC_ClockConfig+0x260>)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b8a      	ldr	r3, [pc, #552]	@ (8004234 <HAL_RCC_ClockConfig+0x260>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e106      	b.n	800422a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d073      	beq.n	8004110 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b03      	cmp	r3, #3
 800402e:	d129      	bne.n	8004084 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004030:	4b81      	ldr	r3, [pc, #516]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0f4      	b.n	800422a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004040:	f000 f966 	bl	8004310 <RCC_GetSysClockFreqFromPLLSource>
 8004044:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4a7c      	ldr	r2, [pc, #496]	@ (800423c <HAL_RCC_ClockConfig+0x268>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d93f      	bls.n	80040ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800404e:	4b7a      	ldr	r3, [pc, #488]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004062:	2b00      	cmp	r3, #0
 8004064:	d033      	beq.n	80040ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800406a:	2b00      	cmp	r3, #0
 800406c:	d12f      	bne.n	80040ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800406e:	4b72      	ldr	r3, [pc, #456]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004076:	4a70      	ldr	r2, [pc, #448]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 8004078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800407c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800407e:	2380      	movs	r3, #128	@ 0x80
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	e024      	b.n	80040ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b02      	cmp	r3, #2
 800408a:	d107      	bne.n	800409c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800408c:	4b6a      	ldr	r3, [pc, #424]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d109      	bne.n	80040ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e0c6      	b.n	800422a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800409c:	4b66      	ldr	r3, [pc, #408]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0be      	b.n	800422a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80040ac:	f000 f8ce 	bl	800424c <HAL_RCC_GetSysClockFreq>
 80040b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	4a61      	ldr	r2, [pc, #388]	@ (800423c <HAL_RCC_ClockConfig+0x268>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d909      	bls.n	80040ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040ba:	4b5f      	ldr	r3, [pc, #380]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040c2:	4a5d      	ldr	r2, [pc, #372]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 80040c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80040ca:	2380      	movs	r3, #128	@ 0x80
 80040cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040ce:	4b5a      	ldr	r3, [pc, #360]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f023 0203 	bic.w	r2, r3, #3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	4957      	ldr	r1, [pc, #348]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e0:	f7fd fe12 	bl	8001d08 <HAL_GetTick>
 80040e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e6:	e00a      	b.n	80040fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e8:	f7fd fe0e 	bl	8001d08 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e095      	b.n	800422a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fe:	4b4e      	ldr	r3, [pc, #312]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 020c 	and.w	r2, r3, #12
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	429a      	cmp	r2, r3
 800410e:	d1eb      	bne.n	80040e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d023      	beq.n	8004164 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004128:	4b43      	ldr	r3, [pc, #268]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	4a42      	ldr	r2, [pc, #264]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 800412e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004132:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004140:	4b3d      	ldr	r3, [pc, #244]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004148:	4a3b      	ldr	r2, [pc, #236]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 800414a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800414e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004150:	4b39      	ldr	r3, [pc, #228]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	4936      	ldr	r1, [pc, #216]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 800415e:	4313      	orrs	r3, r2
 8004160:	608b      	str	r3, [r1, #8]
 8004162:	e008      	b.n	8004176 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2b80      	cmp	r3, #128	@ 0x80
 8004168:	d105      	bne.n	8004176 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800416a:	4b33      	ldr	r3, [pc, #204]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	4a32      	ldr	r2, [pc, #200]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 8004170:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004174:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004176:	4b2f      	ldr	r3, [pc, #188]	@ (8004234 <HAL_RCC_ClockConfig+0x260>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d21d      	bcs.n	80041c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004184:	4b2b      	ldr	r3, [pc, #172]	@ (8004234 <HAL_RCC_ClockConfig+0x260>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f023 020f 	bic.w	r2, r3, #15
 800418c:	4929      	ldr	r1, [pc, #164]	@ (8004234 <HAL_RCC_ClockConfig+0x260>)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	4313      	orrs	r3, r2
 8004192:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004194:	f7fd fdb8 	bl	8001d08 <HAL_GetTick>
 8004198:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800419a:	e00a      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800419c:	f7fd fdb4 	bl	8001d08 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e03b      	b.n	800422a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b2:	4b20      	ldr	r3, [pc, #128]	@ (8004234 <HAL_RCC_ClockConfig+0x260>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d1ed      	bne.n	800419c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4917      	ldr	r1, [pc, #92]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ea:	4b13      	ldr	r3, [pc, #76]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	490f      	ldr	r1, [pc, #60]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041fe:	f000 f825 	bl	800424c <HAL_RCC_GetSysClockFreq>
 8004202:	4602      	mov	r2, r0
 8004204:	4b0c      	ldr	r3, [pc, #48]	@ (8004238 <HAL_RCC_ClockConfig+0x264>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	490c      	ldr	r1, [pc, #48]	@ (8004240 <HAL_RCC_ClockConfig+0x26c>)
 8004210:	5ccb      	ldrb	r3, [r1, r3]
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	fa22 f303 	lsr.w	r3, r2, r3
 800421a:	4a0a      	ldr	r2, [pc, #40]	@ (8004244 <HAL_RCC_ClockConfig+0x270>)
 800421c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800421e:	4b0a      	ldr	r3, [pc, #40]	@ (8004248 <HAL_RCC_ClockConfig+0x274>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f7fd fd24 	bl	8001c70 <HAL_InitTick>
 8004228:	4603      	mov	r3, r0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40022000 	.word	0x40022000
 8004238:	40021000 	.word	0x40021000
 800423c:	04c4b400 	.word	0x04c4b400
 8004240:	08006594 	.word	0x08006594
 8004244:	20000008 	.word	0x20000008
 8004248:	2000000c 	.word	0x2000000c

0800424c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004252:	4b2c      	ldr	r3, [pc, #176]	@ (8004304 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	2b04      	cmp	r3, #4
 800425c:	d102      	bne.n	8004264 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800425e:	4b2a      	ldr	r3, [pc, #168]	@ (8004308 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	e047      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004264:	4b27      	ldr	r3, [pc, #156]	@ (8004304 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 030c 	and.w	r3, r3, #12
 800426c:	2b08      	cmp	r3, #8
 800426e:	d102      	bne.n	8004276 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004270:	4b26      	ldr	r3, [pc, #152]	@ (800430c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	e03e      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004276:	4b23      	ldr	r3, [pc, #140]	@ (8004304 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b0c      	cmp	r3, #12
 8004280:	d136      	bne.n	80042f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004282:	4b20      	ldr	r3, [pc, #128]	@ (8004304 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800428c:	4b1d      	ldr	r3, [pc, #116]	@ (8004304 <HAL_RCC_GetSysClockFreq+0xb8>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	3301      	adds	r3, #1
 8004298:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b03      	cmp	r3, #3
 800429e:	d10c      	bne.n	80042ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042a0:	4a1a      	ldr	r2, [pc, #104]	@ (800430c <HAL_RCC_GetSysClockFreq+0xc0>)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a8:	4a16      	ldr	r2, [pc, #88]	@ (8004304 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042aa:	68d2      	ldr	r2, [r2, #12]
 80042ac:	0a12      	lsrs	r2, r2, #8
 80042ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80042b2:	fb02 f303 	mul.w	r3, r2, r3
 80042b6:	617b      	str	r3, [r7, #20]
      break;
 80042b8:	e00c      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042ba:	4a13      	ldr	r2, [pc, #76]	@ (8004308 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c2:	4a10      	ldr	r2, [pc, #64]	@ (8004304 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042c4:	68d2      	ldr	r2, [r2, #12]
 80042c6:	0a12      	lsrs	r2, r2, #8
 80042c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80042cc:	fb02 f303 	mul.w	r3, r2, r3
 80042d0:	617b      	str	r3, [r7, #20]
      break;
 80042d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004304 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	0e5b      	lsrs	r3, r3, #25
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	3301      	adds	r3, #1
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	e001      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80042f4:	693b      	ldr	r3, [r7, #16]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	40021000 	.word	0x40021000
 8004308:	00f42400 	.word	0x00f42400
 800430c:	016e3600 	.word	0x016e3600

08004310 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004316:	4b1e      	ldr	r3, [pc, #120]	@ (8004390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004320:	4b1b      	ldr	r3, [pc, #108]	@ (8004390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	091b      	lsrs	r3, r3, #4
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	3301      	adds	r3, #1
 800432c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	2b03      	cmp	r3, #3
 8004332:	d10c      	bne.n	800434e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004334:	4a17      	ldr	r2, [pc, #92]	@ (8004394 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	4a14      	ldr	r2, [pc, #80]	@ (8004390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800433e:	68d2      	ldr	r2, [r2, #12]
 8004340:	0a12      	lsrs	r2, r2, #8
 8004342:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004346:	fb02 f303 	mul.w	r3, r2, r3
 800434a:	617b      	str	r3, [r7, #20]
    break;
 800434c:	e00c      	b.n	8004368 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800434e:	4a12      	ldr	r2, [pc, #72]	@ (8004398 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	fbb2 f3f3 	udiv	r3, r2, r3
 8004356:	4a0e      	ldr	r2, [pc, #56]	@ (8004390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004358:	68d2      	ldr	r2, [r2, #12]
 800435a:	0a12      	lsrs	r2, r2, #8
 800435c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004360:	fb02 f303 	mul.w	r3, r2, r3
 8004364:	617b      	str	r3, [r7, #20]
    break;
 8004366:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004368:	4b09      	ldr	r3, [pc, #36]	@ (8004390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	0e5b      	lsrs	r3, r3, #25
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	3301      	adds	r3, #1
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004380:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004382:	687b      	ldr	r3, [r7, #4]
}
 8004384:	4618      	mov	r0, r3
 8004386:	371c      	adds	r7, #28
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	40021000 	.word	0x40021000
 8004394:	016e3600 	.word	0x016e3600
 8004398:	00f42400 	.word	0x00f42400

0800439c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043a4:	2300      	movs	r3, #0
 80043a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043a8:	2300      	movs	r3, #0
 80043aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 8098 	beq.w	80044ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ba:	2300      	movs	r3, #0
 80043bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043be:	4b43      	ldr	r3, [pc, #268]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10d      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ca:	4b40      	ldr	r3, [pc, #256]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ce:	4a3f      	ldr	r2, [pc, #252]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80043d6:	4b3d      	ldr	r3, [pc, #244]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043de:	60bb      	str	r3, [r7, #8]
 80043e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043e2:	2301      	movs	r3, #1
 80043e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043e6:	4b3a      	ldr	r3, [pc, #232]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a39      	ldr	r2, [pc, #228]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043f2:	f7fd fc89 	bl	8001d08 <HAL_GetTick>
 80043f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043f8:	e009      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043fa:	f7fd fc85 	bl	8001d08 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d902      	bls.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	74fb      	strb	r3, [r7, #19]
        break;
 800440c:	e005      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800440e:	4b30      	ldr	r3, [pc, #192]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0ef      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800441a:	7cfb      	ldrb	r3, [r7, #19]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d159      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004420:	4b2a      	ldr	r3, [pc, #168]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800442a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d01e      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	429a      	cmp	r2, r3
 800443a:	d019      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800443c:	4b23      	ldr	r3, [pc, #140]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800443e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004442:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004446:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004448:	4b20      	ldr	r3, [pc, #128]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800444e:	4a1f      	ldr	r2, [pc, #124]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004458:	4b1c      	ldr	r3, [pc, #112]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800445e:	4a1b      	ldr	r2, [pc, #108]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004460:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004468:	4a18      	ldr	r2, [pc, #96]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d016      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447a:	f7fd fc45 	bl	8001d08 <HAL_GetTick>
 800447e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004480:	e00b      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004482:	f7fd fc41 	bl	8001d08 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004490:	4293      	cmp	r3, r2
 8004492:	d902      	bls.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	74fb      	strb	r3, [r7, #19]
            break;
 8004498:	e006      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800449a:	4b0c      	ldr	r3, [pc, #48]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800449c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0ec      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80044a8:	7cfb      	ldrb	r3, [r7, #19]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10b      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044ae:	4b07      	ldr	r3, [pc, #28]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044bc:	4903      	ldr	r1, [pc, #12]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80044c4:	e008      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044c6:	7cfb      	ldrb	r3, [r7, #19]
 80044c8:	74bb      	strb	r3, [r7, #18]
 80044ca:	e005      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80044cc:	40021000 	.word	0x40021000
 80044d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d4:	7cfb      	ldrb	r3, [r7, #19]
 80044d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044d8:	7c7b      	ldrb	r3, [r7, #17]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d105      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044de:	4ba7      	ldr	r3, [pc, #668]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e2:	4aa6      	ldr	r2, [pc, #664]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044f6:	4ba1      	ldr	r3, [pc, #644]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044fc:	f023 0203 	bic.w	r2, r3, #3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	499d      	ldr	r1, [pc, #628]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004518:	4b98      	ldr	r3, [pc, #608]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451e:	f023 020c 	bic.w	r2, r3, #12
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	4995      	ldr	r1, [pc, #596]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800453a:	4b90      	ldr	r3, [pc, #576]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004540:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	498c      	ldr	r1, [pc, #560]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800455c:	4b87      	ldr	r3, [pc, #540]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004562:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	4984      	ldr	r1, [pc, #528]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800457e:	4b7f      	ldr	r3, [pc, #508]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004584:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	497b      	ldr	r1, [pc, #492]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045a0:	4b76      	ldr	r3, [pc, #472]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	4973      	ldr	r1, [pc, #460]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045c2:	4b6e      	ldr	r3, [pc, #440]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	496a      	ldr	r1, [pc, #424]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045e4:	4b65      	ldr	r3, [pc, #404]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	4962      	ldr	r1, [pc, #392]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004606:	4b5d      	ldr	r3, [pc, #372]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004614:	4959      	ldr	r1, [pc, #356]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004628:	4b54      	ldr	r3, [pc, #336]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800462a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800462e:	f023 0203 	bic.w	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004636:	4951      	ldr	r1, [pc, #324]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800464a:	4b4c      	ldr	r3, [pc, #304]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004650:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004658:	4948      	ldr	r1, [pc, #288]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004668:	2b00      	cmp	r3, #0
 800466a:	d015      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800466c:	4b43      	ldr	r3, [pc, #268]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004672:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467a:	4940      	ldr	r1, [pc, #256]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004686:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800468a:	d105      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800468c:	4b3b      	ldr	r3, [pc, #236]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4a3a      	ldr	r2, [pc, #232]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004696:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d015      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046a4:	4b35      	ldr	r3, [pc, #212]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046b2:	4932      	ldr	r1, [pc, #200]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046c2:	d105      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c4:	4b2d      	ldr	r3, [pc, #180]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4a2c      	ldr	r2, [pc, #176]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046ce:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d015      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046dc:	4b27      	ldr	r3, [pc, #156]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ea:	4924      	ldr	r1, [pc, #144]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046fa:	d105      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046fc:	4b1f      	ldr	r3, [pc, #124]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	4a1e      	ldr	r2, [pc, #120]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004706:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d015      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004714:	4b19      	ldr	r3, [pc, #100]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004722:	4916      	ldr	r1, [pc, #88]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004732:	d105      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004734:	4b11      	ldr	r3, [pc, #68]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	4a10      	ldr	r2, [pc, #64]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800473a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800473e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d019      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800474c:	4b0b      	ldr	r3, [pc, #44]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004752:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475a:	4908      	ldr	r1, [pc, #32]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004766:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800476a:	d109      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800476c:	4b03      	ldr	r3, [pc, #12]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	4a02      	ldr	r2, [pc, #8]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004772:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004776:	60d3      	str	r3, [r2, #12]
 8004778:	e002      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800477a:	bf00      	nop
 800477c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d015      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800478c:	4b29      	ldr	r3, [pc, #164]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004792:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479a:	4926      	ldr	r1, [pc, #152]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047aa:	d105      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047ac:	4b21      	ldr	r3, [pc, #132]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	4a20      	ldr	r2, [pc, #128]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047b6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d015      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80047c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047d2:	4918      	ldr	r1, [pc, #96]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047e2:	d105      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047e4:	4b13      	ldr	r3, [pc, #76]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	4a12      	ldr	r2, [pc, #72]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d015      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004802:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800480a:	490a      	ldr	r1, [pc, #40]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004816:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800481a:	d105      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800481c:	4b05      	ldr	r3, [pc, #20]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	4a04      	ldr	r2, [pc, #16]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004822:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004826:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004828:	7cbb      	ldrb	r3, [r7, #18]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40021000 	.word	0x40021000

08004838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e049      	b.n	80048de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fd f82c 	bl	80018bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3304      	adds	r3, #4
 8004874:	4619      	mov	r1, r3
 8004876:	4610      	mov	r0, r2
 8004878:	f001 f80e 	bl	8005898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d001      	beq.n	8004900 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e04c      	b.n	800499a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a26      	ldr	r2, [pc, #152]	@ (80049a8 <HAL_TIM_Base_Start+0xc0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d022      	beq.n	8004958 <HAL_TIM_Base_Start+0x70>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800491a:	d01d      	beq.n	8004958 <HAL_TIM_Base_Start+0x70>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a22      	ldr	r2, [pc, #136]	@ (80049ac <HAL_TIM_Base_Start+0xc4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d018      	beq.n	8004958 <HAL_TIM_Base_Start+0x70>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a21      	ldr	r2, [pc, #132]	@ (80049b0 <HAL_TIM_Base_Start+0xc8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d013      	beq.n	8004958 <HAL_TIM_Base_Start+0x70>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a1f      	ldr	r2, [pc, #124]	@ (80049b4 <HAL_TIM_Base_Start+0xcc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00e      	beq.n	8004958 <HAL_TIM_Base_Start+0x70>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a1e      	ldr	r2, [pc, #120]	@ (80049b8 <HAL_TIM_Base_Start+0xd0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d009      	beq.n	8004958 <HAL_TIM_Base_Start+0x70>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1c      	ldr	r2, [pc, #112]	@ (80049bc <HAL_TIM_Base_Start+0xd4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d004      	beq.n	8004958 <HAL_TIM_Base_Start+0x70>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1b      	ldr	r2, [pc, #108]	@ (80049c0 <HAL_TIM_Base_Start+0xd8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d115      	bne.n	8004984 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	4b19      	ldr	r3, [pc, #100]	@ (80049c4 <HAL_TIM_Base_Start+0xdc>)
 8004960:	4013      	ands	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b06      	cmp	r3, #6
 8004968:	d015      	beq.n	8004996 <HAL_TIM_Base_Start+0xae>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004970:	d011      	beq.n	8004996 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0201 	orr.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004982:	e008      	b.n	8004996 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	e000      	b.n	8004998 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004996:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40012c00 	.word	0x40012c00
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40013400 	.word	0x40013400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40015000 	.word	0x40015000
 80049c4:	00010007 	.word	0x00010007

080049c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d001      	beq.n	80049e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e054      	b.n	8004a8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a26      	ldr	r2, [pc, #152]	@ (8004a98 <HAL_TIM_Base_Start_IT+0xd0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d022      	beq.n	8004a48 <HAL_TIM_Base_Start_IT+0x80>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a0a:	d01d      	beq.n	8004a48 <HAL_TIM_Base_Start_IT+0x80>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a22      	ldr	r2, [pc, #136]	@ (8004a9c <HAL_TIM_Base_Start_IT+0xd4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d018      	beq.n	8004a48 <HAL_TIM_Base_Start_IT+0x80>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a21      	ldr	r2, [pc, #132]	@ (8004aa0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d013      	beq.n	8004a48 <HAL_TIM_Base_Start_IT+0x80>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a1f      	ldr	r2, [pc, #124]	@ (8004aa4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d00e      	beq.n	8004a48 <HAL_TIM_Base_Start_IT+0x80>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8004aa8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d009      	beq.n	8004a48 <HAL_TIM_Base_Start_IT+0x80>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a1c      	ldr	r2, [pc, #112]	@ (8004aac <HAL_TIM_Base_Start_IT+0xe4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d004      	beq.n	8004a48 <HAL_TIM_Base_Start_IT+0x80>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d115      	bne.n	8004a74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	4b19      	ldr	r3, [pc, #100]	@ (8004ab4 <HAL_TIM_Base_Start_IT+0xec>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b06      	cmp	r3, #6
 8004a58:	d015      	beq.n	8004a86 <HAL_TIM_Base_Start_IT+0xbe>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a60:	d011      	beq.n	8004a86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0201 	orr.w	r2, r2, #1
 8004a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a72:	e008      	b.n	8004a86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	e000      	b.n	8004a88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	40012c00 	.word	0x40012c00
 8004a9c:	40000400 	.word	0x40000400
 8004aa0:	40000800 	.word	0x40000800
 8004aa4:	40000c00 	.word	0x40000c00
 8004aa8:	40013400 	.word	0x40013400
 8004aac:	40014000 	.word	0x40014000
 8004ab0:	40015000 	.word	0x40015000
 8004ab4:	00010007 	.word	0x00010007

08004ab8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e049      	b.n	8004b5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f841 	bl	8004b66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3304      	adds	r3, #4
 8004af4:	4619      	mov	r1, r3
 8004af6:	4610      	mov	r0, r2
 8004af8:	f000 fece 	bl	8005898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
	...

08004b7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d109      	bne.n	8004ba0 <HAL_TIM_PWM_Start+0x24>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	bf14      	ite	ne
 8004b98:	2301      	movne	r3, #1
 8004b9a:	2300      	moveq	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	e03c      	b.n	8004c1a <HAL_TIM_PWM_Start+0x9e>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d109      	bne.n	8004bba <HAL_TIM_PWM_Start+0x3e>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	bf14      	ite	ne
 8004bb2:	2301      	movne	r3, #1
 8004bb4:	2300      	moveq	r3, #0
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	e02f      	b.n	8004c1a <HAL_TIM_PWM_Start+0x9e>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d109      	bne.n	8004bd4 <HAL_TIM_PWM_Start+0x58>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	bf14      	ite	ne
 8004bcc:	2301      	movne	r3, #1
 8004bce:	2300      	moveq	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	e022      	b.n	8004c1a <HAL_TIM_PWM_Start+0x9e>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2b0c      	cmp	r3, #12
 8004bd8:	d109      	bne.n	8004bee <HAL_TIM_PWM_Start+0x72>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	bf14      	ite	ne
 8004be6:	2301      	movne	r3, #1
 8004be8:	2300      	moveq	r3, #0
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	e015      	b.n	8004c1a <HAL_TIM_PWM_Start+0x9e>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b10      	cmp	r3, #16
 8004bf2:	d109      	bne.n	8004c08 <HAL_TIM_PWM_Start+0x8c>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	bf14      	ite	ne
 8004c00:	2301      	movne	r3, #1
 8004c02:	2300      	moveq	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	e008      	b.n	8004c1a <HAL_TIM_PWM_Start+0x9e>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	bf14      	ite	ne
 8004c14:	2301      	movne	r3, #1
 8004c16:	2300      	moveq	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e0a6      	b.n	8004d70 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d104      	bne.n	8004c32 <HAL_TIM_PWM_Start+0xb6>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c30:	e023      	b.n	8004c7a <HAL_TIM_PWM_Start+0xfe>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d104      	bne.n	8004c42 <HAL_TIM_PWM_Start+0xc6>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c40:	e01b      	b.n	8004c7a <HAL_TIM_PWM_Start+0xfe>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d104      	bne.n	8004c52 <HAL_TIM_PWM_Start+0xd6>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c50:	e013      	b.n	8004c7a <HAL_TIM_PWM_Start+0xfe>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b0c      	cmp	r3, #12
 8004c56:	d104      	bne.n	8004c62 <HAL_TIM_PWM_Start+0xe6>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c60:	e00b      	b.n	8004c7a <HAL_TIM_PWM_Start+0xfe>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b10      	cmp	r3, #16
 8004c66:	d104      	bne.n	8004c72 <HAL_TIM_PWM_Start+0xf6>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c70:	e003      	b.n	8004c7a <HAL_TIM_PWM_Start+0xfe>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2202      	movs	r2, #2
 8004c76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	6839      	ldr	r1, [r7, #0]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f001 fa82 	bl	800618c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a3a      	ldr	r2, [pc, #232]	@ (8004d78 <HAL_TIM_PWM_Start+0x1fc>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d018      	beq.n	8004cc4 <HAL_TIM_PWM_Start+0x148>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a39      	ldr	r2, [pc, #228]	@ (8004d7c <HAL_TIM_PWM_Start+0x200>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d013      	beq.n	8004cc4 <HAL_TIM_PWM_Start+0x148>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a37      	ldr	r2, [pc, #220]	@ (8004d80 <HAL_TIM_PWM_Start+0x204>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00e      	beq.n	8004cc4 <HAL_TIM_PWM_Start+0x148>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a36      	ldr	r2, [pc, #216]	@ (8004d84 <HAL_TIM_PWM_Start+0x208>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d009      	beq.n	8004cc4 <HAL_TIM_PWM_Start+0x148>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a34      	ldr	r2, [pc, #208]	@ (8004d88 <HAL_TIM_PWM_Start+0x20c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d004      	beq.n	8004cc4 <HAL_TIM_PWM_Start+0x148>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a33      	ldr	r2, [pc, #204]	@ (8004d8c <HAL_TIM_PWM_Start+0x210>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d101      	bne.n	8004cc8 <HAL_TIM_PWM_Start+0x14c>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e000      	b.n	8004cca <HAL_TIM_PWM_Start+0x14e>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d007      	beq.n	8004cde <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a25      	ldr	r2, [pc, #148]	@ (8004d78 <HAL_TIM_PWM_Start+0x1fc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d022      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x1b2>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf0:	d01d      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x1b2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a26      	ldr	r2, [pc, #152]	@ (8004d90 <HAL_TIM_PWM_Start+0x214>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d018      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x1b2>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a24      	ldr	r2, [pc, #144]	@ (8004d94 <HAL_TIM_PWM_Start+0x218>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x1b2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a23      	ldr	r2, [pc, #140]	@ (8004d98 <HAL_TIM_PWM_Start+0x21c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00e      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x1b2>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a19      	ldr	r2, [pc, #100]	@ (8004d7c <HAL_TIM_PWM_Start+0x200>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d009      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x1b2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a18      	ldr	r2, [pc, #96]	@ (8004d80 <HAL_TIM_PWM_Start+0x204>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d004      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x1b2>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a18      	ldr	r2, [pc, #96]	@ (8004d8c <HAL_TIM_PWM_Start+0x210>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d115      	bne.n	8004d5a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	4b19      	ldr	r3, [pc, #100]	@ (8004d9c <HAL_TIM_PWM_Start+0x220>)
 8004d36:	4013      	ands	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b06      	cmp	r3, #6
 8004d3e:	d015      	beq.n	8004d6c <HAL_TIM_PWM_Start+0x1f0>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d46:	d011      	beq.n	8004d6c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d58:	e008      	b.n	8004d6c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f042 0201 	orr.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	e000      	b.n	8004d6e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40012c00 	.word	0x40012c00
 8004d7c:	40013400 	.word	0x40013400
 8004d80:	40014000 	.word	0x40014000
 8004d84:	40014400 	.word	0x40014400
 8004d88:	40014800 	.word	0x40014800
 8004d8c:	40015000 	.word	0x40015000
 8004d90:	40000400 	.word	0x40000400
 8004d94:	40000800 	.word	0x40000800
 8004d98:	40000c00 	.word	0x40000c00
 8004d9c:	00010007 	.word	0x00010007

08004da0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e097      	b.n	8004ee4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d106      	bne.n	8004dce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7fc fdcb 	bl	8001964 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6812      	ldr	r2, [r2, #0]
 8004de0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004de4:	f023 0307 	bic.w	r3, r3, #7
 8004de8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3304      	adds	r3, #4
 8004df2:	4619      	mov	r1, r3
 8004df4:	4610      	mov	r0, r2
 8004df6:	f000 fd4f 	bl	8005898 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e22:	f023 0303 	bic.w	r3, r3, #3
 8004e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	021b      	lsls	r3, r3, #8
 8004e32:	4313      	orrs	r3, r2
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004e40:	f023 030c 	bic.w	r3, r3, #12
 8004e44:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	021b      	lsls	r3, r3, #8
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	011a      	lsls	r2, r3, #4
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	031b      	lsls	r3, r3, #12
 8004e70:	4313      	orrs	r3, r2
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004e7e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004e86:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	4313      	orrs	r3, r2
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004efc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f04:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f0c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f14:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d110      	bne.n	8004f3e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d102      	bne.n	8004f28 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f22:	7b7b      	ldrb	r3, [r7, #13]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d001      	beq.n	8004f2c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e069      	b.n	8005000 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f3c:	e031      	b.n	8004fa2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	d110      	bne.n	8004f66 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f44:	7bbb      	ldrb	r3, [r7, #14]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d102      	bne.n	8004f50 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f4a:	7b3b      	ldrb	r3, [r7, #12]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d001      	beq.n	8004f54 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e055      	b.n	8005000 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f64:	e01d      	b.n	8004fa2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f66:	7bfb      	ldrb	r3, [r7, #15]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d108      	bne.n	8004f7e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f6c:	7bbb      	ldrb	r3, [r7, #14]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d105      	bne.n	8004f7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f72:	7b7b      	ldrb	r3, [r7, #13]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d102      	bne.n	8004f7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f78:	7b3b      	ldrb	r3, [r7, #12]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d001      	beq.n	8004f82 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e03e      	b.n	8005000 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2202      	movs	r2, #2
 8004f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2202      	movs	r2, #2
 8004f96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_TIM_Encoder_Start+0xc4>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d008      	beq.n	8004fc0 <HAL_TIM_Encoder_Start+0xd4>
 8004fae:	e00f      	b.n	8004fd0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f001 f8e7 	bl	800618c <TIM_CCxChannelCmd>
      break;
 8004fbe:	e016      	b.n	8004fee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	2104      	movs	r1, #4
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f001 f8df 	bl	800618c <TIM_CCxChannelCmd>
      break;
 8004fce:	e00e      	b.n	8004fee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f001 f8d7 	bl	800618c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	2104      	movs	r1, #4
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f001 f8d0 	bl	800618c <TIM_CCxChannelCmd>
      break;
 8004fec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f042 0201 	orr.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_TIM_Encoder_Stop+0x18>
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	2b04      	cmp	r3, #4
 800501c:	d008      	beq.n	8005030 <HAL_TIM_Encoder_Stop+0x28>
 800501e:	e00f      	b.n	8005040 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2200      	movs	r2, #0
 8005026:	2100      	movs	r1, #0
 8005028:	4618      	mov	r0, r3
 800502a:	f001 f8af 	bl	800618c <TIM_CCxChannelCmd>
      break;
 800502e:	e016      	b.n	800505e <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2200      	movs	r2, #0
 8005036:	2104      	movs	r1, #4
 8005038:	4618      	mov	r0, r3
 800503a:	f001 f8a7 	bl	800618c <TIM_CCxChannelCmd>
      break;
 800503e:	e00e      	b.n	800505e <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2200      	movs	r2, #0
 8005046:	2100      	movs	r1, #0
 8005048:	4618      	mov	r0, r3
 800504a:	f001 f89f 	bl	800618c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2200      	movs	r2, #0
 8005054:	2104      	movs	r1, #4
 8005056:	4618      	mov	r0, r3
 8005058:	f001 f898 	bl	800618c <TIM_CCxChannelCmd>
      break;
 800505c:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6a1a      	ldr	r2, [r3, #32]
 8005064:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005068:	4013      	ands	r3, r2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10f      	bne.n	800508e <HAL_TIM_Encoder_Stop+0x86>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6a1a      	ldr	r2, [r3, #32]
 8005074:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005078:	4013      	ands	r3, r2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d107      	bne.n	800508e <HAL_TIM_Encoder_Stop+0x86>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0201 	bic.w	r2, r2, #1
 800508c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <HAL_TIM_Encoder_Stop+0x92>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b04      	cmp	r3, #4
 8005098:	d148      	bne.n	800512c <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d104      	bne.n	80050aa <HAL_TIM_Encoder_Stop+0xa2>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050a8:	e023      	b.n	80050f2 <HAL_TIM_Encoder_Stop+0xea>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d104      	bne.n	80050ba <HAL_TIM_Encoder_Stop+0xb2>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050b8:	e01b      	b.n	80050f2 <HAL_TIM_Encoder_Stop+0xea>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d104      	bne.n	80050ca <HAL_TIM_Encoder_Stop+0xc2>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050c8:	e013      	b.n	80050f2 <HAL_TIM_Encoder_Stop+0xea>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b0c      	cmp	r3, #12
 80050ce:	d104      	bne.n	80050da <HAL_TIM_Encoder_Stop+0xd2>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050d8:	e00b      	b.n	80050f2 <HAL_TIM_Encoder_Stop+0xea>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b10      	cmp	r3, #16
 80050de:	d104      	bne.n	80050ea <HAL_TIM_Encoder_Stop+0xe2>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050e8:	e003      	b.n	80050f2 <HAL_TIM_Encoder_Stop+0xea>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d104      	bne.n	8005102 <HAL_TIM_Encoder_Stop+0xfa>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005100:	e024      	b.n	800514c <HAL_TIM_Encoder_Stop+0x144>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b04      	cmp	r3, #4
 8005106:	d104      	bne.n	8005112 <HAL_TIM_Encoder_Stop+0x10a>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005110:	e01c      	b.n	800514c <HAL_TIM_Encoder_Stop+0x144>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b08      	cmp	r3, #8
 8005116:	d104      	bne.n	8005122 <HAL_TIM_Encoder_Stop+0x11a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005120:	e014      	b.n	800514c <HAL_TIM_Encoder_Stop+0x144>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 800512a:	e00f      	b.n	800514c <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d020      	beq.n	80051ba <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d01b      	beq.n	80051ba <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f06f 0202 	mvn.w	r2, #2
 800518a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	f003 0303 	and.w	r3, r3, #3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fb5b 	bl	800585c <HAL_TIM_IC_CaptureCallback>
 80051a6:	e005      	b.n	80051b4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fb4d 	bl	8005848 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fb5e 	bl	8005870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d01b      	beq.n	8005206 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f06f 0204 	mvn.w	r2, #4
 80051d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fb35 	bl	800585c <HAL_TIM_IC_CaptureCallback>
 80051f2:	e005      	b.n	8005200 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 fb27 	bl	8005848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fb38 	bl	8005870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f003 0308 	and.w	r3, r3, #8
 800520c:	2b00      	cmp	r3, #0
 800520e:	d020      	beq.n	8005252 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d01b      	beq.n	8005252 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f06f 0208 	mvn.w	r2, #8
 8005222:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2204      	movs	r2, #4
 8005228:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fb0f 	bl	800585c <HAL_TIM_IC_CaptureCallback>
 800523e:	e005      	b.n	800524c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fb01 	bl	8005848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fb12 	bl	8005870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b00      	cmp	r3, #0
 800525a:	d020      	beq.n	800529e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f003 0310 	and.w	r3, r3, #16
 8005262:	2b00      	cmp	r3, #0
 8005264:	d01b      	beq.n	800529e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f06f 0210 	mvn.w	r2, #16
 800526e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2208      	movs	r2, #8
 8005274:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fae9 	bl	800585c <HAL_TIM_IC_CaptureCallback>
 800528a:	e005      	b.n	8005298 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fadb 	bl	8005848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 faec 	bl	8005870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00c      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d007      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f06f 0201 	mvn.w	r2, #1
 80052ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7fc f9f7 	bl	80016b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d104      	bne.n	80052d6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00c      	beq.n	80052f0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d007      	beq.n	80052f0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80052e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f001 f8a8 	bl	8006440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00c      	beq.n	8005314 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005300:	2b00      	cmp	r3, #0
 8005302:	d007      	beq.n	8005314 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800530c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f001 f8a0 	bl	8006454 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00c      	beq.n	8005338 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005324:	2b00      	cmp	r3, #0
 8005326:	d007      	beq.n	8005338 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 faa6 	bl	8005884 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00c      	beq.n	800535c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	d007      	beq.n	800535c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0220 	mvn.w	r2, #32
 8005354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f001 f868 	bl	800642c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00c      	beq.n	8005380 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d007      	beq.n	8005380 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f001 f874 	bl	8006468 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00c      	beq.n	80053a4 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d007      	beq.n	80053a4 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800539c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f001 f86c 	bl	800647c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00c      	beq.n	80053c8 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d007      	beq.n	80053c8 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80053c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f001 f864 	bl	8006490 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00c      	beq.n	80053ec <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d007      	beq.n	80053ec <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80053e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f001 f85c 	bl	80064a4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053ec:	bf00      	nop
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800540e:	2302      	movs	r3, #2
 8005410:	e0ff      	b.n	8005612 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b14      	cmp	r3, #20
 800541e:	f200 80f0 	bhi.w	8005602 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005422:	a201      	add	r2, pc, #4	@ (adr r2, 8005428 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005428:	0800547d 	.word	0x0800547d
 800542c:	08005603 	.word	0x08005603
 8005430:	08005603 	.word	0x08005603
 8005434:	08005603 	.word	0x08005603
 8005438:	080054bd 	.word	0x080054bd
 800543c:	08005603 	.word	0x08005603
 8005440:	08005603 	.word	0x08005603
 8005444:	08005603 	.word	0x08005603
 8005448:	080054ff 	.word	0x080054ff
 800544c:	08005603 	.word	0x08005603
 8005450:	08005603 	.word	0x08005603
 8005454:	08005603 	.word	0x08005603
 8005458:	0800553f 	.word	0x0800553f
 800545c:	08005603 	.word	0x08005603
 8005460:	08005603 	.word	0x08005603
 8005464:	08005603 	.word	0x08005603
 8005468:	08005581 	.word	0x08005581
 800546c:	08005603 	.word	0x08005603
 8005470:	08005603 	.word	0x08005603
 8005474:	08005603 	.word	0x08005603
 8005478:	080055c1 	.word	0x080055c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fabc 	bl	8005a00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699a      	ldr	r2, [r3, #24]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0208 	orr.w	r2, r2, #8
 8005496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0204 	bic.w	r2, r2, #4
 80054a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6999      	ldr	r1, [r3, #24]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	691a      	ldr	r2, [r3, #16]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	619a      	str	r2, [r3, #24]
      break;
 80054ba:	e0a5      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fb36 	bl	8005b34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6999      	ldr	r1, [r3, #24]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	021a      	lsls	r2, r3, #8
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	619a      	str	r2, [r3, #24]
      break;
 80054fc:	e084      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68b9      	ldr	r1, [r7, #8]
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fba9 	bl	8005c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69da      	ldr	r2, [r3, #28]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f042 0208 	orr.w	r2, r2, #8
 8005518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69da      	ldr	r2, [r3, #28]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0204 	bic.w	r2, r2, #4
 8005528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69d9      	ldr	r1, [r3, #28]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	691a      	ldr	r2, [r3, #16]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	61da      	str	r2, [r3, #28]
      break;
 800553c:	e064      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fc1b 	bl	8005d80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69da      	ldr	r2, [r3, #28]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69d9      	ldr	r1, [r3, #28]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	021a      	lsls	r2, r3, #8
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	61da      	str	r2, [r3, #28]
      break;
 800557e:	e043      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fc8e 	bl	8005ea8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0208 	orr.w	r2, r2, #8
 800559a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0204 	bic.w	r2, r2, #4
 80055aa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	691a      	ldr	r2, [r3, #16]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80055be:	e023      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fcd8 	bl	8005f7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	021a      	lsls	r2, r3, #8
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005600:	e002      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	75fb      	strb	r3, [r7, #23]
      break;
 8005606:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005610:	7dfb      	ldrb	r3, [r7, #23]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop

0800561c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_TIM_ConfigClockSource+0x1c>
 8005634:	2302      	movs	r3, #2
 8005636:	e0f6      	b.n	8005826 <HAL_TIM_ConfigClockSource+0x20a>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005656:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800565a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005662:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a6f      	ldr	r2, [pc, #444]	@ (8005830 <HAL_TIM_ConfigClockSource+0x214>)
 8005672:	4293      	cmp	r3, r2
 8005674:	f000 80c1 	beq.w	80057fa <HAL_TIM_ConfigClockSource+0x1de>
 8005678:	4a6d      	ldr	r2, [pc, #436]	@ (8005830 <HAL_TIM_ConfigClockSource+0x214>)
 800567a:	4293      	cmp	r3, r2
 800567c:	f200 80c6 	bhi.w	800580c <HAL_TIM_ConfigClockSource+0x1f0>
 8005680:	4a6c      	ldr	r2, [pc, #432]	@ (8005834 <HAL_TIM_ConfigClockSource+0x218>)
 8005682:	4293      	cmp	r3, r2
 8005684:	f000 80b9 	beq.w	80057fa <HAL_TIM_ConfigClockSource+0x1de>
 8005688:	4a6a      	ldr	r2, [pc, #424]	@ (8005834 <HAL_TIM_ConfigClockSource+0x218>)
 800568a:	4293      	cmp	r3, r2
 800568c:	f200 80be 	bhi.w	800580c <HAL_TIM_ConfigClockSource+0x1f0>
 8005690:	4a69      	ldr	r2, [pc, #420]	@ (8005838 <HAL_TIM_ConfigClockSource+0x21c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	f000 80b1 	beq.w	80057fa <HAL_TIM_ConfigClockSource+0x1de>
 8005698:	4a67      	ldr	r2, [pc, #412]	@ (8005838 <HAL_TIM_ConfigClockSource+0x21c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	f200 80b6 	bhi.w	800580c <HAL_TIM_ConfigClockSource+0x1f0>
 80056a0:	4a66      	ldr	r2, [pc, #408]	@ (800583c <HAL_TIM_ConfigClockSource+0x220>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	f000 80a9 	beq.w	80057fa <HAL_TIM_ConfigClockSource+0x1de>
 80056a8:	4a64      	ldr	r2, [pc, #400]	@ (800583c <HAL_TIM_ConfigClockSource+0x220>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	f200 80ae 	bhi.w	800580c <HAL_TIM_ConfigClockSource+0x1f0>
 80056b0:	4a63      	ldr	r2, [pc, #396]	@ (8005840 <HAL_TIM_ConfigClockSource+0x224>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	f000 80a1 	beq.w	80057fa <HAL_TIM_ConfigClockSource+0x1de>
 80056b8:	4a61      	ldr	r2, [pc, #388]	@ (8005840 <HAL_TIM_ConfigClockSource+0x224>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	f200 80a6 	bhi.w	800580c <HAL_TIM_ConfigClockSource+0x1f0>
 80056c0:	4a60      	ldr	r2, [pc, #384]	@ (8005844 <HAL_TIM_ConfigClockSource+0x228>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	f000 8099 	beq.w	80057fa <HAL_TIM_ConfigClockSource+0x1de>
 80056c8:	4a5e      	ldr	r2, [pc, #376]	@ (8005844 <HAL_TIM_ConfigClockSource+0x228>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	f200 809e 	bhi.w	800580c <HAL_TIM_ConfigClockSource+0x1f0>
 80056d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80056d4:	f000 8091 	beq.w	80057fa <HAL_TIM_ConfigClockSource+0x1de>
 80056d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80056dc:	f200 8096 	bhi.w	800580c <HAL_TIM_ConfigClockSource+0x1f0>
 80056e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056e4:	f000 8089 	beq.w	80057fa <HAL_TIM_ConfigClockSource+0x1de>
 80056e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056ec:	f200 808e 	bhi.w	800580c <HAL_TIM_ConfigClockSource+0x1f0>
 80056f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056f4:	d03e      	beq.n	8005774 <HAL_TIM_ConfigClockSource+0x158>
 80056f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056fa:	f200 8087 	bhi.w	800580c <HAL_TIM_ConfigClockSource+0x1f0>
 80056fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005702:	f000 8086 	beq.w	8005812 <HAL_TIM_ConfigClockSource+0x1f6>
 8005706:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800570a:	d87f      	bhi.n	800580c <HAL_TIM_ConfigClockSource+0x1f0>
 800570c:	2b70      	cmp	r3, #112	@ 0x70
 800570e:	d01a      	beq.n	8005746 <HAL_TIM_ConfigClockSource+0x12a>
 8005710:	2b70      	cmp	r3, #112	@ 0x70
 8005712:	d87b      	bhi.n	800580c <HAL_TIM_ConfigClockSource+0x1f0>
 8005714:	2b60      	cmp	r3, #96	@ 0x60
 8005716:	d050      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x19e>
 8005718:	2b60      	cmp	r3, #96	@ 0x60
 800571a:	d877      	bhi.n	800580c <HAL_TIM_ConfigClockSource+0x1f0>
 800571c:	2b50      	cmp	r3, #80	@ 0x50
 800571e:	d03c      	beq.n	800579a <HAL_TIM_ConfigClockSource+0x17e>
 8005720:	2b50      	cmp	r3, #80	@ 0x50
 8005722:	d873      	bhi.n	800580c <HAL_TIM_ConfigClockSource+0x1f0>
 8005724:	2b40      	cmp	r3, #64	@ 0x40
 8005726:	d058      	beq.n	80057da <HAL_TIM_ConfigClockSource+0x1be>
 8005728:	2b40      	cmp	r3, #64	@ 0x40
 800572a:	d86f      	bhi.n	800580c <HAL_TIM_ConfigClockSource+0x1f0>
 800572c:	2b30      	cmp	r3, #48	@ 0x30
 800572e:	d064      	beq.n	80057fa <HAL_TIM_ConfigClockSource+0x1de>
 8005730:	2b30      	cmp	r3, #48	@ 0x30
 8005732:	d86b      	bhi.n	800580c <HAL_TIM_ConfigClockSource+0x1f0>
 8005734:	2b20      	cmp	r3, #32
 8005736:	d060      	beq.n	80057fa <HAL_TIM_ConfigClockSource+0x1de>
 8005738:	2b20      	cmp	r3, #32
 800573a:	d867      	bhi.n	800580c <HAL_TIM_ConfigClockSource+0x1f0>
 800573c:	2b00      	cmp	r3, #0
 800573e:	d05c      	beq.n	80057fa <HAL_TIM_ConfigClockSource+0x1de>
 8005740:	2b10      	cmp	r3, #16
 8005742:	d05a      	beq.n	80057fa <HAL_TIM_ConfigClockSource+0x1de>
 8005744:	e062      	b.n	800580c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005756:	f000 fcf9 	bl	800614c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005768:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	609a      	str	r2, [r3, #8]
      break;
 8005772:	e04f      	b.n	8005814 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005784:	f000 fce2 	bl	800614c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689a      	ldr	r2, [r3, #8]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005796:	609a      	str	r2, [r3, #8]
      break;
 8005798:	e03c      	b.n	8005814 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057a6:	461a      	mov	r2, r3
 80057a8:	f000 fc54 	bl	8006054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2150      	movs	r1, #80	@ 0x50
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fcad 	bl	8006112 <TIM_ITRx_SetConfig>
      break;
 80057b8:	e02c      	b.n	8005814 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057c6:	461a      	mov	r2, r3
 80057c8:	f000 fc73 	bl	80060b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2160      	movs	r1, #96	@ 0x60
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 fc9d 	bl	8006112 <TIM_ITRx_SetConfig>
      break;
 80057d8:	e01c      	b.n	8005814 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057e6:	461a      	mov	r2, r3
 80057e8:	f000 fc34 	bl	8006054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2140      	movs	r1, #64	@ 0x40
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fc8d 	bl	8006112 <TIM_ITRx_SetConfig>
      break;
 80057f8:	e00c      	b.n	8005814 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4619      	mov	r1, r3
 8005804:	4610      	mov	r0, r2
 8005806:	f000 fc84 	bl	8006112 <TIM_ITRx_SetConfig>
      break;
 800580a:	e003      	b.n	8005814 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	73fb      	strb	r3, [r7, #15]
      break;
 8005810:	e000      	b.n	8005814 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005812:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005824:	7bfb      	ldrb	r3, [r7, #15]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	00100070 	.word	0x00100070
 8005834:	00100060 	.word	0x00100060
 8005838:	00100050 	.word	0x00100050
 800583c:	00100040 	.word	0x00100040
 8005840:	00100030 	.word	0x00100030
 8005844:	00100020 	.word	0x00100020

08005848 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a4c      	ldr	r2, [pc, #304]	@ (80059dc <TIM_Base_SetConfig+0x144>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d017      	beq.n	80058e0 <TIM_Base_SetConfig+0x48>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058b6:	d013      	beq.n	80058e0 <TIM_Base_SetConfig+0x48>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a49      	ldr	r2, [pc, #292]	@ (80059e0 <TIM_Base_SetConfig+0x148>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d00f      	beq.n	80058e0 <TIM_Base_SetConfig+0x48>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a48      	ldr	r2, [pc, #288]	@ (80059e4 <TIM_Base_SetConfig+0x14c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00b      	beq.n	80058e0 <TIM_Base_SetConfig+0x48>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a47      	ldr	r2, [pc, #284]	@ (80059e8 <TIM_Base_SetConfig+0x150>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d007      	beq.n	80058e0 <TIM_Base_SetConfig+0x48>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a46      	ldr	r2, [pc, #280]	@ (80059ec <TIM_Base_SetConfig+0x154>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d003      	beq.n	80058e0 <TIM_Base_SetConfig+0x48>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a45      	ldr	r2, [pc, #276]	@ (80059f0 <TIM_Base_SetConfig+0x158>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d108      	bne.n	80058f2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a39      	ldr	r2, [pc, #228]	@ (80059dc <TIM_Base_SetConfig+0x144>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d023      	beq.n	8005942 <TIM_Base_SetConfig+0xaa>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005900:	d01f      	beq.n	8005942 <TIM_Base_SetConfig+0xaa>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a36      	ldr	r2, [pc, #216]	@ (80059e0 <TIM_Base_SetConfig+0x148>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d01b      	beq.n	8005942 <TIM_Base_SetConfig+0xaa>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a35      	ldr	r2, [pc, #212]	@ (80059e4 <TIM_Base_SetConfig+0x14c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d017      	beq.n	8005942 <TIM_Base_SetConfig+0xaa>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a34      	ldr	r2, [pc, #208]	@ (80059e8 <TIM_Base_SetConfig+0x150>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d013      	beq.n	8005942 <TIM_Base_SetConfig+0xaa>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a33      	ldr	r2, [pc, #204]	@ (80059ec <TIM_Base_SetConfig+0x154>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00f      	beq.n	8005942 <TIM_Base_SetConfig+0xaa>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a33      	ldr	r2, [pc, #204]	@ (80059f4 <TIM_Base_SetConfig+0x15c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00b      	beq.n	8005942 <TIM_Base_SetConfig+0xaa>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a32      	ldr	r2, [pc, #200]	@ (80059f8 <TIM_Base_SetConfig+0x160>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d007      	beq.n	8005942 <TIM_Base_SetConfig+0xaa>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a31      	ldr	r2, [pc, #196]	@ (80059fc <TIM_Base_SetConfig+0x164>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d003      	beq.n	8005942 <TIM_Base_SetConfig+0xaa>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a2c      	ldr	r2, [pc, #176]	@ (80059f0 <TIM_Base_SetConfig+0x158>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d108      	bne.n	8005954 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a18      	ldr	r2, [pc, #96]	@ (80059dc <TIM_Base_SetConfig+0x144>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <TIM_Base_SetConfig+0x110>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a1a      	ldr	r2, [pc, #104]	@ (80059ec <TIM_Base_SetConfig+0x154>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00f      	beq.n	80059a8 <TIM_Base_SetConfig+0x110>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a1a      	ldr	r2, [pc, #104]	@ (80059f4 <TIM_Base_SetConfig+0x15c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00b      	beq.n	80059a8 <TIM_Base_SetConfig+0x110>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a19      	ldr	r2, [pc, #100]	@ (80059f8 <TIM_Base_SetConfig+0x160>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d007      	beq.n	80059a8 <TIM_Base_SetConfig+0x110>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a18      	ldr	r2, [pc, #96]	@ (80059fc <TIM_Base_SetConfig+0x164>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_Base_SetConfig+0x110>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a13      	ldr	r2, [pc, #76]	@ (80059f0 <TIM_Base_SetConfig+0x158>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d103      	bne.n	80059b0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d105      	bne.n	80059ce <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f023 0201 	bic.w	r2, r3, #1
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	611a      	str	r2, [r3, #16]
  }
}
 80059ce:	bf00      	nop
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40000400 	.word	0x40000400
 80059e4:	40000800 	.word	0x40000800
 80059e8:	40000c00 	.word	0x40000c00
 80059ec:	40013400 	.word	0x40013400
 80059f0:	40015000 	.word	0x40015000
 80059f4:	40014000 	.word	0x40014000
 80059f8:	40014400 	.word	0x40014400
 80059fc:	40014800 	.word	0x40014800

08005a00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	f023 0201 	bic.w	r2, r3, #1
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0303 	bic.w	r3, r3, #3
 8005a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f023 0302 	bic.w	r3, r3, #2
 8005a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a30      	ldr	r2, [pc, #192]	@ (8005b1c <TIM_OC1_SetConfig+0x11c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d013      	beq.n	8005a88 <TIM_OC1_SetConfig+0x88>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a2f      	ldr	r2, [pc, #188]	@ (8005b20 <TIM_OC1_SetConfig+0x120>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00f      	beq.n	8005a88 <TIM_OC1_SetConfig+0x88>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a2e      	ldr	r2, [pc, #184]	@ (8005b24 <TIM_OC1_SetConfig+0x124>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d00b      	beq.n	8005a88 <TIM_OC1_SetConfig+0x88>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a2d      	ldr	r2, [pc, #180]	@ (8005b28 <TIM_OC1_SetConfig+0x128>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d007      	beq.n	8005a88 <TIM_OC1_SetConfig+0x88>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a2c      	ldr	r2, [pc, #176]	@ (8005b2c <TIM_OC1_SetConfig+0x12c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <TIM_OC1_SetConfig+0x88>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a2b      	ldr	r2, [pc, #172]	@ (8005b30 <TIM_OC1_SetConfig+0x130>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d10c      	bne.n	8005aa2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f023 0308 	bic.w	r3, r3, #8
 8005a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f023 0304 	bic.w	r3, r3, #4
 8005aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b1c <TIM_OC1_SetConfig+0x11c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <TIM_OC1_SetConfig+0xd2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a1c      	ldr	r2, [pc, #112]	@ (8005b20 <TIM_OC1_SetConfig+0x120>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00f      	beq.n	8005ad2 <TIM_OC1_SetConfig+0xd2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b24 <TIM_OC1_SetConfig+0x124>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00b      	beq.n	8005ad2 <TIM_OC1_SetConfig+0xd2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a1a      	ldr	r2, [pc, #104]	@ (8005b28 <TIM_OC1_SetConfig+0x128>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d007      	beq.n	8005ad2 <TIM_OC1_SetConfig+0xd2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a19      	ldr	r2, [pc, #100]	@ (8005b2c <TIM_OC1_SetConfig+0x12c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_OC1_SetConfig+0xd2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a18      	ldr	r2, [pc, #96]	@ (8005b30 <TIM_OC1_SetConfig+0x130>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d111      	bne.n	8005af6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	621a      	str	r2, [r3, #32]
}
 8005b10:	bf00      	nop
 8005b12:	371c      	adds	r7, #28
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	40012c00 	.word	0x40012c00
 8005b20:	40013400 	.word	0x40013400
 8005b24:	40014000 	.word	0x40014000
 8005b28:	40014400 	.word	0x40014400
 8005b2c:	40014800 	.word	0x40014800
 8005b30:	40015000 	.word	0x40015000

08005b34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	f023 0210 	bic.w	r2, r3, #16
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	021b      	lsls	r3, r3, #8
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f023 0320 	bic.w	r3, r3, #32
 8005b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a2c      	ldr	r2, [pc, #176]	@ (8005c44 <TIM_OC2_SetConfig+0x110>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d007      	beq.n	8005ba8 <TIM_OC2_SetConfig+0x74>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a2b      	ldr	r2, [pc, #172]	@ (8005c48 <TIM_OC2_SetConfig+0x114>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_OC2_SetConfig+0x74>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a2a      	ldr	r2, [pc, #168]	@ (8005c4c <TIM_OC2_SetConfig+0x118>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d10d      	bne.n	8005bc4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8005c44 <TIM_OC2_SetConfig+0x110>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d013      	beq.n	8005bf4 <TIM_OC2_SetConfig+0xc0>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a1e      	ldr	r2, [pc, #120]	@ (8005c48 <TIM_OC2_SetConfig+0x114>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d00f      	beq.n	8005bf4 <TIM_OC2_SetConfig+0xc0>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8005c50 <TIM_OC2_SetConfig+0x11c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00b      	beq.n	8005bf4 <TIM_OC2_SetConfig+0xc0>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a1d      	ldr	r2, [pc, #116]	@ (8005c54 <TIM_OC2_SetConfig+0x120>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d007      	beq.n	8005bf4 <TIM_OC2_SetConfig+0xc0>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a1c      	ldr	r2, [pc, #112]	@ (8005c58 <TIM_OC2_SetConfig+0x124>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d003      	beq.n	8005bf4 <TIM_OC2_SetConfig+0xc0>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a17      	ldr	r2, [pc, #92]	@ (8005c4c <TIM_OC2_SetConfig+0x118>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d113      	bne.n	8005c1c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	621a      	str	r2, [r3, #32]
}
 8005c36:	bf00      	nop
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40012c00 	.word	0x40012c00
 8005c48:	40013400 	.word	0x40013400
 8005c4c:	40015000 	.word	0x40015000
 8005c50:	40014000 	.word	0x40014000
 8005c54:	40014400 	.word	0x40014400
 8005c58:	40014800 	.word	0x40014800

08005c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0303 	bic.w	r3, r3, #3
 8005c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	021b      	lsls	r3, r3, #8
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a2b      	ldr	r2, [pc, #172]	@ (8005d68 <TIM_OC3_SetConfig+0x10c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d007      	beq.n	8005cce <TIM_OC3_SetConfig+0x72>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a2a      	ldr	r2, [pc, #168]	@ (8005d6c <TIM_OC3_SetConfig+0x110>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d003      	beq.n	8005cce <TIM_OC3_SetConfig+0x72>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a29      	ldr	r2, [pc, #164]	@ (8005d70 <TIM_OC3_SetConfig+0x114>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d10d      	bne.n	8005cea <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a1e      	ldr	r2, [pc, #120]	@ (8005d68 <TIM_OC3_SetConfig+0x10c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d013      	beq.n	8005d1a <TIM_OC3_SetConfig+0xbe>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d6c <TIM_OC3_SetConfig+0x110>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00f      	beq.n	8005d1a <TIM_OC3_SetConfig+0xbe>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8005d74 <TIM_OC3_SetConfig+0x118>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d00b      	beq.n	8005d1a <TIM_OC3_SetConfig+0xbe>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a1c      	ldr	r2, [pc, #112]	@ (8005d78 <TIM_OC3_SetConfig+0x11c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d007      	beq.n	8005d1a <TIM_OC3_SetConfig+0xbe>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005d7c <TIM_OC3_SetConfig+0x120>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d003      	beq.n	8005d1a <TIM_OC3_SetConfig+0xbe>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a16      	ldr	r2, [pc, #88]	@ (8005d70 <TIM_OC3_SetConfig+0x114>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d113      	bne.n	8005d42 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	621a      	str	r2, [r3, #32]
}
 8005d5c:	bf00      	nop
 8005d5e:	371c      	adds	r7, #28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	40012c00 	.word	0x40012c00
 8005d6c:	40013400 	.word	0x40013400
 8005d70:	40015000 	.word	0x40015000
 8005d74:	40014000 	.word	0x40014000
 8005d78:	40014400 	.word	0x40014400
 8005d7c:	40014800 	.word	0x40014800

08005d80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	021b      	lsls	r3, r3, #8
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	031b      	lsls	r3, r3, #12
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a2c      	ldr	r2, [pc, #176]	@ (8005e90 <TIM_OC4_SetConfig+0x110>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d007      	beq.n	8005df4 <TIM_OC4_SetConfig+0x74>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a2b      	ldr	r2, [pc, #172]	@ (8005e94 <TIM_OC4_SetConfig+0x114>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d003      	beq.n	8005df4 <TIM_OC4_SetConfig+0x74>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a2a      	ldr	r2, [pc, #168]	@ (8005e98 <TIM_OC4_SetConfig+0x118>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d10d      	bne.n	8005e10 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	031b      	lsls	r3, r3, #12
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a1f      	ldr	r2, [pc, #124]	@ (8005e90 <TIM_OC4_SetConfig+0x110>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d013      	beq.n	8005e40 <TIM_OC4_SetConfig+0xc0>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8005e94 <TIM_OC4_SetConfig+0x114>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d00f      	beq.n	8005e40 <TIM_OC4_SetConfig+0xc0>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a1e      	ldr	r2, [pc, #120]	@ (8005e9c <TIM_OC4_SetConfig+0x11c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d00b      	beq.n	8005e40 <TIM_OC4_SetConfig+0xc0>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8005ea0 <TIM_OC4_SetConfig+0x120>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d007      	beq.n	8005e40 <TIM_OC4_SetConfig+0xc0>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea4 <TIM_OC4_SetConfig+0x124>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d003      	beq.n	8005e40 <TIM_OC4_SetConfig+0xc0>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a17      	ldr	r2, [pc, #92]	@ (8005e98 <TIM_OC4_SetConfig+0x118>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d113      	bne.n	8005e68 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e46:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e4e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	019b      	lsls	r3, r3, #6
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	019b      	lsls	r3, r3, #6
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	621a      	str	r2, [r3, #32]
}
 8005e82:	bf00      	nop
 8005e84:	371c      	adds	r7, #28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40012c00 	.word	0x40012c00
 8005e94:	40013400 	.word	0x40013400
 8005e98:	40015000 	.word	0x40015000
 8005e9c:	40014000 	.word	0x40014000
 8005ea0:	40014400 	.word	0x40014400
 8005ea4:	40014800 	.word	0x40014800

08005ea8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005eec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	041b      	lsls	r3, r3, #16
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a19      	ldr	r2, [pc, #100]	@ (8005f64 <TIM_OC5_SetConfig+0xbc>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d013      	beq.n	8005f2a <TIM_OC5_SetConfig+0x82>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a18      	ldr	r2, [pc, #96]	@ (8005f68 <TIM_OC5_SetConfig+0xc0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d00f      	beq.n	8005f2a <TIM_OC5_SetConfig+0x82>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a17      	ldr	r2, [pc, #92]	@ (8005f6c <TIM_OC5_SetConfig+0xc4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00b      	beq.n	8005f2a <TIM_OC5_SetConfig+0x82>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a16      	ldr	r2, [pc, #88]	@ (8005f70 <TIM_OC5_SetConfig+0xc8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d007      	beq.n	8005f2a <TIM_OC5_SetConfig+0x82>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a15      	ldr	r2, [pc, #84]	@ (8005f74 <TIM_OC5_SetConfig+0xcc>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d003      	beq.n	8005f2a <TIM_OC5_SetConfig+0x82>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a14      	ldr	r2, [pc, #80]	@ (8005f78 <TIM_OC5_SetConfig+0xd0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d109      	bne.n	8005f3e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	021b      	lsls	r3, r3, #8
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	621a      	str	r2, [r3, #32]
}
 8005f58:	bf00      	nop
 8005f5a:	371c      	adds	r7, #28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	40012c00 	.word	0x40012c00
 8005f68:	40013400 	.word	0x40013400
 8005f6c:	40014000 	.word	0x40014000
 8005f70:	40014400 	.word	0x40014400
 8005f74:	40014800 	.word	0x40014800
 8005f78:	40015000 	.word	0x40015000

08005f7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	021b      	lsls	r3, r3, #8
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005fc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	051b      	lsls	r3, r3, #20
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800603c <TIM_OC6_SetConfig+0xc0>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d013      	beq.n	8006000 <TIM_OC6_SetConfig+0x84>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a19      	ldr	r2, [pc, #100]	@ (8006040 <TIM_OC6_SetConfig+0xc4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00f      	beq.n	8006000 <TIM_OC6_SetConfig+0x84>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a18      	ldr	r2, [pc, #96]	@ (8006044 <TIM_OC6_SetConfig+0xc8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00b      	beq.n	8006000 <TIM_OC6_SetConfig+0x84>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a17      	ldr	r2, [pc, #92]	@ (8006048 <TIM_OC6_SetConfig+0xcc>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d007      	beq.n	8006000 <TIM_OC6_SetConfig+0x84>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a16      	ldr	r2, [pc, #88]	@ (800604c <TIM_OC6_SetConfig+0xd0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d003      	beq.n	8006000 <TIM_OC6_SetConfig+0x84>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a15      	ldr	r2, [pc, #84]	@ (8006050 <TIM_OC6_SetConfig+0xd4>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d109      	bne.n	8006014 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006006:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	029b      	lsls	r3, r3, #10
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	621a      	str	r2, [r3, #32]
}
 800602e:	bf00      	nop
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40012c00 	.word	0x40012c00
 8006040:	40013400 	.word	0x40013400
 8006044:	40014000 	.word	0x40014000
 8006048:	40014400 	.word	0x40014400
 800604c:	40014800 	.word	0x40014800
 8006050:	40015000 	.word	0x40015000

08006054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	f023 0201 	bic.w	r2, r3, #1
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800607e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4313      	orrs	r3, r2
 8006088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f023 030a 	bic.w	r3, r3, #10
 8006090:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	4313      	orrs	r3, r2
 8006098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	621a      	str	r2, [r3, #32]
}
 80060a6:	bf00      	nop
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b087      	sub	sp, #28
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	60f8      	str	r0, [r7, #12]
 80060ba:	60b9      	str	r1, [r7, #8]
 80060bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	f023 0210 	bic.w	r2, r3, #16
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	031b      	lsls	r3, r3, #12
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80060ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	621a      	str	r2, [r3, #32]
}
 8006106:	bf00      	nop
 8006108:	371c      	adds	r7, #28
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006112:	b480      	push	{r7}
 8006114:	b085      	sub	sp, #20
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800612c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4313      	orrs	r3, r2
 8006134:	f043 0307 	orr.w	r3, r3, #7
 8006138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	609a      	str	r2, [r3, #8]
}
 8006140:	bf00      	nop
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	021a      	lsls	r2, r3, #8
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	431a      	orrs	r2, r3
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4313      	orrs	r3, r2
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	4313      	orrs	r3, r2
 8006178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	609a      	str	r2, [r3, #8]
}
 8006180:	bf00      	nop
 8006182:	371c      	adds	r7, #28
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	2201      	movs	r2, #1
 80061a0:	fa02 f303 	lsl.w	r3, r2, r3
 80061a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a1a      	ldr	r2, [r3, #32]
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	43db      	mvns	r3, r3
 80061ae:	401a      	ands	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a1a      	ldr	r2, [r3, #32]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f003 031f 	and.w	r3, r3, #31
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	fa01 f303 	lsl.w	r3, r1, r3
 80061c4:	431a      	orrs	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	621a      	str	r2, [r3, #32]
}
 80061ca:	bf00      	nop
 80061cc:	371c      	adds	r7, #28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
	...

080061d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d101      	bne.n	80061f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061ec:	2302      	movs	r3, #2
 80061ee:	e074      	b.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a34      	ldr	r2, [pc, #208]	@ (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d009      	beq.n	800622e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a33      	ldr	r2, [pc, #204]	@ (80062ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d004      	beq.n	800622e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a31      	ldr	r2, [pc, #196]	@ (80062f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d108      	bne.n	8006240 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006234:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4313      	orrs	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800624a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a21      	ldr	r2, [pc, #132]	@ (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d022      	beq.n	80062ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006270:	d01d      	beq.n	80062ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a1f      	ldr	r2, [pc, #124]	@ (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d018      	beq.n	80062ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a1d      	ldr	r2, [pc, #116]	@ (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d013      	beq.n	80062ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a1c      	ldr	r2, [pc, #112]	@ (80062fc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d00e      	beq.n	80062ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a15      	ldr	r2, [pc, #84]	@ (80062ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d009      	beq.n	80062ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a18      	ldr	r2, [pc, #96]	@ (8006300 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d004      	beq.n	80062ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a11      	ldr	r2, [pc, #68]	@ (80062f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d10c      	bne.n	80062c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	4313      	orrs	r3, r2
 80062be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40012c00 	.word	0x40012c00
 80062ec:	40013400 	.word	0x40013400
 80062f0:	40015000 	.word	0x40015000
 80062f4:	40000400 	.word	0x40000400
 80062f8:	40000800 	.word	0x40000800
 80062fc:	40000c00 	.word	0x40000c00
 8006300:	40014000 	.word	0x40014000

08006304 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800631c:	2302      	movs	r3, #2
 800631e:	e078      	b.n	8006412 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4313      	orrs	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	4313      	orrs	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006386:	4313      	orrs	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	041b      	lsls	r3, r3, #16
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a1c      	ldr	r2, [pc, #112]	@ (8006420 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d009      	beq.n	80063c6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006424 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d004      	beq.n	80063c6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a19      	ldr	r2, [pc, #100]	@ (8006428 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d11c      	bne.n	8006400 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d0:	051b      	lsls	r3, r3, #20
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fc:	4313      	orrs	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40012c00 	.word	0x40012c00
 8006424:	40013400 	.word	0x40013400
 8006428:	40015000 	.word	0x40015000

0800642c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	ed93 7a06 	vldr	s14, [r3, #24]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80064ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80064d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80064e8:	eeb1 7a67 	vneg.f32	s14, s15
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	edd3 7a08 	vldr	s15, [r3, #32]
 80064f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80064f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a1a      	ldr	r2, [r3, #32]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d006      	beq.n	800651c <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	330c      	adds	r3, #12
 8006512:	220c      	movs	r2, #12
 8006514:	2100      	movs	r1, #0
 8006516:	4618      	mov	r0, r3
 8006518:	f000 f804 	bl	8006524 <memset>
  }

}
 800651c:	bf00      	nop
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <memset>:
 8006524:	4402      	add	r2, r0
 8006526:	4603      	mov	r3, r0
 8006528:	4293      	cmp	r3, r2
 800652a:	d100      	bne.n	800652e <memset+0xa>
 800652c:	4770      	bx	lr
 800652e:	f803 1b01 	strb.w	r1, [r3], #1
 8006532:	e7f9      	b.n	8006528 <memset+0x4>

08006534 <__libc_init_array>:
 8006534:	b570      	push	{r4, r5, r6, lr}
 8006536:	4d0d      	ldr	r5, [pc, #52]	@ (800656c <__libc_init_array+0x38>)
 8006538:	4c0d      	ldr	r4, [pc, #52]	@ (8006570 <__libc_init_array+0x3c>)
 800653a:	1b64      	subs	r4, r4, r5
 800653c:	10a4      	asrs	r4, r4, #2
 800653e:	2600      	movs	r6, #0
 8006540:	42a6      	cmp	r6, r4
 8006542:	d109      	bne.n	8006558 <__libc_init_array+0x24>
 8006544:	4d0b      	ldr	r5, [pc, #44]	@ (8006574 <__libc_init_array+0x40>)
 8006546:	4c0c      	ldr	r4, [pc, #48]	@ (8006578 <__libc_init_array+0x44>)
 8006548:	f000 f818 	bl	800657c <_init>
 800654c:	1b64      	subs	r4, r4, r5
 800654e:	10a4      	asrs	r4, r4, #2
 8006550:	2600      	movs	r6, #0
 8006552:	42a6      	cmp	r6, r4
 8006554:	d105      	bne.n	8006562 <__libc_init_array+0x2e>
 8006556:	bd70      	pop	{r4, r5, r6, pc}
 8006558:	f855 3b04 	ldr.w	r3, [r5], #4
 800655c:	4798      	blx	r3
 800655e:	3601      	adds	r6, #1
 8006560:	e7ee      	b.n	8006540 <__libc_init_array+0xc>
 8006562:	f855 3b04 	ldr.w	r3, [r5], #4
 8006566:	4798      	blx	r3
 8006568:	3601      	adds	r6, #1
 800656a:	e7f2      	b.n	8006552 <__libc_init_array+0x1e>
 800656c:	080065a4 	.word	0x080065a4
 8006570:	080065a4 	.word	0x080065a4
 8006574:	080065a4 	.word	0x080065a4
 8006578:	080065a8 	.word	0x080065a8

0800657c <_init>:
 800657c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657e:	bf00      	nop
 8006580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006582:	bc08      	pop	{r3}
 8006584:	469e      	mov	lr, r3
 8006586:	4770      	bx	lr

08006588 <_fini>:
 8006588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658a:	bf00      	nop
 800658c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800658e:	bc08      	pop	{r3}
 8006590:	469e      	mov	lr, r3
 8006592:	4770      	bx	lr
