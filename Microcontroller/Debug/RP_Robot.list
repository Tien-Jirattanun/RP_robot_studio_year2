
RP_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e34  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800600c  0800600c  0000700c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800601c  0800601c  00008014  2**0
                  CONTENTS
  4 .ARM          00000000  0800601c  0800601c  00008014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800601c  0800601c  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800601c  0800601c  0000701c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006020  08006020  00007020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006024  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000018  08006038  00008018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08006038  000082d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120f2  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002718  00000000  00000000  0001a136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  0001c850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e0e  00000000  00000000  0001da88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282dd  00000000  00000000  0001e896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bd7  00000000  00000000  00046b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e615  00000000  00000000  0005a74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168d5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f00  00000000  00000000  00168da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0016dca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005ff4 	.word	0x08005ff4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	08005ff4 	.word	0x08005ff4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_d2iz>:
 8000590:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000594:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000598:	d215      	bcs.n	80005c6 <__aeabi_d2iz+0x36>
 800059a:	d511      	bpl.n	80005c0 <__aeabi_d2iz+0x30>
 800059c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80005a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005a4:	d912      	bls.n	80005cc <__aeabi_d2iz+0x3c>
 80005a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80005ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80005b2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80005b6:	fa23 f002 	lsr.w	r0, r3, r2
 80005ba:	bf18      	it	ne
 80005bc:	4240      	negne	r0, r0
 80005be:	4770      	bx	lr
 80005c0:	f04f 0000 	mov.w	r0, #0
 80005c4:	4770      	bx	lr
 80005c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80005ca:	d105      	bne.n	80005d8 <__aeabi_d2iz+0x48>
 80005cc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80005d0:	bf08      	it	eq
 80005d2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80005d6:	4770      	bx	lr
 80005d8:	f04f 0000 	mov.w	r0, #0
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <__aeabi_d2f>:
 80005e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80005e8:	bf24      	itt	cs
 80005ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80005ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80005f2:	d90d      	bls.n	8000610 <__aeabi_d2f+0x30>
 80005f4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000600:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000604:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000608:	bf08      	it	eq
 800060a:	f020 0001 	biceq.w	r0, r0, #1
 800060e:	4770      	bx	lr
 8000610:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000614:	d121      	bne.n	800065a <__aeabi_d2f+0x7a>
 8000616:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800061a:	bfbc      	itt	lt
 800061c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000620:	4770      	bxlt	lr
 8000622:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000626:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800062a:	f1c2 0218 	rsb	r2, r2, #24
 800062e:	f1c2 0c20 	rsb	ip, r2, #32
 8000632:	fa10 f30c 	lsls.w	r3, r0, ip
 8000636:	fa20 f002 	lsr.w	r0, r0, r2
 800063a:	bf18      	it	ne
 800063c:	f040 0001 	orrne.w	r0, r0, #1
 8000640:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000644:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000648:	fa03 fc0c 	lsl.w	ip, r3, ip
 800064c:	ea40 000c 	orr.w	r0, r0, ip
 8000650:	fa23 f302 	lsr.w	r3, r3, r2
 8000654:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000658:	e7cc      	b.n	80005f4 <__aeabi_d2f+0x14>
 800065a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800065e:	d107      	bne.n	8000670 <__aeabi_d2f+0x90>
 8000660:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000664:	bf1e      	ittt	ne
 8000666:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800066a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800066e:	4770      	bxne	lr
 8000670:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000674:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000678:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f001 f817 	bl	80016b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f874 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 fb82 	bl	8000d94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000690:	f000 fb56 	bl	8000d40 <MX_DMA_Init>
  MX_TIM1_Init();
 8000694:	f000 f942 	bl	800091c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000698:	f000 fa56 	bl	8000b48 <MX_TIM3_Init>
  MX_TIM4_Init();
 800069c:	f000 faaa 	bl	8000bf4 <MX_TIM4_Init>
  MX_ADC1_Init();
 80006a0:	f000 f8b4 	bl	800080c <MX_ADC1_Init>
  MX_TIM2_Init();
 80006a4:	f000 fa02 	bl	8000aac <MX_TIM2_Init>
  MX_TIM5_Init();
 80006a8:	f000 fafa 	bl	8000ca0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

	// Setup PWM Generator
	HAL_TIM_Base_Start(&htim1);
 80006ac:	4827      	ldr	r0, [pc, #156]	@ (800074c <main+0xcc>)
 80006ae:	f003 fe57 	bl	8004360 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006b2:	2100      	movs	r1, #0
 80006b4:	4825      	ldr	r0, [pc, #148]	@ (800074c <main+0xcc>)
 80006b6:	f003 ff9d 	bl	80045f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006ba:	2104      	movs	r1, #4
 80006bc:	4823      	ldr	r0, [pc, #140]	@ (800074c <main+0xcc>)
 80006be:	f003 ff99 	bl	80045f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80006c2:	2108      	movs	r1, #8
 80006c4:	4821      	ldr	r0, [pc, #132]	@ (800074c <main+0xcc>)
 80006c6:	f003 ff95 	bl	80045f4 <HAL_TIM_PWM_Start>

	// Setup Encoder
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80006ca:	213c      	movs	r1, #60	@ 0x3c
 80006cc:	4820      	ldr	r0, [pc, #128]	@ (8000750 <main+0xd0>)
 80006ce:	f004 f949 	bl	8004964 <HAL_TIM_Encoder_Start>
	prismatic_raw_encoder_val = __HAL_TIM_GET_COUNTER(&htim4);
 80006d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <main+0xd0>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d8:	461a      	mov	r2, r3
 80006da:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <main+0xd4>)
 80006dc:	601a      	str	r2, [r3, #0]

	// Setup Timer 2 for sensor reading
	HAL_TIM_Base_Start_IT(&htim2);
 80006de:	481e      	ldr	r0, [pc, #120]	@ (8000758 <main+0xd8>)
 80006e0:	f003 feae 	bl	8004440 <HAL_TIM_Base_Start_IT>

	// Setup Timer 5 for Main Process
	HAL_TIM_Base_Start_IT(&htim5);
 80006e4:	481d      	ldr	r0, [pc, #116]	@ (800075c <main+0xdc>)
 80006e6:	f003 feab 	bl	8004440 <HAL_TIM_Base_Start_IT>

	//PID
	PID.Kp = prismatic_Kp;
 80006ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <main+0xe0>)
 80006ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006f0:	4610      	mov	r0, r2
 80006f2:	4619      	mov	r1, r3
 80006f4:	f7ff ff74 	bl	80005e0 <__aeabi_d2f>
 80006f8:	4603      	mov	r3, r0
 80006fa:	4a1a      	ldr	r2, [pc, #104]	@ (8000764 <main+0xe4>)
 80006fc:	6193      	str	r3, [r2, #24]
	PID.Ki = prismatic_Ki;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000768 <main+0xe8>)
 8000700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000704:	4610      	mov	r0, r2
 8000706:	4619      	mov	r1, r3
 8000708:	f7ff ff6a 	bl	80005e0 <__aeabi_d2f>
 800070c:	4603      	mov	r3, r0
 800070e:	4a15      	ldr	r2, [pc, #84]	@ (8000764 <main+0xe4>)
 8000710:	61d3      	str	r3, [r2, #28]
	PID.Kd = prismatic_Kd;
 8000712:	4b16      	ldr	r3, [pc, #88]	@ (800076c <main+0xec>)
 8000714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000718:	4610      	mov	r0, r2
 800071a:	4619      	mov	r1, r3
 800071c:	f7ff ff60 	bl	80005e0 <__aeabi_d2f>
 8000720:	4603      	mov	r3, r0
 8000722:	4a10      	ldr	r2, [pc, #64]	@ (8000764 <main+0xe4>)
 8000724:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 0);
 8000726:	2100      	movs	r1, #0
 8000728:	480e      	ldr	r0, [pc, #56]	@ (8000764 <main+0xe4>)
 800072a:	f005 fc01 	bl	8005f30 <arm_pid_init_f32>

	SetHomePrismatic();
 800072e:	f000 fbe1 	bl	8000ef4 <SetHomePrismatic>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		PrismaticPIDControl(prismatic_setposition);
 8000732:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <main+0xf0>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fec0 	bl	80004bc <__aeabi_i2d>
 800073c:	4602      	mov	r2, r0
 800073e:	460b      	mov	r3, r1
 8000740:	ec43 2b10 	vmov	d0, r2, r3
 8000744:	f000 fc36 	bl	8000fb4 <PrismaticPIDControl>
 8000748:	e7f3      	b.n	8000732 <main+0xb2>
 800074a:	bf00      	nop
 800074c:	20000100 	.word	0x20000100
 8000750:	200001e4 	.word	0x200001e4
 8000754:	20000280 	.word	0x20000280
 8000758:	2000014c 	.word	0x2000014c
 800075c:	20000230 	.word	0x20000230
 8000760:	20000000 	.word	0x20000000
 8000764:	20000298 	.word	0x20000298
 8000768:	200002c0 	.word	0x200002c0
 800076c:	200002c8 	.word	0x200002c8
 8000770:	200002bc 	.word	0x200002bc

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b094      	sub	sp, #80	@ 0x50
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0318 	add.w	r3, r7, #24
 800077e:	2238      	movs	r2, #56	@ 0x38
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f005 fc0a 	bl	8005f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000796:	2000      	movs	r0, #0
 8000798:	f002 fd92 	bl	80032c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079c:	2302      	movs	r3, #2
 800079e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a6:	2340      	movs	r3, #64	@ 0x40
 80007a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007aa:	2302      	movs	r3, #2
 80007ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ae:	2302      	movs	r3, #2
 80007b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007b2:	2304      	movs	r3, #4
 80007b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007b6:	2355      	movs	r3, #85	@ 0x55
 80007b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007be:	2302      	movs	r3, #2
 80007c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c6:	f107 0318 	add.w	r3, r7, #24
 80007ca:	4618      	mov	r0, r3
 80007cc:	f002 fe2c 	bl	8003428 <HAL_RCC_OscConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007d6:	f000 fcff 	bl	80011d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2303      	movs	r3, #3
 80007e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2104      	movs	r1, #4
 80007f2:	4618      	mov	r0, r3
 80007f4:	f003 f92a 	bl	8003a4c <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007fe:	f000 fceb 	bl	80011d8 <Error_Handler>
  }
}
 8000802:	bf00      	nop
 8000804:	3750      	adds	r7, #80	@ 0x50
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	@ 0x30
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2220      	movs	r2, #32
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f005 fbb9 	bl	8005f9c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800082a:	4b39      	ldr	r3, [pc, #228]	@ (8000910 <MX_ADC1_Init+0x104>)
 800082c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000830:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000832:	4b37      	ldr	r3, [pc, #220]	@ (8000910 <MX_ADC1_Init+0x104>)
 8000834:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000838:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800083a:	4b35      	ldr	r3, [pc, #212]	@ (8000910 <MX_ADC1_Init+0x104>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000840:	4b33      	ldr	r3, [pc, #204]	@ (8000910 <MX_ADC1_Init+0x104>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000846:	4b32      	ldr	r3, [pc, #200]	@ (8000910 <MX_ADC1_Init+0x104>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b30      	ldr	r3, [pc, #192]	@ (8000910 <MX_ADC1_Init+0x104>)
 800084e:	2201      	movs	r2, #1
 8000850:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b2f      	ldr	r3, [pc, #188]	@ (8000910 <MX_ADC1_Init+0x104>)
 8000854:	2204      	movs	r2, #4
 8000856:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b2d      	ldr	r3, [pc, #180]	@ (8000910 <MX_ADC1_Init+0x104>)
 800085a:	2200      	movs	r2, #0
 800085c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800085e:	4b2c      	ldr	r3, [pc, #176]	@ (8000910 <MX_ADC1_Init+0x104>)
 8000860:	2201      	movs	r2, #1
 8000862:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000864:	4b2a      	ldr	r3, [pc, #168]	@ (8000910 <MX_ADC1_Init+0x104>)
 8000866:	2202      	movs	r2, #2
 8000868:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b29      	ldr	r3, [pc, #164]	@ (8000910 <MX_ADC1_Init+0x104>)
 800086c:	2200      	movs	r2, #0
 800086e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000872:	4b27      	ldr	r3, [pc, #156]	@ (8000910 <MX_ADC1_Init+0x104>)
 8000874:	2200      	movs	r2, #0
 8000876:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000878:	4b25      	ldr	r3, [pc, #148]	@ (8000910 <MX_ADC1_Init+0x104>)
 800087a:	2200      	movs	r2, #0
 800087c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800087e:	4b24      	ldr	r3, [pc, #144]	@ (8000910 <MX_ADC1_Init+0x104>)
 8000880:	2201      	movs	r2, #1
 8000882:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000886:	4b22      	ldr	r3, [pc, #136]	@ (8000910 <MX_ADC1_Init+0x104>)
 8000888:	2200      	movs	r2, #0
 800088a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800088c:	4b20      	ldr	r3, [pc, #128]	@ (8000910 <MX_ADC1_Init+0x104>)
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000894:	481e      	ldr	r0, [pc, #120]	@ (8000910 <MX_ADC1_Init+0x104>)
 8000896:	f001 f955 	bl	8001b44 <HAL_ADC_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80008a0:	f000 fc9a 	bl	80011d8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ac:	4619      	mov	r1, r3
 80008ae:	4818      	ldr	r0, [pc, #96]	@ (8000910 <MX_ADC1_Init+0x104>)
 80008b0:	f001 ff6a 	bl	8002788 <HAL_ADCEx_MultiModeConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008ba:	f000 fc8d 	bl	80011d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80008be:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <MX_ADC1_Init+0x108>)
 80008c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c2:	2306      	movs	r3, #6
 80008c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80008c6:	2307      	movs	r3, #7
 80008c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ca:	237f      	movs	r3, #127	@ 0x7f
 80008cc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ce:	2304      	movs	r3, #4
 80008d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4619      	mov	r1, r3
 80008da:	480d      	ldr	r0, [pc, #52]	@ (8000910 <MX_ADC1_Init+0x104>)
 80008dc:	f001 faee 	bl	8001ebc <HAL_ADC_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80008e6:	f000 fc77 	bl	80011d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <MX_ADC1_Init+0x10c>)
 80008ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008ee:	230c      	movs	r3, #12
 80008f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4619      	mov	r1, r3
 80008f6:	4806      	ldr	r0, [pc, #24]	@ (8000910 <MX_ADC1_Init+0x104>)
 80008f8:	f001 fae0 	bl	8001ebc <HAL_ADC_ConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000902:	f000 fc69 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	3730      	adds	r7, #48	@ 0x30
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000034 	.word	0x20000034
 8000914:	1d500080 	.word	0x1d500080
 8000918:	21800100 	.word	0x21800100

0800091c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b09c      	sub	sp, #112	@ 0x70
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800093c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
 800094c:	615a      	str	r2, [r3, #20]
 800094e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2234      	movs	r2, #52	@ 0x34
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f005 fb20 	bl	8005f9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800095c:	4b51      	ldr	r3, [pc, #324]	@ (8000aa4 <MX_TIM1_Init+0x188>)
 800095e:	4a52      	ldr	r2, [pc, #328]	@ (8000aa8 <MX_TIM1_Init+0x18c>)
 8000960:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000962:	4b50      	ldr	r3, [pc, #320]	@ (8000aa4 <MX_TIM1_Init+0x188>)
 8000964:	22a9      	movs	r2, #169	@ 0xa9
 8000966:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b4e      	ldr	r3, [pc, #312]	@ (8000aa4 <MX_TIM1_Init+0x188>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800096e:	4b4d      	ldr	r3, [pc, #308]	@ (8000aa4 <MX_TIM1_Init+0x188>)
 8000970:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000974:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000976:	4b4b      	ldr	r3, [pc, #300]	@ (8000aa4 <MX_TIM1_Init+0x188>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800097c:	4b49      	ldr	r3, [pc, #292]	@ (8000aa4 <MX_TIM1_Init+0x188>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000982:	4b48      	ldr	r3, [pc, #288]	@ (8000aa4 <MX_TIM1_Init+0x188>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000988:	4846      	ldr	r0, [pc, #280]	@ (8000aa4 <MX_TIM1_Init+0x188>)
 800098a:	f003 fc91 	bl	80042b0 <HAL_TIM_Base_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000994:	f000 fc20 	bl	80011d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000998:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800099c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800099e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80009a2:	4619      	mov	r1, r3
 80009a4:	483f      	ldr	r0, [pc, #252]	@ (8000aa4 <MX_TIM1_Init+0x188>)
 80009a6:	f004 fb75 	bl	8005094 <HAL_TIM_ConfigClockSource>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009b0:	f000 fc12 	bl	80011d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009b4:	483b      	ldr	r0, [pc, #236]	@ (8000aa4 <MX_TIM1_Init+0x188>)
 80009b6:	f003 fdbb 	bl	8004530 <HAL_TIM_PWM_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80009c0:	f000 fc0a 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c4:	2300      	movs	r3, #0
 80009c6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009c8:	2300      	movs	r3, #0
 80009ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009d4:	4619      	mov	r1, r3
 80009d6:	4833      	ldr	r0, [pc, #204]	@ (8000aa4 <MX_TIM1_Init+0x188>)
 80009d8:	f005 f93a 	bl	8005c50 <HAL_TIMEx_MasterConfigSynchronization>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009e2:	f000 fbf9 	bl	80011d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e6:	2360      	movs	r3, #96	@ 0x60
 80009e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ee:	2300      	movs	r3, #0
 80009f0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009f2:	2300      	movs	r3, #0
 80009f4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009fa:	2300      	movs	r3, #0
 80009fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009fe:	2300      	movs	r3, #0
 8000a00:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a02:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a06:	2200      	movs	r2, #0
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4826      	ldr	r0, [pc, #152]	@ (8000aa4 <MX_TIM1_Init+0x188>)
 8000a0c:	f004 fa2e 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a16:	f000 fbdf 	bl	80011d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a1a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a1e:	2204      	movs	r2, #4
 8000a20:	4619      	mov	r1, r3
 8000a22:	4820      	ldr	r0, [pc, #128]	@ (8000aa4 <MX_TIM1_Init+0x188>)
 8000a24:	f004 fa22 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000a2e:	f000 fbd3 	bl	80011d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a32:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a36:	2208      	movs	r2, #8
 8000a38:	4619      	mov	r1, r3
 8000a3a:	481a      	ldr	r0, [pc, #104]	@ (8000aa4 <MX_TIM1_Init+0x188>)
 8000a3c:	f004 fa16 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000a46:	f000 fbc7 	bl	80011d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4619      	mov	r1, r3
 8000a86:	4807      	ldr	r0, [pc, #28]	@ (8000aa4 <MX_TIM1_Init+0x188>)
 8000a88:	f005 f978 	bl	8005d7c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000a92:	f000 fba1 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a96:	4803      	ldr	r0, [pc, #12]	@ (8000aa4 <MX_TIM1_Init+0x188>)
 8000a98:	f000 fd24 	bl	80014e4 <HAL_TIM_MspPostInit>

}
 8000a9c:	bf00      	nop
 8000a9e:	3770      	adds	r7, #112	@ 0x70
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000100 	.word	0x20000100
 8000aa8:	40012c00 	.word	0x40012c00

08000aac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	f107 0310 	add.w	r3, r7, #16
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aca:	4b1e      	ldr	r3, [pc, #120]	@ (8000b44 <MX_TIM2_Init+0x98>)
 8000acc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ad0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b44 <MX_TIM2_Init+0x98>)
 8000ad4:	22a9      	movs	r2, #169	@ 0xa9
 8000ad6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <MX_TIM2_Init+0x98>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000ade:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <MX_TIM2_Init+0x98>)
 8000ae0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ae4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <MX_TIM2_Init+0x98>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aec:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <MX_TIM2_Init+0x98>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000af2:	4814      	ldr	r0, [pc, #80]	@ (8000b44 <MX_TIM2_Init+0x98>)
 8000af4:	f003 fbdc 	bl	80042b0 <HAL_TIM_Base_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000afe:	f000 fb6b 	bl	80011d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480d      	ldr	r0, [pc, #52]	@ (8000b44 <MX_TIM2_Init+0x98>)
 8000b10:	f004 fac0 	bl	8005094 <HAL_TIM_ConfigClockSource>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b1a:	f000 fb5d 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4806      	ldr	r0, [pc, #24]	@ (8000b44 <MX_TIM2_Init+0x98>)
 8000b2c:	f005 f890 	bl	8005c50 <HAL_TIMEx_MasterConfigSynchronization>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b36:	f000 fb4f 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	3720      	adds	r7, #32
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000014c 	.word	0x2000014c

08000b48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	@ 0x30
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	2224      	movs	r2, #36	@ 0x24
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f005 fa20 	bl	8005f9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b66:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <MX_TIM3_Init+0xa4>)
 8000b68:	4a21      	ldr	r2, [pc, #132]	@ (8000bf0 <MX_TIM3_Init+0xa8>)
 8000b6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <MX_TIM3_Init+0xa4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b72:	4b1e      	ldr	r3, [pc, #120]	@ (8000bec <MX_TIM3_Init+0xa4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2048;
 8000b78:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <MX_TIM3_Init+0xa4>)
 8000b7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <MX_TIM3_Init+0xa4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b86:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <MX_TIM3_Init+0xa4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b94:	2301      	movs	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480d      	ldr	r0, [pc, #52]	@ (8000bec <MX_TIM3_Init+0xa4>)
 8000bb8:	f003 fe2e 	bl	8004818 <HAL_TIM_Encoder_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000bc2:	f000 fb09 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bce:	463b      	mov	r3, r7
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4806      	ldr	r0, [pc, #24]	@ (8000bec <MX_TIM3_Init+0xa4>)
 8000bd4:	f005 f83c 	bl	8005c50 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000bde:	f000 fafb 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	3730      	adds	r7, #48	@ 0x30
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000198 	.word	0x20000198
 8000bf0:	40000400 	.word	0x40000400

08000bf4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08c      	sub	sp, #48	@ 0x30
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	2224      	movs	r2, #36	@ 0x24
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f005 f9ca 	bl	8005f9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c08:	463b      	mov	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c12:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <MX_TIM4_Init+0xa4>)
 8000c14:	4a21      	ldr	r2, [pc, #132]	@ (8000c9c <MX_TIM4_Init+0xa8>)
 8000c16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c18:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <MX_TIM4_Init+0xa4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c98 <MX_TIM4_Init+0xa4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <MX_TIM4_Init+0xa4>)
 8000c26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <MX_TIM4_Init+0xa4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c32:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <MX_TIM4_Init+0xa4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c40:	2301      	movs	r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c50:	2301      	movs	r3, #1
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	4619      	mov	r1, r3
 8000c62:	480d      	ldr	r0, [pc, #52]	@ (8000c98 <MX_TIM4_Init+0xa4>)
 8000c64:	f003 fdd8 	bl	8004818 <HAL_TIM_Encoder_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000c6e:	f000 fab3 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4806      	ldr	r0, [pc, #24]	@ (8000c98 <MX_TIM4_Init+0xa4>)
 8000c80:	f004 ffe6 	bl	8005c50 <HAL_TIMEx_MasterConfigSynchronization>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000c8a:	f000 faa5 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	3730      	adds	r7, #48	@ 0x30
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200001e4 	.word	0x200001e4
 8000c9c:	40000800 	.word	0x40000800

08000ca0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ca6:	f107 0310 	add.w	r3, r7, #16
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8000d38 <MX_TIM5_Init+0x98>)
 8000cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d3c <MX_TIM5_Init+0x9c>)
 8000cc2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1699;
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d38 <MX_TIM5_Init+0x98>)
 8000cc6:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8000cca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <MX_TIM5_Init+0x98>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	@ (8000d38 <MX_TIM5_Init+0x98>)
 8000cd4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cd8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cda:	4b17      	ldr	r3, [pc, #92]	@ (8000d38 <MX_TIM5_Init+0x98>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <MX_TIM5_Init+0x98>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ce6:	4814      	ldr	r0, [pc, #80]	@ (8000d38 <MX_TIM5_Init+0x98>)
 8000ce8:	f003 fae2 	bl	80042b0 <HAL_TIM_Base_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000cf2:	f000 fa71 	bl	80011d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cfa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4619      	mov	r1, r3
 8000d02:	480d      	ldr	r0, [pc, #52]	@ (8000d38 <MX_TIM5_Init+0x98>)
 8000d04:	f004 f9c6 	bl	8005094 <HAL_TIM_ConfigClockSource>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8000d0e:	f000 fa63 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4806      	ldr	r0, [pc, #24]	@ (8000d38 <MX_TIM5_Init+0x98>)
 8000d20:	f004 ff96 	bl	8005c50 <HAL_TIMEx_MasterConfigSynchronization>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000d2a:	f000 fa55 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	3720      	adds	r7, #32
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000230 	.word	0x20000230
 8000d3c:	40000c00 	.word	0x40000c00

08000d40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d46:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <MX_DMA_Init+0x50>)
 8000d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d4a:	4a11      	ldr	r2, [pc, #68]	@ (8000d90 <MX_DMA_Init+0x50>)
 8000d4c:	f043 0304 	orr.w	r3, r3, #4
 8000d50:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d52:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <MX_DMA_Init+0x50>)
 8000d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d56:	f003 0304 	and.w	r3, r3, #4
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <MX_DMA_Init+0x50>)
 8000d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d62:	4a0b      	ldr	r2, [pc, #44]	@ (8000d90 <MX_DMA_Init+0x50>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d6a:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <MX_DMA_Init+0x50>)
 8000d6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	200b      	movs	r0, #11
 8000d7c:	f001 fee7 	bl	8002b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d80:	200b      	movs	r0, #11
 8000d82:	f001 fefe 	bl	8002b82 <HAL_NVIC_EnableIRQ>

}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000

08000d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	@ 0x28
 8000d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000daa:	4b4f      	ldr	r3, [pc, #316]	@ (8000ee8 <MX_GPIO_Init+0x154>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	4a4e      	ldr	r2, [pc, #312]	@ (8000ee8 <MX_GPIO_Init+0x154>)
 8000db0:	f043 0304 	orr.w	r3, r3, #4
 8000db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db6:	4b4c      	ldr	r3, [pc, #304]	@ (8000ee8 <MX_GPIO_Init+0x154>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dc2:	4b49      	ldr	r3, [pc, #292]	@ (8000ee8 <MX_GPIO_Init+0x154>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	4a48      	ldr	r2, [pc, #288]	@ (8000ee8 <MX_GPIO_Init+0x154>)
 8000dc8:	f043 0320 	orr.w	r3, r3, #32
 8000dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dce:	4b46      	ldr	r3, [pc, #280]	@ (8000ee8 <MX_GPIO_Init+0x154>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	f003 0320 	and.w	r3, r3, #32
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	4b43      	ldr	r3, [pc, #268]	@ (8000ee8 <MX_GPIO_Init+0x154>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	4a42      	ldr	r2, [pc, #264]	@ (8000ee8 <MX_GPIO_Init+0x154>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de6:	4b40      	ldr	r3, [pc, #256]	@ (8000ee8 <MX_GPIO_Init+0x154>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ee8 <MX_GPIO_Init+0x154>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	4a3c      	ldr	r2, [pc, #240]	@ (8000ee8 <MX_GPIO_Init+0x154>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee8 <MX_GPIO_Init+0x154>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2120      	movs	r1, #32
 8000e0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e12:	f002 fa25 	bl	8003260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR_Driver_1_Pin|Dir_Driver_2_Pin, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	21c0      	movs	r1, #192	@ 0xc0
 8000e1a:	4834      	ldr	r0, [pc, #208]	@ (8000eec <MX_GPIO_Init+0x158>)
 8000e1c:	f002 fa20 	bl	8003260 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EMERGENCY_Pin JOY_BUTTON_Pin QEI_1_X_Pin */
  GPIO_InitStruct.Pin = EMERGENCY_Pin|JOY_BUTTON_Pin|QEI_1_X_Pin;
 8000e20:	2319      	movs	r3, #25
 8000e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e24:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	482d      	ldr	r0, [pc, #180]	@ (8000eec <MX_GPIO_Init+0x158>)
 8000e36:	f002 f879 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000e3a:	230c      	movs	r3, #12
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e58:	f002 f868 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e5c:	2320      	movs	r3, #32
 8000e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e76:	f002 f859 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : Prismatic_right_limit_Pin Prismatic_left_limit_Pin */
  GPIO_InitStruct.Pin = Prismatic_right_limit_Pin|Prismatic_left_limit_Pin;
 8000e7a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e80:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000e84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4817      	ldr	r0, [pc, #92]	@ (8000ef0 <MX_GPIO_Init+0x15c>)
 8000e92:	f002 f84b 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : step_one_plotter_Pin step_two_plotter_Pin */
  GPIO_InitStruct.Pin = step_one_plotter_Pin|step_two_plotter_Pin;
 8000e96:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e9c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4810      	ldr	r0, [pc, #64]	@ (8000ef0 <MX_GPIO_Init+0x15c>)
 8000eae:	f002 f83d 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Driver_1_Pin Dir_Driver_2_Pin */
  GPIO_InitStruct.Pin = DIR_Driver_1_Pin|Dir_Driver_2_Pin;
 8000eb2:	23c0      	movs	r3, #192	@ 0xc0
 8000eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4808      	ldr	r0, [pc, #32]	@ (8000eec <MX_GPIO_Init+0x158>)
 8000eca:	f002 f82f 	bl	8002f2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2028      	movs	r0, #40	@ 0x28
 8000ed4:	f001 fe3b 	bl	8002b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ed8:	2028      	movs	r0, #40	@ 0x28
 8000eda:	f001 fe52 	bl	8002b82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	@ 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	48000800 	.word	0x48000800
 8000ef0:	48000400 	.word	0x48000400

08000ef4 <SetHomePrismatic>:

/* USER CODE BEGIN 4 */

// Set Prismatic to home
void SetHomePrismatic() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	while (prismatic_left_sw == false) {
 8000ef8:	e003      	b.n	8000f02 <SetHomePrismatic+0xe>
		PrismaticMotorControl(30, 1);
 8000efa:	2101      	movs	r1, #1
 8000efc:	201e      	movs	r0, #30
 8000efe:	f000 f82b 	bl	8000f58 <PrismaticMotorControl>
	while (prismatic_left_sw == false) {
 8000f02:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <SetHomePrismatic+0x50>)
 8000f04:	f993 3000 	ldrsb.w	r3, [r3]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0f6      	beq.n	8000efa <SetHomePrismatic+0x6>
	}
	PrismaticMotorControl(0, 0);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f000 f822 	bl	8000f58 <PrismaticMotorControl>

	//reset encoder val
	HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_ALL);
 8000f14:	213c      	movs	r1, #60	@ 0x3c
 8000f16:	480c      	ldr	r0, [pc, #48]	@ (8000f48 <SetHomePrismatic+0x54>)
 8000f18:	f003 fdb2 	bl	8004a80 <HAL_TIM_Encoder_Stop>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <SetHomePrismatic+0x54>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_raw_encoder_val = 0;
 8000f24:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <SetHomePrismatic+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
	prismatic_raw_encoder_prev = 0;
 8000f2a:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <SetHomePrismatic+0x5c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
	prismatic_encoder_val = 0;
 8000f30:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <SetHomePrismatic+0x60>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000f36:	213c      	movs	r1, #60	@ 0x3c
 8000f38:	4803      	ldr	r0, [pc, #12]	@ (8000f48 <SetHomePrismatic+0x54>)
 8000f3a:	f003 fd13 	bl	8004964 <HAL_TIM_Encoder_Start>
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000027c 	.word	0x2000027c
 8000f48:	200001e4 	.word	0x200001e4
 8000f4c:	20000280 	.word	0x20000280
 8000f50:	20000284 	.word	0x20000284
 8000f54:	20000288 	.word	0x20000288

08000f58 <PrismaticMotorControl>:

void PrismaticMotorControl(int speed, int dir) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	// Saturation
	speed = (speed > 100) ? 100 : speed;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b64      	cmp	r3, #100	@ 0x64
 8000f66:	bfa8      	it	ge
 8000f68:	2364      	movge	r3, #100	@ 0x64
 8000f6a:	607b      	str	r3, [r7, #4]

	if (dir == 0) {
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d105      	bne.n	8000f7e <PrismaticMotorControl+0x26>
		// Set motor2 direction to ___
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2180      	movs	r1, #128	@ 0x80
 8000f76:	480d      	ldr	r0, [pc, #52]	@ (8000fac <PrismaticMotorControl+0x54>)
 8000f78:	f002 f972 	bl	8003260 <HAL_GPIO_WritePin>
 8000f7c:	e004      	b.n	8000f88 <PrismaticMotorControl+0x30>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2180      	movs	r1, #128	@ 0x80
 8000f82:	480a      	ldr	r0, [pc, #40]	@ (8000fac <PrismaticMotorControl+0x54>)
 8000f84:	f002 f96c 	bl	8003260 <HAL_GPIO_WritePin>
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, map(speed, 0, 100, 0, 19999));
 8000f88:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	2264      	movs	r2, #100	@ 0x64
 8000f92:	2100      	movs	r1, #0
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f000 f891 	bl	80010bc <map>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	4b04      	ldr	r3, [pc, #16]	@ (8000fb0 <PrismaticMotorControl+0x58>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	48000800 	.word	0x48000800
 8000fb0:	20000100 	.word	0x20000100

08000fb4 <PrismaticPIDControl>:

void PrismaticPIDControl(double set_point) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	@ 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	ed87 0b00 	vstr	d0, [r7]
	double position = (prismatic_encoder_val * 16) / 8192;
 8000fbe:	4b3b      	ldr	r3, [pc, #236]	@ (80010ac <PrismaticPIDControl+0xf8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	da01      	bge.n	8000fca <PrismaticPIDControl+0x16>
 8000fc6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8000fca:	125b      	asrs	r3, r3, #9
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fa75 	bl	80004bc <__aeabi_i2d>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int speed = arm_pid_f32(&PID, set_point - position);
 8000fda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fe2:	f7ff f91d 	bl	8000220 <__aeabi_dsub>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff faf7 	bl	80005e0 <__aeabi_d2f>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80010b0 <PrismaticPIDControl+0xfc>)
 8000ff6:	617a      	str	r2, [r7, #20]
 8000ff8:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	ed93 7a00 	vldr	s14, [r3]
 8001000:	edd7 7a04 	vldr	s15, [r7, #16]
 8001004:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	edd3 6a01 	vldr	s13, [r3, #4]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	edd3 7a03 	vldr	s15, [r3, #12]
 8001014:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001018:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	edd3 7a04 	vldr	s15, [r3, #16]
 8001028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800102c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800103a:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001052:	edd7 7a03 	vldr	s15, [r7, #12]
 8001056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800105a:	ee17 3a90 	vmov	r3, s15
 800105e:	61fb      	str	r3, [r7, #28]
	prismatic_error = set_point - position;
 8001060:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001064:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001068:	f7ff f8da 	bl	8000220 <__aeabi_dsub>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fa8c 	bl	8000590 <__aeabi_d2iz>
 8001078:	4603      	mov	r3, r0
 800107a:	4a0e      	ldr	r2, [pc, #56]	@ (80010b4 <PrismaticPIDControl+0x100>)
 800107c:	6013      	str	r3, [r2, #0]
	prismatic_feedback = speed;
 800107e:	4a0e      	ldr	r2, [pc, #56]	@ (80010b8 <PrismaticPIDControl+0x104>)
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	6013      	str	r3, [r2, #0]
	int dir = (speed > 0) ? 0 : 1;
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	2b00      	cmp	r3, #0
 8001088:	bfd4      	ite	le
 800108a:	2301      	movle	r3, #1
 800108c:	2300      	movgt	r3, #0
 800108e:	b2db      	uxtb	r3, r3
 8001090:	61bb      	str	r3, [r7, #24]
	PrismaticMotorControl(abs(speed), dir);
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	2b00      	cmp	r3, #0
 8001096:	bfb8      	it	lt
 8001098:	425b      	neglt	r3, r3
 800109a:	69b9      	ldr	r1, [r7, #24]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff5b 	bl	8000f58 <PrismaticMotorControl>
}
 80010a2:	bf00      	nop
 80010a4:	3728      	adds	r7, #40	@ 0x28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000288 	.word	0x20000288
 80010b0:	20000298 	.word	0x20000298
 80010b4:	20000290 	.word	0x20000290
 80010b8:	20000294 	.word	0x20000294

080010bc <map>:

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	69b9      	ldr	r1, [r7, #24]
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	1a8a      	subs	r2, r1, r2
 80010d6:	fb03 f202 	mul.w	r2, r3, r2
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	1acb      	subs	r3, r1, r3
 80010e0:	fb92 f2f3 	sdiv	r2, r2, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	4413      	add	r3, r2
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_GPIO_EXTI_Callback>:

// External Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_12) {
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001104:	d109      	bne.n	800111a <HAL_GPIO_EXTI_Callback+0x26>
		prismatic_left_sw = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8001106:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800110a:	480c      	ldr	r0, [pc, #48]	@ (800113c <HAL_GPIO_EXTI_Callback+0x48>)
 800110c:	f002 f890 	bl	8003230 <HAL_GPIO_ReadPin>
 8001110:	4603      	mov	r3, r0
 8001112:	b25a      	sxtb	r2, r3
 8001114:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001116:	701a      	strb	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_11) {
		prismatic_right_sw = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
	}
}
 8001118:	e00c      	b.n	8001134 <HAL_GPIO_EXTI_Callback+0x40>
	} else if (GPIO_Pin == GPIO_PIN_11) {
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001120:	d108      	bne.n	8001134 <HAL_GPIO_EXTI_Callback+0x40>
		prismatic_right_sw = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8001122:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001126:	4805      	ldr	r0, [pc, #20]	@ (800113c <HAL_GPIO_EXTI_Callback+0x48>)
 8001128:	f002 f882 	bl	8003230 <HAL_GPIO_ReadPin>
 800112c:	4603      	mov	r3, r0
 800112e:	b25a      	sxtb	r2, r3
 8001130:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <HAL_GPIO_EXTI_Callback+0x50>)
 8001132:	701a      	strb	r2, [r3, #0]
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	48000400 	.word	0x48000400
 8001140:	2000027c 	.word	0x2000027c
 8001144:	2000027d 	.word	0x2000027d

08001148 <HAL_TIM_PeriodElapsedCallback>:

// Timer loop (Read sensor data and calculate here)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a1b      	ldr	r2, [pc, #108]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d12c      	bne.n	80011b2 <HAL_TIM_PeriodElapsedCallback+0x6a>

		//-------------------------Read QEI Prismatic-------------------------
		prismatic_raw_encoder_val = __HAL_TIM_GET_COUNTER(&htim4);
 8001158:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115e:	461a      	mov	r2, r3
 8001160:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001162:	601a      	str	r2, [r3, #0]
		int16_t delta = prismatic_raw_encoder_val - prismatic_raw_encoder_prev;
 8001164:	4b18      	ldr	r3, [pc, #96]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	b29b      	uxth	r3, r3
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	b29b      	uxth	r3, r3
 8001174:	81fb      	strh	r3, [r7, #14]

		if (delta > 65535 / 2) {
			delta -= 65535;
		} else if (delta < -65535 / 2) {
 8001176:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800117a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800117e:	d103      	bne.n	8001188 <HAL_TIM_PeriodElapsedCallback+0x40>
			delta += 65535;
 8001180:	89fb      	ldrh	r3, [r7, #14]
 8001182:	3b01      	subs	r3, #1
 8001184:	b29b      	uxth	r3, r3
 8001186:	81fb      	strh	r3, [r7, #14]
		}

		prismatic_encoder_val += delta;
 8001188:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800118c:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4413      	add	r3, r2
 8001192:	4a0f      	ldr	r2, [pc, #60]	@ (80011d0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001194:	6013      	str	r3, [r2, #0]
		prismatic_position = (prismatic_encoder_val * 16) / 8192;
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	da01      	bge.n	80011a2 <HAL_TIM_PeriodElapsedCallback+0x5a>
 800119e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80011a2:	125b      	asrs	r3, r3, #9
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80011a8:	601a      	str	r2, [r3, #0]
		prismatic_raw_encoder_prev = prismatic_raw_encoder_val;
 80011aa:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a07      	ldr	r2, [pc, #28]	@ (80011cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 80011b0:	6013      	str	r3, [r2, #0]
	}

	if(htim == &htim5){

	}
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	2000014c 	.word	0x2000014c
 80011c4:	200001e4 	.word	0x200001e4
 80011c8:	20000280 	.word	0x20000280
 80011cc:	20000284 	.word	0x20000284
 80011d0:	20000288 	.word	0x20000288
 80011d4:	2000028c 	.word	0x2000028c

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <Error_Handler+0x8>

080011e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <HAL_MspInit+0x44>)
 80011ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001228 <HAL_MspInit+0x44>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80011f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <HAL_MspInit+0x44>)
 80011f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <HAL_MspInit+0x44>)
 8001204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001206:	4a08      	ldr	r2, [pc, #32]	@ (8001228 <HAL_MspInit+0x44>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800120c:	6593      	str	r3, [r2, #88]	@ 0x58
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_MspInit+0x44>)
 8001210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800121a:	f002 f8f5 	bl	8003408 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000

0800122c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b09e      	sub	sp, #120	@ 0x78
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	2254      	movs	r2, #84	@ 0x54
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f004 fea5 	bl	8005f9c <memset>
  if(hadc->Instance==ADC1)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800125a:	d15e      	bne.n	800131a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800125c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001260:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001262:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001266:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	4618      	mov	r0, r3
 800126e:	f002 fdd1 	bl	8003e14 <HAL_RCCEx_PeriphCLKConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001278:	f7ff ffae 	bl	80011d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800127c:	4b29      	ldr	r3, [pc, #164]	@ (8001324 <HAL_ADC_MspInit+0xf8>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001280:	4a28      	ldr	r2, [pc, #160]	@ (8001324 <HAL_ADC_MspInit+0xf8>)
 8001282:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001286:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001288:	4b26      	ldr	r3, [pc, #152]	@ (8001324 <HAL_ADC_MspInit+0xf8>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001294:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <HAL_ADC_MspInit+0xf8>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001298:	4a22      	ldr	r2, [pc, #136]	@ (8001324 <HAL_ADC_MspInit+0xf8>)
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a0:	4b20      	ldr	r3, [pc, #128]	@ (8001324 <HAL_ADC_MspInit+0xf8>)
 80012a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = JOY_X_AXIS_Pin|JOY_Y_AXIS_Pin;
 80012ac:	2306      	movs	r3, #6
 80012ae:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b0:	2303      	movs	r3, #3
 80012b2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012bc:	4619      	mov	r1, r3
 80012be:	481a      	ldr	r0, [pc, #104]	@ (8001328 <HAL_ADC_MspInit+0xfc>)
 80012c0:	f001 fe34 	bl	8002f2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012c4:	4b19      	ldr	r3, [pc, #100]	@ (800132c <HAL_ADC_MspInit+0x100>)
 80012c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001330 <HAL_ADC_MspInit+0x104>)
 80012c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012ca:	4b18      	ldr	r3, [pc, #96]	@ (800132c <HAL_ADC_MspInit+0x100>)
 80012cc:	2205      	movs	r2, #5
 80012ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012d0:	4b16      	ldr	r3, [pc, #88]	@ (800132c <HAL_ADC_MspInit+0x100>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d6:	4b15      	ldr	r3, [pc, #84]	@ (800132c <HAL_ADC_MspInit+0x100>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012dc:	4b13      	ldr	r3, [pc, #76]	@ (800132c <HAL_ADC_MspInit+0x100>)
 80012de:	2280      	movs	r2, #128	@ 0x80
 80012e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012e2:	4b12      	ldr	r3, [pc, #72]	@ (800132c <HAL_ADC_MspInit+0x100>)
 80012e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ea:	4b10      	ldr	r3, [pc, #64]	@ (800132c <HAL_ADC_MspInit+0x100>)
 80012ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <HAL_ADC_MspInit+0x100>)
 80012f4:	2220      	movs	r2, #32
 80012f6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <HAL_ADC_MspInit+0x100>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012fe:	480b      	ldr	r0, [pc, #44]	@ (800132c <HAL_ADC_MspInit+0x100>)
 8001300:	f001 fc5a 	bl	8002bb8 <HAL_DMA_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800130a:	f7ff ff65 	bl	80011d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a06      	ldr	r2, [pc, #24]	@ (800132c <HAL_ADC_MspInit+0x100>)
 8001312:	655a      	str	r2, [r3, #84]	@ 0x54
 8001314:	4a05      	ldr	r2, [pc, #20]	@ (800132c <HAL_ADC_MspInit+0x100>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800131a:	bf00      	nop
 800131c:	3778      	adds	r7, #120	@ 0x78
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000
 8001328:	48000800 	.word	0x48000800
 800132c:	200000a0 	.word	0x200000a0
 8001330:	40020008 	.word	0x40020008

08001334 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a23      	ldr	r2, [pc, #140]	@ (80013d0 <HAL_TIM_Base_MspInit+0x9c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d10c      	bne.n	8001360 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001346:	4b23      	ldr	r3, [pc, #140]	@ (80013d4 <HAL_TIM_Base_MspInit+0xa0>)
 8001348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800134a:	4a22      	ldr	r2, [pc, #136]	@ (80013d4 <HAL_TIM_Base_MspInit+0xa0>)
 800134c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001350:	6613      	str	r3, [r2, #96]	@ 0x60
 8001352:	4b20      	ldr	r3, [pc, #128]	@ (80013d4 <HAL_TIM_Base_MspInit+0xa0>)
 8001354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001356:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800135e:	e032      	b.n	80013c6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001368:	d114      	bne.n	8001394 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800136a:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <HAL_TIM_Base_MspInit+0xa0>)
 800136c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136e:	4a19      	ldr	r2, [pc, #100]	@ (80013d4 <HAL_TIM_Base_MspInit+0xa0>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6593      	str	r3, [r2, #88]	@ 0x58
 8001376:	4b17      	ldr	r3, [pc, #92]	@ (80013d4 <HAL_TIM_Base_MspInit+0xa0>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	201c      	movs	r0, #28
 8001388:	f001 fbe1 	bl	8002b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800138c:	201c      	movs	r0, #28
 800138e:	f001 fbf8 	bl	8002b82 <HAL_NVIC_EnableIRQ>
}
 8001392:	e018      	b.n	80013c6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM5)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0f      	ldr	r2, [pc, #60]	@ (80013d8 <HAL_TIM_Base_MspInit+0xa4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d113      	bne.n	80013c6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800139e:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <HAL_TIM_Base_MspInit+0xa0>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a2:	4a0c      	ldr	r2, [pc, #48]	@ (80013d4 <HAL_TIM_Base_MspInit+0xa0>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013aa:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <HAL_TIM_Base_MspInit+0xa0>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2032      	movs	r0, #50	@ 0x32
 80013bc:	f001 fbc7 	bl	8002b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80013c0:	2032      	movs	r0, #50	@ 0x32
 80013c2:	f001 fbde 	bl	8002b82 <HAL_NVIC_EnableIRQ>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40012c00 	.word	0x40012c00
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40000c00 	.word	0x40000c00

080013dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08c      	sub	sp, #48	@ 0x30
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a36      	ldr	r2, [pc, #216]	@ (80014d4 <HAL_TIM_Encoder_MspInit+0xf8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d131      	bne.n	8001462 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013fe:	4b36      	ldr	r3, [pc, #216]	@ (80014d8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001402:	4a35      	ldr	r2, [pc, #212]	@ (80014d8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6593      	str	r3, [r2, #88]	@ 0x58
 800140a:	4b33      	ldr	r3, [pc, #204]	@ (80014d8 <HAL_TIM_Encoder_MspInit+0xfc>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	61bb      	str	r3, [r7, #24]
 8001414:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b30      	ldr	r3, [pc, #192]	@ (80014d8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	4a2f      	ldr	r2, [pc, #188]	@ (80014d8 <HAL_TIM_Encoder_MspInit+0xfc>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001422:	4b2d      	ldr	r3, [pc, #180]	@ (80014d8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = QEI_1_A_Pin|QEI_1_B_Pin;
 800142e:	23c0      	movs	r3, #192	@ 0xc0
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800143e:	2302      	movs	r3, #2
 8001440:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144c:	f001 fd6e 	bl	8002f2c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	201d      	movs	r0, #29
 8001456:	f001 fb7a 	bl	8002b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800145a:	201d      	movs	r0, #29
 800145c:	f001 fb91 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001460:	e034      	b.n	80014cc <HAL_TIM_Encoder_MspInit+0xf0>
  else if(htim_encoder->Instance==TIM4)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a1d      	ldr	r2, [pc, #116]	@ (80014dc <HAL_TIM_Encoder_MspInit+0x100>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d12f      	bne.n	80014cc <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800146c:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <HAL_TIM_Encoder_MspInit+0xfc>)
 800146e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001470:	4a19      	ldr	r2, [pc, #100]	@ (80014d8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001472:	f043 0304 	orr.w	r3, r3, #4
 8001476:	6593      	str	r3, [r2, #88]	@ 0x58
 8001478:	4b17      	ldr	r3, [pc, #92]	@ (80014d8 <HAL_TIM_Encoder_MspInit+0xfc>)
 800147a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001484:	4b14      	ldr	r3, [pc, #80]	@ (80014d8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001488:	4a13      	ldr	r2, [pc, #76]	@ (80014d8 <HAL_TIM_Encoder_MspInit+0xfc>)
 800148a:	f043 0302 	orr.w	r3, r3, #2
 800148e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001490:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = QEI_2_A_Pin|QEI_2_B_Pin;
 800149c:	23c0      	movs	r3, #192	@ 0xc0
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014ac:	2302      	movs	r3, #2
 80014ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	4619      	mov	r1, r3
 80014b6:	480a      	ldr	r0, [pc, #40]	@ (80014e0 <HAL_TIM_Encoder_MspInit+0x104>)
 80014b8:	f001 fd38 	bl	8002f2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	2100      	movs	r1, #0
 80014c0:	201e      	movs	r0, #30
 80014c2:	f001 fb44 	bl	8002b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014c6:	201e      	movs	r0, #30
 80014c8:	f001 fb5b 	bl	8002b82 <HAL_NVIC_EnableIRQ>
}
 80014cc:	bf00      	nop
 80014ce:	3730      	adds	r7, #48	@ 0x30
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40000400 	.word	0x40000400
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40000800 	.word	0x40000800
 80014e0:	48000400 	.word	0x48000400

080014e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a12      	ldr	r2, [pc, #72]	@ (800154c <HAL_TIM_MspPostInit+0x68>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d11d      	bne.n	8001542 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <HAL_TIM_MspPostInit+0x6c>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150a:	4a11      	ldr	r2, [pc, #68]	@ (8001550 <HAL_TIM_MspPostInit+0x6c>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001512:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <HAL_TIM_MspPostInit+0x6c>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Servo_PWM_Pin|Motor_1_PWM_Pin|Motor_2_PWM_Pin;
 800151e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001522:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001530:	2306      	movs	r3, #6
 8001532:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4619      	mov	r1, r3
 800153a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800153e:	f001 fcf5 	bl	8002f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001542:	bf00      	nop
 8001544:	3720      	adds	r7, #32
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40012c00 	.word	0x40012c00
 8001550:	40021000 	.word	0x40021000

08001554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <NMI_Handler+0x4>

0800155c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <MemManage_Handler+0x4>

0800156c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <BusFault_Handler+0x4>

08001574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <UsageFault_Handler+0x4>

0800157c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015aa:	f000 f8d7 	bl	800175c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015b8:	4802      	ldr	r0, [pc, #8]	@ (80015c4 <DMA1_Channel1_IRQHandler+0x10>)
 80015ba:	f001 fba5 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200000a0 	.word	0x200000a0

080015c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015cc:	4802      	ldr	r0, [pc, #8]	@ (80015d8 <TIM2_IRQHandler+0x10>)
 80015ce:	f003 fafe 	bl	8004bce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	2000014c 	.word	0x2000014c

080015dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015e0:	4802      	ldr	r0, [pc, #8]	@ (80015ec <TIM3_IRQHandler+0x10>)
 80015e2:	f003 faf4 	bl	8004bce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000198 	.word	0x20000198

080015f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015f4:	4802      	ldr	r0, [pc, #8]	@ (8001600 <TIM4_IRQHandler+0x10>)
 80015f6:	f003 faea 	bl	8004bce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200001e4 	.word	0x200001e4

08001604 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Prismatic_right_limit_Pin);
 8001608:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800160c:	f001 fe40 	bl	8003290 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Prismatic_left_limit_Pin);
 8001610:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001614:	f001 fe3c 	bl	8003290 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(step_one_plotter_Pin);
 8001618:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800161c:	f001 fe38 	bl	8003290 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(step_two_plotter_Pin);
 8001620:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001624:	f001 fe34 	bl	8003290 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001630:	4802      	ldr	r0, [pc, #8]	@ (800163c <TIM5_IRQHandler+0x10>)
 8001632:	f003 facc 	bl	8004bce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000230 	.word	0x20000230

08001640 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <SystemInit+0x20>)
 8001646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800164a:	4a05      	ldr	r2, [pc, #20]	@ (8001660 <SystemInit+0x20>)
 800164c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001650:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001664:	480d      	ldr	r0, [pc, #52]	@ (800169c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001666:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001668:	f7ff ffea 	bl	8001640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800166c:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800166e:	490d      	ldr	r1, [pc, #52]	@ (80016a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001670:	4a0d      	ldr	r2, [pc, #52]	@ (80016a8 <LoopForever+0xe>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001674:	e002      	b.n	800167c <LoopCopyDataInit>

08001676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167a:	3304      	adds	r3, #4

0800167c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800167c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001680:	d3f9      	bcc.n	8001676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001682:	4a0a      	ldr	r2, [pc, #40]	@ (80016ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001684:	4c0a      	ldr	r4, [pc, #40]	@ (80016b0 <LoopForever+0x16>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001688:	e001      	b.n	800168e <LoopFillZerobss>

0800168a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800168c:	3204      	adds	r2, #4

0800168e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001690:	d3fb      	bcc.n	800168a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001692:	f004 fc8b 	bl	8005fac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001696:	f7fe fff3 	bl	8000680 <main>

0800169a <LoopForever>:

LoopForever:
    b LoopForever
 800169a:	e7fe      	b.n	800169a <LoopForever>
  ldr   r0, =_estack
 800169c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80016a8:	08006024 	.word	0x08006024
  ldr r2, =_sbss
 80016ac:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80016b0:	200002d4 	.word	0x200002d4

080016b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <ADC1_2_IRQHandler>

080016b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c0:	2003      	movs	r0, #3
 80016c2:	f001 fa39 	bl	8002b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016c6:	2000      	movs	r0, #0
 80016c8:	f000 f80e 	bl	80016e8 <HAL_InitTick>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	71fb      	strb	r3, [r7, #7]
 80016d6:	e001      	b.n	80016dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016d8:	f7ff fd84 	bl	80011e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016dc:	79fb      	ldrb	r3, [r7, #7]

}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016f4:	4b16      	ldr	r3, [pc, #88]	@ (8001750 <HAL_InitTick+0x68>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d022      	beq.n	8001742 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016fc:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <HAL_InitTick+0x6c>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <HAL_InitTick+0x68>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001708:	fbb1 f3f3 	udiv	r3, r1, r3
 800170c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001710:	4618      	mov	r0, r3
 8001712:	f001 fa44 	bl	8002b9e <HAL_SYSTICK_Config>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10f      	bne.n	800173c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b0f      	cmp	r3, #15
 8001720:	d809      	bhi.n	8001736 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001722:	2200      	movs	r2, #0
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	f04f 30ff 	mov.w	r0, #4294967295
 800172a:	f001 fa10 	bl	8002b4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800172e:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <HAL_InitTick+0x70>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	e007      	b.n	8001746 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	73fb      	strb	r3, [r7, #15]
 800173a:	e004      	b.n	8001746 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e001      	b.n	8001746 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001746:	7bfb      	ldrb	r3, [r7, #15]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000010 	.word	0x20000010
 8001754:	20000008 	.word	0x20000008
 8001758:	2000000c 	.word	0x2000000c

0800175c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001760:	4b05      	ldr	r3, [pc, #20]	@ (8001778 <HAL_IncTick+0x1c>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b05      	ldr	r3, [pc, #20]	@ (800177c <HAL_IncTick+0x20>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4413      	add	r3, r2
 800176a:	4a03      	ldr	r2, [pc, #12]	@ (8001778 <HAL_IncTick+0x1c>)
 800176c:	6013      	str	r3, [r2, #0]
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	200002d0 	.word	0x200002d0
 800177c:	20000010 	.word	0x20000010

08001780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return uwTick;
 8001784:	4b03      	ldr	r3, [pc, #12]	@ (8001794 <HAL_GetTick+0x14>)
 8001786:	681b      	ldr	r3, [r3, #0]
}
 8001788:	4618      	mov	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	200002d0 	.word	0x200002d0

08001798 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	609a      	str	r2, [r3, #8]
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	609a      	str	r2, [r3, #8]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	3360      	adds	r3, #96	@ 0x60
 8001812:	461a      	mov	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <LL_ADC_SetOffset+0x44>)
 8001822:	4013      	ands	r3, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	4313      	orrs	r3, r2
 8001830:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001838:	bf00      	nop
 800183a:	371c      	adds	r7, #28
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	03fff000 	.word	0x03fff000

08001848 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3360      	adds	r3, #96	@ 0x60
 8001856:	461a      	mov	r2, r3
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001868:	4618      	mov	r0, r3
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3360      	adds	r3, #96	@ 0x60
 8001884:	461a      	mov	r2, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	431a      	orrs	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800189e:	bf00      	nop
 80018a0:	371c      	adds	r7, #28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b087      	sub	sp, #28
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3360      	adds	r3, #96	@ 0x60
 80018ba:	461a      	mov	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	431a      	orrs	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80018d4:	bf00      	nop
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3360      	adds	r3, #96	@ 0x60
 80018f0:	461a      	mov	r2, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	431a      	orrs	r2, r3
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800190a:	bf00      	nop
 800190c:	371c      	adds	r7, #28
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	615a      	str	r2, [r3, #20]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800193c:	b480      	push	{r7}
 800193e:	b087      	sub	sp, #28
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	3330      	adds	r3, #48	@ 0x30
 800194c:	461a      	mov	r2, r3
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	4413      	add	r3, r2
 800195a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f003 031f 	and.w	r3, r3, #31
 8001966:	211f      	movs	r1, #31
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	401a      	ands	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	0e9b      	lsrs	r3, r3, #26
 8001974:	f003 011f 	and.w	r1, r3, #31
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	f003 031f 	and.w	r3, r3, #31
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	431a      	orrs	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001988:	bf00      	nop
 800198a:	371c      	adds	r7, #28
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3314      	adds	r3, #20
 80019a4:	461a      	mov	r2, r3
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	0e5b      	lsrs	r3, r3, #25
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	4413      	add	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	0d1b      	lsrs	r3, r3, #20
 80019bc:	f003 031f 	and.w	r3, r3, #31
 80019c0:	2107      	movs	r1, #7
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	401a      	ands	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	0d1b      	lsrs	r3, r3, #20
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	fa01 f303 	lsl.w	r3, r1, r3
 80019d8:	431a      	orrs	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019de:	bf00      	nop
 80019e0:	371c      	adds	r7, #28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a04:	43db      	mvns	r3, r3
 8001a06:	401a      	ands	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0318 	and.w	r3, r3, #24
 8001a0e:	4908      	ldr	r1, [pc, #32]	@ (8001a30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a10:	40d9      	lsrs	r1, r3
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	400b      	ands	r3, r1
 8001a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a22:	bf00      	nop
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	0007ffff 	.word	0x0007ffff

08001a34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001a44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6093      	str	r3, [r2, #8]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a6c:	d101      	bne.n	8001a72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001a90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a94:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001abc:	d101      	bne.n	8001ac2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <LL_ADC_IsEnabled+0x18>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <LL_ADC_IsEnabled+0x1a>
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d101      	bne.n	8001b0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d101      	bne.n	8001b34 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b089      	sub	sp, #36	@ 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e1a9      	b.n	8001eb2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d109      	bne.n	8001b80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fb5d 	bl	800122c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff67 	bl	8001a58 <LL_ADC_IsDeepPowerDownEnabled>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d004      	beq.n	8001b9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff4d 	bl	8001a34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff82 	bl	8001aa8 <LL_ADC_IsInternalRegulatorEnabled>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d115      	bne.n	8001bd6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ff66 	bl	8001a80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bb4:	4b9c      	ldr	r3, [pc, #624]	@ (8001e28 <HAL_ADC_Init+0x2e4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	099b      	lsrs	r3, r3, #6
 8001bba:	4a9c      	ldr	r2, [pc, #624]	@ (8001e2c <HAL_ADC_Init+0x2e8>)
 8001bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc0:	099b      	lsrs	r3, r3, #6
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bc8:	e002      	b.n	8001bd0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f9      	bne.n	8001bca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ff64 	bl	8001aa8 <LL_ADC_IsInternalRegulatorEnabled>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10d      	bne.n	8001c02 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bea:	f043 0210 	orr.w	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bf6:	f043 0201 	orr.w	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff75 	bl	8001af6 <LL_ADC_REG_IsConversionOngoing>
 8001c0c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f040 8142 	bne.w	8001ea0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f040 813e 	bne.w	8001ea0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c28:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c2c:	f043 0202 	orr.w	r2, r3, #2
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff49 	bl	8001ad0 <LL_ADC_IsEnabled>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d141      	bne.n	8001cc8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c4c:	d004      	beq.n	8001c58 <HAL_ADC_Init+0x114>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a77      	ldr	r2, [pc, #476]	@ (8001e30 <HAL_ADC_Init+0x2ec>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d10f      	bne.n	8001c78 <HAL_ADC_Init+0x134>
 8001c58:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001c5c:	f7ff ff38 	bl	8001ad0 <LL_ADC_IsEnabled>
 8001c60:	4604      	mov	r4, r0
 8001c62:	4873      	ldr	r0, [pc, #460]	@ (8001e30 <HAL_ADC_Init+0x2ec>)
 8001c64:	f7ff ff34 	bl	8001ad0 <LL_ADC_IsEnabled>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4323      	orrs	r3, r4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf0c      	ite	eq
 8001c70:	2301      	moveq	r3, #1
 8001c72:	2300      	movne	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	e012      	b.n	8001c9e <HAL_ADC_Init+0x15a>
 8001c78:	486e      	ldr	r0, [pc, #440]	@ (8001e34 <HAL_ADC_Init+0x2f0>)
 8001c7a:	f7ff ff29 	bl	8001ad0 <LL_ADC_IsEnabled>
 8001c7e:	4604      	mov	r4, r0
 8001c80:	486d      	ldr	r0, [pc, #436]	@ (8001e38 <HAL_ADC_Init+0x2f4>)
 8001c82:	f7ff ff25 	bl	8001ad0 <LL_ADC_IsEnabled>
 8001c86:	4603      	mov	r3, r0
 8001c88:	431c      	orrs	r4, r3
 8001c8a:	486c      	ldr	r0, [pc, #432]	@ (8001e3c <HAL_ADC_Init+0x2f8>)
 8001c8c:	f7ff ff20 	bl	8001ad0 <LL_ADC_IsEnabled>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4323      	orrs	r3, r4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d012      	beq.n	8001cc8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001caa:	d004      	beq.n	8001cb6 <HAL_ADC_Init+0x172>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a5f      	ldr	r2, [pc, #380]	@ (8001e30 <HAL_ADC_Init+0x2ec>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d101      	bne.n	8001cba <HAL_ADC_Init+0x176>
 8001cb6:	4a62      	ldr	r2, [pc, #392]	@ (8001e40 <HAL_ADC_Init+0x2fc>)
 8001cb8:	e000      	b.n	8001cbc <HAL_ADC_Init+0x178>
 8001cba:	4a62      	ldr	r2, [pc, #392]	@ (8001e44 <HAL_ADC_Init+0x300>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	f7ff fd68 	bl	8001798 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7f5b      	ldrb	r3, [r3, #29]
 8001ccc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cd2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001cd8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001cde:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ce6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d106      	bne.n	8001d04 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	045b      	lsls	r3, r3, #17
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d009      	beq.n	8001d20 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d10:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d18:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	4b48      	ldr	r3, [pc, #288]	@ (8001e48 <HAL_ADC_Init+0x304>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	69b9      	ldr	r1, [r7, #24]
 8001d30:	430b      	orrs	r3, r1
 8001d32:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fee4 	bl	8001b1c <LL_ADC_INJ_IsConversionOngoing>
 8001d54:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d17f      	bne.n	8001e5c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d17c      	bne.n	8001e5c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d66:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d6e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d7e:	f023 0302 	bic.w	r3, r3, #2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	69b9      	ldr	r1, [r7, #24]
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d017      	beq.n	8001dc4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001da2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001dac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001db0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6911      	ldr	r1, [r2, #16]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001dc2:	e013      	b.n	8001dec <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691a      	ldr	r2, [r3, #16]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001dd2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001de4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001de8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d12a      	bne.n	8001e4c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e0c:	4311      	orrs	r1, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001e12:	4311      	orrs	r1, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 0201 	orr.w	r2, r2, #1
 8001e24:	611a      	str	r2, [r3, #16]
 8001e26:	e019      	b.n	8001e5c <HAL_ADC_Init+0x318>
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	053e2d63 	.word	0x053e2d63
 8001e30:	50000100 	.word	0x50000100
 8001e34:	50000400 	.word	0x50000400
 8001e38:	50000500 	.word	0x50000500
 8001e3c:	50000600 	.word	0x50000600
 8001e40:	50000300 	.word	0x50000300
 8001e44:	50000700 	.word	0x50000700
 8001e48:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691a      	ldr	r2, [r3, #16]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0201 	bic.w	r2, r2, #1
 8001e5a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d10c      	bne.n	8001e7e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	f023 010f 	bic.w	r1, r3, #15
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	1e5a      	subs	r2, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e7c:	e007      	b.n	8001e8e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 020f 	bic.w	r2, r2, #15
 8001e8c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e92:	f023 0303 	bic.w	r3, r3, #3
 8001e96:	f043 0201 	orr.w	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e9e:	e007      	b.n	8001eb0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea4:	f043 0210 	orr.w	r2, r3, #16
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001eb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	@ 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd90      	pop	{r4, r7, pc}
 8001eba:	bf00      	nop

08001ebc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b0b6      	sub	sp, #216	@ 0xd8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d102      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x24>
 8001eda:	2302      	movs	r3, #2
 8001edc:	f000 bc13 	b.w	8002706 <HAL_ADC_ConfigChannel+0x84a>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fe02 	bl	8001af6 <LL_ADC_REG_IsConversionOngoing>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f040 83f3 	bne.w	80026e0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6859      	ldr	r1, [r3, #4]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	f7ff fd18 	bl	800193c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fdf0 	bl	8001af6 <LL_ADC_REG_IsConversionOngoing>
 8001f16:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fdfc 	bl	8001b1c <LL_ADC_INJ_IsConversionOngoing>
 8001f24:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f040 81d9 	bne.w	80022e4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f040 81d4 	bne.w	80022e4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f44:	d10f      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	4619      	mov	r1, r3
 8001f52:	f7ff fd1f 	bl	8001994 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fcd9 	bl	8001916 <LL_ADC_SetSamplingTimeCommonConfig>
 8001f64:	e00e      	b.n	8001f84 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	6819      	ldr	r1, [r3, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	461a      	mov	r2, r3
 8001f74:	f7ff fd0e 	bl	8001994 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fcc9 	bl	8001916 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	08db      	lsrs	r3, r3, #3
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d022      	beq.n	8001fec <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6919      	ldr	r1, [r3, #16]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001fb6:	f7ff fc23 	bl	8001800 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	6919      	ldr	r1, [r3, #16]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	f7ff fc6f 	bl	80018aa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d102      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x126>
 8001fdc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fe0:	e000      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x128>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f7ff fc7b 	bl	80018e0 <LL_ADC_SetOffsetSaturation>
 8001fea:	e17b      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fc28 	bl	8001848 <LL_ADC_GetOffsetChannel>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10a      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x15c>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fc1d 	bl	8001848 <LL_ADC_GetOffsetChannel>
 800200e:	4603      	mov	r3, r0
 8002010:	0e9b      	lsrs	r3, r3, #26
 8002012:	f003 021f 	and.w	r2, r3, #31
 8002016:	e01e      	b.n	8002056 <HAL_ADC_ConfigChannel+0x19a>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fc12 	bl	8001848 <LL_ADC_GetOffsetChannel>
 8002024:	4603      	mov	r3, r0
 8002026:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002036:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800203a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800203e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002046:	2320      	movs	r3, #32
 8002048:	e004      	b.n	8002054 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800204a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205e:	2b00      	cmp	r3, #0
 8002060:	d105      	bne.n	800206e <HAL_ADC_ConfigChannel+0x1b2>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	0e9b      	lsrs	r3, r3, #26
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	e018      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x1e4>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002086:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800208a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002092:	2320      	movs	r3, #32
 8002094:	e004      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002096:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d106      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2200      	movs	r2, #0
 80020aa:	2100      	movs	r1, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fbe1 	bl	8001874 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2101      	movs	r1, #1
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fbc5 	bl	8001848 <LL_ADC_GetOffsetChannel>
 80020be:	4603      	mov	r3, r0
 80020c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10a      	bne.n	80020de <HAL_ADC_ConfigChannel+0x222>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2101      	movs	r1, #1
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fbba 	bl	8001848 <LL_ADC_GetOffsetChannel>
 80020d4:	4603      	mov	r3, r0
 80020d6:	0e9b      	lsrs	r3, r3, #26
 80020d8:	f003 021f 	and.w	r2, r3, #31
 80020dc:	e01e      	b.n	800211c <HAL_ADC_ConfigChannel+0x260>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2101      	movs	r1, #1
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fbaf 	bl	8001848 <LL_ADC_GetOffsetChannel>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80020fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002100:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002104:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800210c:	2320      	movs	r3, #32
 800210e:	e004      	b.n	800211a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002110:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002114:	fab3 f383 	clz	r3, r3
 8002118:	b2db      	uxtb	r3, r3
 800211a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002124:	2b00      	cmp	r3, #0
 8002126:	d105      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x278>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	0e9b      	lsrs	r3, r3, #26
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	e018      	b.n	8002166 <HAL_ADC_ConfigChannel+0x2aa>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002148:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800214c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002150:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002158:	2320      	movs	r3, #32
 800215a:	e004      	b.n	8002166 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800215c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002160:	fab3 f383 	clz	r3, r3
 8002164:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002166:	429a      	cmp	r2, r3
 8002168:	d106      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	2101      	movs	r1, #1
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fb7e 	bl	8001874 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2102      	movs	r1, #2
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fb62 	bl	8001848 <LL_ADC_GetOffsetChannel>
 8002184:	4603      	mov	r3, r0
 8002186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10a      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x2e8>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2102      	movs	r1, #2
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fb57 	bl	8001848 <LL_ADC_GetOffsetChannel>
 800219a:	4603      	mov	r3, r0
 800219c:	0e9b      	lsrs	r3, r3, #26
 800219e:	f003 021f 	and.w	r2, r3, #31
 80021a2:	e01e      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x326>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2102      	movs	r1, #2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fb4c 	bl	8001848 <LL_ADC_GetOffsetChannel>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80021c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80021ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80021d2:	2320      	movs	r3, #32
 80021d4:	e004      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80021d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021da:	fab3 f383 	clz	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d105      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x33e>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	0e9b      	lsrs	r3, r3, #26
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	e016      	b.n	8002228 <HAL_ADC_ConfigChannel+0x36c>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002206:	fa93 f3a3 	rbit	r3, r3
 800220a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800220c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800220e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002212:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800221a:	2320      	movs	r3, #32
 800221c:	e004      	b.n	8002228 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800221e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002228:	429a      	cmp	r2, r3
 800222a:	d106      	bne.n	800223a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2200      	movs	r2, #0
 8002232:	2102      	movs	r1, #2
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fb1d 	bl	8001874 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2103      	movs	r1, #3
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fb01 	bl	8001848 <LL_ADC_GetOffsetChannel>
 8002246:	4603      	mov	r3, r0
 8002248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10a      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x3aa>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2103      	movs	r1, #3
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff faf6 	bl	8001848 <LL_ADC_GetOffsetChannel>
 800225c:	4603      	mov	r3, r0
 800225e:	0e9b      	lsrs	r3, r3, #26
 8002260:	f003 021f 	and.w	r2, r3, #31
 8002264:	e017      	b.n	8002296 <HAL_ADC_ConfigChannel+0x3da>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2103      	movs	r1, #3
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff faeb 	bl	8001848 <LL_ADC_GetOffsetChannel>
 8002272:	4603      	mov	r3, r0
 8002274:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002278:	fa93 f3a3 	rbit	r3, r3
 800227c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800227e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002280:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002282:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002288:	2320      	movs	r3, #32
 800228a:	e003      	b.n	8002294 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800228c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d105      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x3f2>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	0e9b      	lsrs	r3, r3, #26
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	e011      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x416>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80022bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022be:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80022c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80022c6:	2320      	movs	r3, #32
 80022c8:	e003      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80022ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d106      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2200      	movs	r2, #0
 80022dc:	2103      	movs	r1, #3
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fac8 	bl	8001874 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fbf1 	bl	8001ad0 <LL_ADC_IsEnabled>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f040 813d 	bne.w	8002570 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6819      	ldr	r1, [r3, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	461a      	mov	r2, r3
 8002304:	f7ff fb72 	bl	80019ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4aa2      	ldr	r2, [pc, #648]	@ (8002598 <HAL_ADC_ConfigChannel+0x6dc>)
 800230e:	4293      	cmp	r3, r2
 8002310:	f040 812e 	bne.w	8002570 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10b      	bne.n	800233c <HAL_ADC_ConfigChannel+0x480>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	0e9b      	lsrs	r3, r3, #26
 800232a:	3301      	adds	r3, #1
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	2b09      	cmp	r3, #9
 8002332:	bf94      	ite	ls
 8002334:	2301      	movls	r3, #1
 8002336:	2300      	movhi	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	e019      	b.n	8002370 <HAL_ADC_ConfigChannel+0x4b4>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800234a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800234c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800234e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002354:	2320      	movs	r3, #32
 8002356:	e003      	b.n	8002360 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002358:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	3301      	adds	r3, #1
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	2b09      	cmp	r3, #9
 8002368:	bf94      	ite	ls
 800236a:	2301      	movls	r3, #1
 800236c:	2300      	movhi	r3, #0
 800236e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002370:	2b00      	cmp	r3, #0
 8002372:	d079      	beq.n	8002468 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237c:	2b00      	cmp	r3, #0
 800237e:	d107      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x4d4>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	0e9b      	lsrs	r3, r3, #26
 8002386:	3301      	adds	r3, #1
 8002388:	069b      	lsls	r3, r3, #26
 800238a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800238e:	e015      	b.n	80023bc <HAL_ADC_ConfigChannel+0x500>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002398:	fa93 f3a3 	rbit	r3, r3
 800239c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800239e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023a0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80023a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80023a8:	2320      	movs	r3, #32
 80023aa:	e003      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80023ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	3301      	adds	r3, #1
 80023b6:	069b      	lsls	r3, r3, #26
 80023b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d109      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x520>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	0e9b      	lsrs	r3, r3, #26
 80023ce:	3301      	adds	r3, #1
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	2101      	movs	r1, #1
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	e017      	b.n	800240c <HAL_ADC_ConfigChannel+0x550>
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023e4:	fa93 f3a3 	rbit	r3, r3
 80023e8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80023ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80023ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80023f4:	2320      	movs	r3, #32
 80023f6:	e003      	b.n	8002400 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80023f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	3301      	adds	r3, #1
 8002402:	f003 031f 	and.w	r3, r3, #31
 8002406:	2101      	movs	r1, #1
 8002408:	fa01 f303 	lsl.w	r3, r1, r3
 800240c:	ea42 0103 	orr.w	r1, r2, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x576>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	0e9b      	lsrs	r3, r3, #26
 8002422:	3301      	adds	r3, #1
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	4613      	mov	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4413      	add	r3, r2
 800242e:	051b      	lsls	r3, r3, #20
 8002430:	e018      	b.n	8002464 <HAL_ADC_ConfigChannel+0x5a8>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002442:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800244a:	2320      	movs	r3, #32
 800244c:	e003      	b.n	8002456 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800244e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	3301      	adds	r3, #1
 8002458:	f003 021f 	and.w	r2, r3, #31
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002464:	430b      	orrs	r3, r1
 8002466:	e07e      	b.n	8002566 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002470:	2b00      	cmp	r3, #0
 8002472:	d107      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x5c8>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	3301      	adds	r3, #1
 800247c:	069b      	lsls	r3, r3, #26
 800247e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002482:	e015      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x5f4>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002494:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800249c:	2320      	movs	r3, #32
 800249e:	e003      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80024a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a2:	fab3 f383 	clz	r3, r3
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	3301      	adds	r3, #1
 80024aa:	069b      	lsls	r3, r3, #26
 80024ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d109      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x614>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	0e9b      	lsrs	r3, r3, #26
 80024c2:	3301      	adds	r3, #1
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	2101      	movs	r1, #1
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	e017      	b.n	8002500 <HAL_ADC_ConfigChannel+0x644>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	61fb      	str	r3, [r7, #28]
  return result;
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80024e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80024e8:	2320      	movs	r3, #32
 80024ea:	e003      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	3301      	adds	r3, #1
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	2101      	movs	r1, #1
 80024fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002500:	ea42 0103 	orr.w	r1, r2, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10d      	bne.n	800252c <HAL_ADC_ConfigChannel+0x670>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	0e9b      	lsrs	r3, r3, #26
 8002516:	3301      	adds	r3, #1
 8002518:	f003 021f 	and.w	r2, r3, #31
 800251c:	4613      	mov	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	3b1e      	subs	r3, #30
 8002524:	051b      	lsls	r3, r3, #20
 8002526:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800252a:	e01b      	b.n	8002564 <HAL_ADC_ConfigChannel+0x6a8>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	fa93 f3a3 	rbit	r3, r3
 8002538:	613b      	str	r3, [r7, #16]
  return result;
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002544:	2320      	movs	r3, #32
 8002546:	e003      	b.n	8002550 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	3301      	adds	r3, #1
 8002552:	f003 021f 	and.w	r2, r3, #31
 8002556:	4613      	mov	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4413      	add	r3, r2
 800255c:	3b1e      	subs	r3, #30
 800255e:	051b      	lsls	r3, r3, #20
 8002560:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002564:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800256a:	4619      	mov	r1, r3
 800256c:	f7ff fa12 	bl	8001994 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b09      	ldr	r3, [pc, #36]	@ (800259c <HAL_ADC_ConfigChannel+0x6e0>)
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80be 	beq.w	80026fa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002586:	d004      	beq.n	8002592 <HAL_ADC_ConfigChannel+0x6d6>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a04      	ldr	r2, [pc, #16]	@ (80025a0 <HAL_ADC_ConfigChannel+0x6e4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d10a      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x6ec>
 8002592:	4b04      	ldr	r3, [pc, #16]	@ (80025a4 <HAL_ADC_ConfigChannel+0x6e8>)
 8002594:	e009      	b.n	80025aa <HAL_ADC_ConfigChannel+0x6ee>
 8002596:	bf00      	nop
 8002598:	407f0000 	.word	0x407f0000
 800259c:	80080000 	.word	0x80080000
 80025a0:	50000100 	.word	0x50000100
 80025a4:	50000300 	.word	0x50000300
 80025a8:	4b59      	ldr	r3, [pc, #356]	@ (8002710 <HAL_ADC_ConfigChannel+0x854>)
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff f91a 	bl	80017e4 <LL_ADC_GetCommonPathInternalCh>
 80025b0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a56      	ldr	r2, [pc, #344]	@ (8002714 <HAL_ADC_ConfigChannel+0x858>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d004      	beq.n	80025c8 <HAL_ADC_ConfigChannel+0x70c>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a55      	ldr	r2, [pc, #340]	@ (8002718 <HAL_ADC_ConfigChannel+0x85c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d13a      	bne.n	800263e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d134      	bne.n	800263e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025dc:	d005      	beq.n	80025ea <HAL_ADC_ConfigChannel+0x72e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a4e      	ldr	r2, [pc, #312]	@ (800271c <HAL_ADC_ConfigChannel+0x860>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	f040 8085 	bne.w	80026f4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025f2:	d004      	beq.n	80025fe <HAL_ADC_ConfigChannel+0x742>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a49      	ldr	r2, [pc, #292]	@ (8002720 <HAL_ADC_ConfigChannel+0x864>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x746>
 80025fe:	4a49      	ldr	r2, [pc, #292]	@ (8002724 <HAL_ADC_ConfigChannel+0x868>)
 8002600:	e000      	b.n	8002604 <HAL_ADC_ConfigChannel+0x748>
 8002602:	4a43      	ldr	r2, [pc, #268]	@ (8002710 <HAL_ADC_ConfigChannel+0x854>)
 8002604:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002608:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f7ff f8d5 	bl	80017be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002614:	4b44      	ldr	r3, [pc, #272]	@ (8002728 <HAL_ADC_ConfigChannel+0x86c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	099b      	lsrs	r3, r3, #6
 800261a:	4a44      	ldr	r2, [pc, #272]	@ (800272c <HAL_ADC_ConfigChannel+0x870>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	4613      	mov	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800262e:	e002      	b.n	8002636 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	3b01      	subs	r3, #1
 8002634:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f9      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800263c:	e05a      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a3b      	ldr	r2, [pc, #236]	@ (8002730 <HAL_ADC_ConfigChannel+0x874>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d125      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002648:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800264c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d11f      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a31      	ldr	r2, [pc, #196]	@ (8002720 <HAL_ADC_ConfigChannel+0x864>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d104      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x7ac>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a34      	ldr	r2, [pc, #208]	@ (8002734 <HAL_ADC_ConfigChannel+0x878>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d047      	beq.n	80026f8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002670:	d004      	beq.n	800267c <HAL_ADC_ConfigChannel+0x7c0>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a2a      	ldr	r2, [pc, #168]	@ (8002720 <HAL_ADC_ConfigChannel+0x864>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d101      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x7c4>
 800267c:	4a29      	ldr	r2, [pc, #164]	@ (8002724 <HAL_ADC_ConfigChannel+0x868>)
 800267e:	e000      	b.n	8002682 <HAL_ADC_ConfigChannel+0x7c6>
 8002680:	4a23      	ldr	r2, [pc, #140]	@ (8002710 <HAL_ADC_ConfigChannel+0x854>)
 8002682:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002686:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800268a:	4619      	mov	r1, r3
 800268c:	4610      	mov	r0, r2
 800268e:	f7ff f896 	bl	80017be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002692:	e031      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a27      	ldr	r2, [pc, #156]	@ (8002738 <HAL_ADC_ConfigChannel+0x87c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d12d      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800269e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d127      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002720 <HAL_ADC_ConfigChannel+0x864>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d022      	beq.n	80026fa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026bc:	d004      	beq.n	80026c8 <HAL_ADC_ConfigChannel+0x80c>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a17      	ldr	r2, [pc, #92]	@ (8002720 <HAL_ADC_ConfigChannel+0x864>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d101      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x810>
 80026c8:	4a16      	ldr	r2, [pc, #88]	@ (8002724 <HAL_ADC_ConfigChannel+0x868>)
 80026ca:	e000      	b.n	80026ce <HAL_ADC_ConfigChannel+0x812>
 80026cc:	4a10      	ldr	r2, [pc, #64]	@ (8002710 <HAL_ADC_ConfigChannel+0x854>)
 80026ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026d6:	4619      	mov	r1, r3
 80026d8:	4610      	mov	r0, r2
 80026da:	f7ff f870 	bl	80017be <LL_ADC_SetCommonPathInternalCh>
 80026de:	e00c      	b.n	80026fa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e4:	f043 0220 	orr.w	r2, r3, #32
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80026f2:	e002      	b.n	80026fa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026f4:	bf00      	nop
 80026f6:	e000      	b.n	80026fa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002702:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002706:	4618      	mov	r0, r3
 8002708:	37d8      	adds	r7, #216	@ 0xd8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	50000700 	.word	0x50000700
 8002714:	c3210000 	.word	0xc3210000
 8002718:	90c00010 	.word	0x90c00010
 800271c:	50000600 	.word	0x50000600
 8002720:	50000100 	.word	0x50000100
 8002724:	50000300 	.word	0x50000300
 8002728:	20000008 	.word	0x20000008
 800272c:	053e2d63 	.word	0x053e2d63
 8002730:	c7520000 	.word	0xc7520000
 8002734:	50000500 	.word	0x50000500
 8002738:	cb840000 	.word	0xcb840000

0800273c <LL_ADC_IsEnabled>:
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <LL_ADC_IsEnabled+0x18>
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <LL_ADC_IsEnabled+0x1a>
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <LL_ADC_REG_IsConversionOngoing>:
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b04      	cmp	r3, #4
 8002774:	d101      	bne.n	800277a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b0a1      	sub	sp, #132	@ 0x84
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e0e7      	b.n	8002976 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80027ae:	2300      	movs	r3, #0
 80027b0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80027b2:	2300      	movs	r3, #0
 80027b4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027be:	d102      	bne.n	80027c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80027c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002980 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	e009      	b.n	80027da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002984 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d102      	bne.n	80027d6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80027d0:	4b6d      	ldr	r3, [pc, #436]	@ (8002988 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	e001      	b.n	80027da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10b      	bne.n	80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0be      	b.n	8002976 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ffb1 	bl	8002762 <LL_ADC_REG_IsConversionOngoing>
 8002800:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff ffab 	bl	8002762 <LL_ADC_REG_IsConversionOngoing>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	f040 80a0 	bne.w	8002954 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002814:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002816:	2b00      	cmp	r3, #0
 8002818:	f040 809c 	bne.w	8002954 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002824:	d004      	beq.n	8002830 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a55      	ldr	r2, [pc, #340]	@ (8002980 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d101      	bne.n	8002834 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002830:	4b56      	ldr	r3, [pc, #344]	@ (800298c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002832:	e000      	b.n	8002836 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002834:	4b56      	ldr	r3, [pc, #344]	@ (8002990 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002836:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d04b      	beq.n	80028d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002840:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	6859      	ldr	r1, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002852:	035b      	lsls	r3, r3, #13
 8002854:	430b      	orrs	r3, r1
 8002856:	431a      	orrs	r2, r3
 8002858:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800285a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002864:	d004      	beq.n	8002870 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a45      	ldr	r2, [pc, #276]	@ (8002980 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d10f      	bne.n	8002890 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002870:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002874:	f7ff ff62 	bl	800273c <LL_ADC_IsEnabled>
 8002878:	4604      	mov	r4, r0
 800287a:	4841      	ldr	r0, [pc, #260]	@ (8002980 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800287c:	f7ff ff5e 	bl	800273c <LL_ADC_IsEnabled>
 8002880:	4603      	mov	r3, r0
 8002882:	4323      	orrs	r3, r4
 8002884:	2b00      	cmp	r3, #0
 8002886:	bf0c      	ite	eq
 8002888:	2301      	moveq	r3, #1
 800288a:	2300      	movne	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	e012      	b.n	80028b6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002890:	483c      	ldr	r0, [pc, #240]	@ (8002984 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002892:	f7ff ff53 	bl	800273c <LL_ADC_IsEnabled>
 8002896:	4604      	mov	r4, r0
 8002898:	483b      	ldr	r0, [pc, #236]	@ (8002988 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800289a:	f7ff ff4f 	bl	800273c <LL_ADC_IsEnabled>
 800289e:	4603      	mov	r3, r0
 80028a0:	431c      	orrs	r4, r3
 80028a2:	483c      	ldr	r0, [pc, #240]	@ (8002994 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80028a4:	f7ff ff4a 	bl	800273c <LL_ADC_IsEnabled>
 80028a8:	4603      	mov	r3, r0
 80028aa:	4323      	orrs	r3, r4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d056      	beq.n	8002968 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80028ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80028c2:	f023 030f 	bic.w	r3, r3, #15
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	6811      	ldr	r1, [r2, #0]
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	6892      	ldr	r2, [r2, #8]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	431a      	orrs	r2, r3
 80028d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028d4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028d6:	e047      	b.n	8002968 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80028d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028e2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028ec:	d004      	beq.n	80028f8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a23      	ldr	r2, [pc, #140]	@ (8002980 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d10f      	bne.n	8002918 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80028f8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80028fc:	f7ff ff1e 	bl	800273c <LL_ADC_IsEnabled>
 8002900:	4604      	mov	r4, r0
 8002902:	481f      	ldr	r0, [pc, #124]	@ (8002980 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002904:	f7ff ff1a 	bl	800273c <LL_ADC_IsEnabled>
 8002908:	4603      	mov	r3, r0
 800290a:	4323      	orrs	r3, r4
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	e012      	b.n	800293e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002918:	481a      	ldr	r0, [pc, #104]	@ (8002984 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800291a:	f7ff ff0f 	bl	800273c <LL_ADC_IsEnabled>
 800291e:	4604      	mov	r4, r0
 8002920:	4819      	ldr	r0, [pc, #100]	@ (8002988 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002922:	f7ff ff0b 	bl	800273c <LL_ADC_IsEnabled>
 8002926:	4603      	mov	r3, r0
 8002928:	431c      	orrs	r4, r3
 800292a:	481a      	ldr	r0, [pc, #104]	@ (8002994 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800292c:	f7ff ff06 	bl	800273c <LL_ADC_IsEnabled>
 8002930:	4603      	mov	r3, r0
 8002932:	4323      	orrs	r3, r4
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d012      	beq.n	8002968 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002942:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800294a:	f023 030f 	bic.w	r3, r3, #15
 800294e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002950:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002952:	e009      	b.n	8002968 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002958:	f043 0220 	orr.w	r2, r3, #32
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002966:	e000      	b.n	800296a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002968:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002972:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002976:	4618      	mov	r0, r3
 8002978:	3784      	adds	r7, #132	@ 0x84
 800297a:	46bd      	mov	sp, r7
 800297c:	bd90      	pop	{r4, r7, pc}
 800297e:	bf00      	nop
 8002980:	50000100 	.word	0x50000100
 8002984:	50000400 	.word	0x50000400
 8002988:	50000500 	.word	0x50000500
 800298c:	50000300 	.word	0x50000300
 8002990:	50000700 	.word	0x50000700
 8002994:	50000600 	.word	0x50000600

08002998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a8:	4b0c      	ldr	r3, [pc, #48]	@ (80029dc <__NVIC_SetPriorityGrouping+0x44>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029b4:	4013      	ands	r3, r2
 80029b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ca:	4a04      	ldr	r2, [pc, #16]	@ (80029dc <__NVIC_SetPriorityGrouping+0x44>)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	60d3      	str	r3, [r2, #12]
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e4:	4b04      	ldr	r3, [pc, #16]	@ (80029f8 <__NVIC_GetPriorityGrouping+0x18>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	0a1b      	lsrs	r3, r3, #8
 80029ea:	f003 0307 	and.w	r3, r3, #7
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	db0b      	blt.n	8002a26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	f003 021f 	and.w	r2, r3, #31
 8002a14:	4907      	ldr	r1, [pc, #28]	@ (8002a34 <__NVIC_EnableIRQ+0x38>)
 8002a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	e000e100 	.word	0xe000e100

08002a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	6039      	str	r1, [r7, #0]
 8002a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	db0a      	blt.n	8002a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	490c      	ldr	r1, [pc, #48]	@ (8002a84 <__NVIC_SetPriority+0x4c>)
 8002a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a56:	0112      	lsls	r2, r2, #4
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a60:	e00a      	b.n	8002a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4908      	ldr	r1, [pc, #32]	@ (8002a88 <__NVIC_SetPriority+0x50>)
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	3b04      	subs	r3, #4
 8002a70:	0112      	lsls	r2, r2, #4
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	440b      	add	r3, r1
 8002a76:	761a      	strb	r2, [r3, #24]
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000e100 	.word	0xe000e100
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b089      	sub	sp, #36	@ 0x24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f1c3 0307 	rsb	r3, r3, #7
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	bf28      	it	cs
 8002aaa:	2304      	movcs	r3, #4
 8002aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	2b06      	cmp	r3, #6
 8002ab4:	d902      	bls.n	8002abc <NVIC_EncodePriority+0x30>
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3b03      	subs	r3, #3
 8002aba:	e000      	b.n	8002abe <NVIC_EncodePriority+0x32>
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43da      	mvns	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	401a      	ands	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	fa01 f303 	lsl.w	r3, r1, r3
 8002ade:	43d9      	mvns	r1, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae4:	4313      	orrs	r3, r2
         );
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3724      	adds	r7, #36	@ 0x24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b04:	d301      	bcc.n	8002b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b06:	2301      	movs	r3, #1
 8002b08:	e00f      	b.n	8002b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b34 <SysTick_Config+0x40>)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b12:	210f      	movs	r1, #15
 8002b14:	f04f 30ff 	mov.w	r0, #4294967295
 8002b18:	f7ff ff8e 	bl	8002a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b1c:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <SysTick_Config+0x40>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b22:	4b04      	ldr	r3, [pc, #16]	@ (8002b34 <SysTick_Config+0x40>)
 8002b24:	2207      	movs	r2, #7
 8002b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	e000e010 	.word	0xe000e010

08002b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff ff29 	bl	8002998 <__NVIC_SetPriorityGrouping>
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b086      	sub	sp, #24
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	4603      	mov	r3, r0
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b5c:	f7ff ff40 	bl	80029e0 <__NVIC_GetPriorityGrouping>
 8002b60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68b9      	ldr	r1, [r7, #8]
 8002b66:	6978      	ldr	r0, [r7, #20]
 8002b68:	f7ff ff90 	bl	8002a8c <NVIC_EncodePriority>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff5f 	bl	8002a38 <__NVIC_SetPriority>
}
 8002b7a:	bf00      	nop
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	4603      	mov	r3, r0
 8002b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff33 	bl	80029fc <__NVIC_EnableIRQ>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff ffa4 	bl	8002af4 <SysTick_Config>
 8002bac:	4603      	mov	r3, r0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e08d      	b.n	8002ce6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4b47      	ldr	r3, [pc, #284]	@ (8002cf0 <HAL_DMA_Init+0x138>)
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d80f      	bhi.n	8002bf6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4b45      	ldr	r3, [pc, #276]	@ (8002cf4 <HAL_DMA_Init+0x13c>)
 8002bde:	4413      	add	r3, r2
 8002be0:	4a45      	ldr	r2, [pc, #276]	@ (8002cf8 <HAL_DMA_Init+0x140>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	091b      	lsrs	r3, r3, #4
 8002be8:	009a      	lsls	r2, r3, #2
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a42      	ldr	r2, [pc, #264]	@ (8002cfc <HAL_DMA_Init+0x144>)
 8002bf2:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bf4:	e00e      	b.n	8002c14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	4b40      	ldr	r3, [pc, #256]	@ (8002d00 <HAL_DMA_Init+0x148>)
 8002bfe:	4413      	add	r3, r2
 8002c00:	4a3d      	ldr	r2, [pc, #244]	@ (8002cf8 <HAL_DMA_Init+0x140>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	091b      	lsrs	r3, r3, #4
 8002c08:	009a      	lsls	r2, r3, #2
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a3c      	ldr	r2, [pc, #240]	@ (8002d04 <HAL_DMA_Init+0x14c>)
 8002c12:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f8fe 	bl	8002e68 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c74:	d102      	bne.n	8002c7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c90:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d010      	beq.n	8002cbc <HAL_DMA_Init+0x104>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d80c      	bhi.n	8002cbc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f91e 	bl	8002ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	e008      	b.n	8002cce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40020407 	.word	0x40020407
 8002cf4:	bffdfff8 	.word	0xbffdfff8
 8002cf8:	cccccccd 	.word	0xcccccccd
 8002cfc:	40020000 	.word	0x40020000
 8002d00:	bffdfbf8 	.word	0xbffdfbf8
 8002d04:	40020400 	.word	0x40020400

08002d08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	2204      	movs	r2, #4
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d026      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x7a>
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d021      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d107      	bne.n	8002d5c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0204 	bic.w	r2, r2, #4
 8002d5a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d60:	f003 021f 	and.w	r2, r3, #31
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	2104      	movs	r1, #4
 8002d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d071      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002d80:	e06c      	b.n	8002e5c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d86:	f003 031f 	and.w	r3, r3, #31
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d02e      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d029      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10b      	bne.n	8002dc6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 020a 	bic.w	r2, r2, #10
 8002dbc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dca:	f003 021f 	and.w	r2, r3, #31
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	2102      	movs	r1, #2
 8002dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d038      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002df2:	e033      	b.n	8002e5c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	2208      	movs	r2, #8
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d02a      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d025      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 020e 	bic.w	r2, r2, #14
 8002e20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e26:	f003 021f 	and.w	r2, r3, #31
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	2101      	movs	r1, #1
 8002e30:	fa01 f202 	lsl.w	r2, r1, r2
 8002e34:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d004      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
}
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b16      	ldr	r3, [pc, #88]	@ (8002ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d802      	bhi.n	8002e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002e7c:	4b15      	ldr	r3, [pc, #84]	@ (8002ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	e001      	b.n	8002e86 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002e82:	4b15      	ldr	r3, [pc, #84]	@ (8002ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002e84:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	3b08      	subs	r3, #8
 8002e92:	4a12      	ldr	r2, [pc, #72]	@ (8002edc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea0:	089b      	lsrs	r3, r3, #2
 8002ea2:	009a      	lsls	r2, r3, #2
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002eb2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	2201      	movs	r2, #1
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002ec2:	bf00      	nop
 8002ec4:	371c      	adds	r7, #28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40020407 	.word	0x40020407
 8002ed4:	40020800 	.word	0x40020800
 8002ed8:	40020820 	.word	0x40020820
 8002edc:	cccccccd 	.word	0xcccccccd
 8002ee0:	40020880 	.word	0x40020880

08002ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	461a      	mov	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a08      	ldr	r2, [pc, #32]	@ (8002f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002f06:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	2201      	movs	r2, #1
 8002f12:	409a      	lsls	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	1000823f 	.word	0x1000823f
 8002f28:	40020940 	.word	0x40020940

08002f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f3a:	e15a      	b.n	80031f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	2101      	movs	r1, #1
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	fa01 f303 	lsl.w	r3, r1, r3
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 814c 	beq.w	80031ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d005      	beq.n	8002f6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d130      	bne.n	8002fce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	2203      	movs	r2, #3
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	f003 0201 	and.w	r2, r3, #1
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d017      	beq.n	800300a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d123      	bne.n	800305e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	08da      	lsrs	r2, r3, #3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3208      	adds	r2, #8
 800301e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003022:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	220f      	movs	r2, #15
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4013      	ands	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	691a      	ldr	r2, [r3, #16]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	08da      	lsrs	r2, r3, #3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3208      	adds	r2, #8
 8003058:	6939      	ldr	r1, [r7, #16]
 800305a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	2203      	movs	r2, #3
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4013      	ands	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 0203 	and.w	r2, r3, #3
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 80a6 	beq.w	80031ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a0:	4b5b      	ldr	r3, [pc, #364]	@ (8003210 <HAL_GPIO_Init+0x2e4>)
 80030a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a4:	4a5a      	ldr	r2, [pc, #360]	@ (8003210 <HAL_GPIO_Init+0x2e4>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80030ac:	4b58      	ldr	r3, [pc, #352]	@ (8003210 <HAL_GPIO_Init+0x2e4>)
 80030ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030b8:	4a56      	ldr	r2, [pc, #344]	@ (8003214 <HAL_GPIO_Init+0x2e8>)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	089b      	lsrs	r3, r3, #2
 80030be:	3302      	adds	r3, #2
 80030c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	220f      	movs	r2, #15
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4013      	ands	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030e2:	d01f      	beq.n	8003124 <HAL_GPIO_Init+0x1f8>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a4c      	ldr	r2, [pc, #304]	@ (8003218 <HAL_GPIO_Init+0x2ec>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d019      	beq.n	8003120 <HAL_GPIO_Init+0x1f4>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a4b      	ldr	r2, [pc, #300]	@ (800321c <HAL_GPIO_Init+0x2f0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d013      	beq.n	800311c <HAL_GPIO_Init+0x1f0>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a4a      	ldr	r2, [pc, #296]	@ (8003220 <HAL_GPIO_Init+0x2f4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00d      	beq.n	8003118 <HAL_GPIO_Init+0x1ec>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a49      	ldr	r2, [pc, #292]	@ (8003224 <HAL_GPIO_Init+0x2f8>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d007      	beq.n	8003114 <HAL_GPIO_Init+0x1e8>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a48      	ldr	r2, [pc, #288]	@ (8003228 <HAL_GPIO_Init+0x2fc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d101      	bne.n	8003110 <HAL_GPIO_Init+0x1e4>
 800310c:	2305      	movs	r3, #5
 800310e:	e00a      	b.n	8003126 <HAL_GPIO_Init+0x1fa>
 8003110:	2306      	movs	r3, #6
 8003112:	e008      	b.n	8003126 <HAL_GPIO_Init+0x1fa>
 8003114:	2304      	movs	r3, #4
 8003116:	e006      	b.n	8003126 <HAL_GPIO_Init+0x1fa>
 8003118:	2303      	movs	r3, #3
 800311a:	e004      	b.n	8003126 <HAL_GPIO_Init+0x1fa>
 800311c:	2302      	movs	r3, #2
 800311e:	e002      	b.n	8003126 <HAL_GPIO_Init+0x1fa>
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <HAL_GPIO_Init+0x1fa>
 8003124:	2300      	movs	r3, #0
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	f002 0203 	and.w	r2, r2, #3
 800312c:	0092      	lsls	r2, r2, #2
 800312e:	4093      	lsls	r3, r2
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003136:	4937      	ldr	r1, [pc, #220]	@ (8003214 <HAL_GPIO_Init+0x2e8>)
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	089b      	lsrs	r3, r3, #2
 800313c:	3302      	adds	r3, #2
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003144:	4b39      	ldr	r3, [pc, #228]	@ (800322c <HAL_GPIO_Init+0x300>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	43db      	mvns	r3, r3
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003168:	4a30      	ldr	r2, [pc, #192]	@ (800322c <HAL_GPIO_Init+0x300>)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800316e:	4b2f      	ldr	r3, [pc, #188]	@ (800322c <HAL_GPIO_Init+0x300>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	43db      	mvns	r3, r3
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4013      	ands	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003192:	4a26      	ldr	r2, [pc, #152]	@ (800322c <HAL_GPIO_Init+0x300>)
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003198:	4b24      	ldr	r3, [pc, #144]	@ (800322c <HAL_GPIO_Init+0x300>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	43db      	mvns	r3, r3
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4013      	ands	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031bc:	4a1b      	ldr	r2, [pc, #108]	@ (800322c <HAL_GPIO_Init+0x300>)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031c2:	4b1a      	ldr	r3, [pc, #104]	@ (800322c <HAL_GPIO_Init+0x300>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	43db      	mvns	r3, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4013      	ands	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031e6:	4a11      	ldr	r2, [pc, #68]	@ (800322c <HAL_GPIO_Init+0x300>)
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	3301      	adds	r3, #1
 80031f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	fa22 f303 	lsr.w	r3, r2, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f47f ae9d 	bne.w	8002f3c <HAL_GPIO_Init+0x10>
  }
}
 8003202:	bf00      	nop
 8003204:	bf00      	nop
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	40021000 	.word	0x40021000
 8003214:	40010000 	.word	0x40010000
 8003218:	48000400 	.word	0x48000400
 800321c:	48000800 	.word	0x48000800
 8003220:	48000c00 	.word	0x48000c00
 8003224:	48001000 	.word	0x48001000
 8003228:	48001400 	.word	0x48001400
 800322c:	40010400 	.word	0x40010400

08003230 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	887b      	ldrh	r3, [r7, #2]
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
 800324c:	e001      	b.n	8003252 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800324e:	2300      	movs	r3, #0
 8003250:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003252:	7bfb      	ldrb	r3, [r7, #15]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	807b      	strh	r3, [r7, #2]
 800326c:	4613      	mov	r3, r2
 800326e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003270:	787b      	ldrb	r3, [r7, #1]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003276:	887a      	ldrh	r2, [r7, #2]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800327c:	e002      	b.n	8003284 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800327e:	887a      	ldrh	r2, [r7, #2]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800329a:	4b08      	ldr	r3, [pc, #32]	@ (80032bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d006      	beq.n	80032b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032a6:	4a05      	ldr	r2, [pc, #20]	@ (80032bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032ac:	88fb      	ldrh	r3, [r7, #6]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd ff20 	bl	80010f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40010400 	.word	0x40010400

080032c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d141      	bne.n	8003352 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032ce:	4b4b      	ldr	r3, [pc, #300]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032da:	d131      	bne.n	8003340 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032dc:	4b47      	ldr	r3, [pc, #284]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032e2:	4a46      	ldr	r2, [pc, #280]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032ec:	4b43      	ldr	r3, [pc, #268]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032f4:	4a41      	ldr	r2, [pc, #260]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032fc:	4b40      	ldr	r3, [pc, #256]	@ (8003400 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2232      	movs	r2, #50	@ 0x32
 8003302:	fb02 f303 	mul.w	r3, r2, r3
 8003306:	4a3f      	ldr	r2, [pc, #252]	@ (8003404 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	0c9b      	lsrs	r3, r3, #18
 800330e:	3301      	adds	r3, #1
 8003310:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003312:	e002      	b.n	800331a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	3b01      	subs	r3, #1
 8003318:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800331a:	4b38      	ldr	r3, [pc, #224]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003326:	d102      	bne.n	800332e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f2      	bne.n	8003314 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800332e:	4b33      	ldr	r3, [pc, #204]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800333a:	d158      	bne.n	80033ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e057      	b.n	80033f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003340:	4b2e      	ldr	r3, [pc, #184]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003346:	4a2d      	ldr	r2, [pc, #180]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800334c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003350:	e04d      	b.n	80033ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003358:	d141      	bne.n	80033de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800335a:	4b28      	ldr	r3, [pc, #160]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003366:	d131      	bne.n	80033cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003368:	4b24      	ldr	r3, [pc, #144]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800336e:	4a23      	ldr	r2, [pc, #140]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003374:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003378:	4b20      	ldr	r3, [pc, #128]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003380:	4a1e      	ldr	r2, [pc, #120]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003382:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003386:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003388:	4b1d      	ldr	r3, [pc, #116]	@ (8003400 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2232      	movs	r2, #50	@ 0x32
 800338e:	fb02 f303 	mul.w	r3, r2, r3
 8003392:	4a1c      	ldr	r2, [pc, #112]	@ (8003404 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	0c9b      	lsrs	r3, r3, #18
 800339a:	3301      	adds	r3, #1
 800339c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800339e:	e002      	b.n	80033a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033a6:	4b15      	ldr	r3, [pc, #84]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033b2:	d102      	bne.n	80033ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f2      	bne.n	80033a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033ba:	4b10      	ldr	r3, [pc, #64]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c6:	d112      	bne.n	80033ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e011      	b.n	80033f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033cc:	4b0b      	ldr	r3, [pc, #44]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033d2:	4a0a      	ldr	r2, [pc, #40]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80033dc:	e007      	b.n	80033ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033de:	4b07      	ldr	r3, [pc, #28]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033e6:	4a05      	ldr	r2, [pc, #20]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	40007000 	.word	0x40007000
 8003400:	20000008 	.word	0x20000008
 8003404:	431bde83 	.word	0x431bde83

08003408 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800340c:	4b05      	ldr	r3, [pc, #20]	@ (8003424 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	4a04      	ldr	r2, [pc, #16]	@ (8003424 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003412:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003416:	6093      	str	r3, [r2, #8]
}
 8003418:	bf00      	nop
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40007000 	.word	0x40007000

08003428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e2fe      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d075      	beq.n	8003532 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003446:	4b97      	ldr	r3, [pc, #604]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003450:	4b94      	ldr	r3, [pc, #592]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	2b0c      	cmp	r3, #12
 800345e:	d102      	bne.n	8003466 <HAL_RCC_OscConfig+0x3e>
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2b03      	cmp	r3, #3
 8003464:	d002      	beq.n	800346c <HAL_RCC_OscConfig+0x44>
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b08      	cmp	r3, #8
 800346a:	d10b      	bne.n	8003484 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346c:	4b8d      	ldr	r3, [pc, #564]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d05b      	beq.n	8003530 <HAL_RCC_OscConfig+0x108>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d157      	bne.n	8003530 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e2d9      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800348c:	d106      	bne.n	800349c <HAL_RCC_OscConfig+0x74>
 800348e:	4b85      	ldr	r3, [pc, #532]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a84      	ldr	r2, [pc, #528]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 8003494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	e01d      	b.n	80034d8 <HAL_RCC_OscConfig+0xb0>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x98>
 80034a6:	4b7f      	ldr	r3, [pc, #508]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a7e      	ldr	r2, [pc, #504]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80034ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	4b7c      	ldr	r3, [pc, #496]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a7b      	ldr	r2, [pc, #492]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80034b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	e00b      	b.n	80034d8 <HAL_RCC_OscConfig+0xb0>
 80034c0:	4b78      	ldr	r3, [pc, #480]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a77      	ldr	r2, [pc, #476]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80034c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	4b75      	ldr	r3, [pc, #468]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a74      	ldr	r2, [pc, #464]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80034d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d013      	beq.n	8003508 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fe f94e 	bl	8001780 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e8:	f7fe f94a 	bl	8001780 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	@ 0x64
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e29e      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034fa:	4b6a      	ldr	r3, [pc, #424]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0xc0>
 8003506:	e014      	b.n	8003532 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7fe f93a 	bl	8001780 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003510:	f7fe f936 	bl	8001780 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b64      	cmp	r3, #100	@ 0x64
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e28a      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003522:	4b60      	ldr	r3, [pc, #384]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0xe8>
 800352e:	e000      	b.n	8003532 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d075      	beq.n	800362a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800353e:	4b59      	ldr	r3, [pc, #356]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003548:	4b56      	ldr	r3, [pc, #344]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	2b0c      	cmp	r3, #12
 8003556:	d102      	bne.n	800355e <HAL_RCC_OscConfig+0x136>
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d002      	beq.n	8003564 <HAL_RCC_OscConfig+0x13c>
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	2b04      	cmp	r3, #4
 8003562:	d11f      	bne.n	80035a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003564:	4b4f      	ldr	r3, [pc, #316]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_RCC_OscConfig+0x154>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e25d      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357c:	4b49      	ldr	r3, [pc, #292]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	061b      	lsls	r3, r3, #24
 800358a:	4946      	ldr	r1, [pc, #280]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003590:	4b45      	ldr	r3, [pc, #276]	@ (80036a8 <HAL_RCC_OscConfig+0x280>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe f8a7 	bl	80016e8 <HAL_InitTick>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d043      	beq.n	8003628 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e249      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d023      	beq.n	80035f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ac:	4b3d      	ldr	r3, [pc, #244]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a3c      	ldr	r2, [pc, #240]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80035b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fe f8e2 	bl	8001780 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c0:	f7fe f8de 	bl	8001780 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e232      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d2:	4b34      	ldr	r3, [pc, #208]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f0      	beq.n	80035c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035de:	4b31      	ldr	r3, [pc, #196]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	061b      	lsls	r3, r3, #24
 80035ec:	492d      	ldr	r1, [pc, #180]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	604b      	str	r3, [r1, #4]
 80035f2:	e01a      	b.n	800362a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035f4:	4b2b      	ldr	r3, [pc, #172]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a2a      	ldr	r2, [pc, #168]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80035fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fe f8be 	bl	8001780 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003608:	f7fe f8ba 	bl	8001780 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e20e      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800361a:	4b22      	ldr	r3, [pc, #136]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x1e0>
 8003626:	e000      	b.n	800362a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003628:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d041      	beq.n	80036ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d01c      	beq.n	8003678 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800363e:	4b19      	ldr	r3, [pc, #100]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 8003640:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003644:	4a17      	ldr	r2, [pc, #92]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364e:	f7fe f897 	bl	8001780 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003656:	f7fe f893 	bl	8001780 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e1e7      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003668:	4b0e      	ldr	r3, [pc, #56]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 800366a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0ef      	beq.n	8003656 <HAL_RCC_OscConfig+0x22e>
 8003676:	e020      	b.n	80036ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003678:	4b0a      	ldr	r3, [pc, #40]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 800367a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800367e:	4a09      	ldr	r2, [pc, #36]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 8003680:	f023 0301 	bic.w	r3, r3, #1
 8003684:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003688:	f7fe f87a 	bl	8001780 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800368e:	e00d      	b.n	80036ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003690:	f7fe f876 	bl	8001780 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d906      	bls.n	80036ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e1ca      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
 80036a2:	bf00      	nop
 80036a4:	40021000 	.word	0x40021000
 80036a8:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036ac:	4b8c      	ldr	r3, [pc, #560]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 80036ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1ea      	bne.n	8003690 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 80a6 	beq.w	8003814 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c8:	2300      	movs	r3, #0
 80036ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036cc:	4b84      	ldr	r3, [pc, #528]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 80036ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_RCC_OscConfig+0x2b4>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <HAL_RCC_OscConfig+0x2b6>
 80036dc:	2300      	movs	r3, #0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00d      	beq.n	80036fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e2:	4b7f      	ldr	r3, [pc, #508]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 80036e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e6:	4a7e      	ldr	r2, [pc, #504]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 80036e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80036ee:	4b7c      	ldr	r3, [pc, #496]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 80036f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036fa:	2301      	movs	r3, #1
 80036fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036fe:	4b79      	ldr	r3, [pc, #484]	@ (80038e4 <HAL_RCC_OscConfig+0x4bc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003706:	2b00      	cmp	r3, #0
 8003708:	d118      	bne.n	800373c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800370a:	4b76      	ldr	r3, [pc, #472]	@ (80038e4 <HAL_RCC_OscConfig+0x4bc>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a75      	ldr	r2, [pc, #468]	@ (80038e4 <HAL_RCC_OscConfig+0x4bc>)
 8003710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003716:	f7fe f833 	bl	8001780 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371e:	f7fe f82f 	bl	8001780 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e183      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003730:	4b6c      	ldr	r3, [pc, #432]	@ (80038e4 <HAL_RCC_OscConfig+0x4bc>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d108      	bne.n	8003756 <HAL_RCC_OscConfig+0x32e>
 8003744:	4b66      	ldr	r3, [pc, #408]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374a:	4a65      	ldr	r2, [pc, #404]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003754:	e024      	b.n	80037a0 <HAL_RCC_OscConfig+0x378>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b05      	cmp	r3, #5
 800375c:	d110      	bne.n	8003780 <HAL_RCC_OscConfig+0x358>
 800375e:	4b60      	ldr	r3, [pc, #384]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003764:	4a5e      	ldr	r2, [pc, #376]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003766:	f043 0304 	orr.w	r3, r3, #4
 800376a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800376e:	4b5c      	ldr	r3, [pc, #368]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003774:	4a5a      	ldr	r2, [pc, #360]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800377e:	e00f      	b.n	80037a0 <HAL_RCC_OscConfig+0x378>
 8003780:	4b57      	ldr	r3, [pc, #348]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003786:	4a56      	ldr	r2, [pc, #344]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003790:	4b53      	ldr	r3, [pc, #332]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003796:	4a52      	ldr	r2, [pc, #328]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003798:	f023 0304 	bic.w	r3, r3, #4
 800379c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d016      	beq.n	80037d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a8:	f7fd ffea 	bl	8001780 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b0:	f7fd ffe6 	bl	8001780 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e138      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c6:	4b46      	ldr	r3, [pc, #280]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0ed      	beq.n	80037b0 <HAL_RCC_OscConfig+0x388>
 80037d4:	e015      	b.n	8003802 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d6:	f7fd ffd3 	bl	8001780 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037dc:	e00a      	b.n	80037f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f7fd ffcf 	bl	8001780 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e121      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037f4:	4b3a      	ldr	r3, [pc, #232]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1ed      	bne.n	80037de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003802:	7ffb      	ldrb	r3, [r7, #31]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d105      	bne.n	8003814 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003808:	4b35      	ldr	r3, [pc, #212]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 800380a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380c:	4a34      	ldr	r2, [pc, #208]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 800380e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003812:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d03c      	beq.n	800389a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01c      	beq.n	8003862 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003828:	4b2d      	ldr	r3, [pc, #180]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 800382a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800382e:	4a2c      	ldr	r2, [pc, #176]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fd ffa2 	bl	8001780 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003840:	f7fd ff9e 	bl	8001780 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e0f2      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003852:	4b23      	ldr	r3, [pc, #140]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003854:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ef      	beq.n	8003840 <HAL_RCC_OscConfig+0x418>
 8003860:	e01b      	b.n	800389a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003862:	4b1f      	ldr	r3, [pc, #124]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003864:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003868:	4a1d      	ldr	r2, [pc, #116]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003872:	f7fd ff85 	bl	8001780 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800387a:	f7fd ff81 	bl	8001780 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e0d5      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800388c:	4b14      	ldr	r3, [pc, #80]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 800388e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1ef      	bne.n	800387a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 80c9 	beq.w	8003a36 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038a4:	4b0e      	ldr	r3, [pc, #56]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 030c 	and.w	r3, r3, #12
 80038ac:	2b0c      	cmp	r3, #12
 80038ae:	f000 8083 	beq.w	80039b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d15e      	bne.n	8003978 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ba:	4b09      	ldr	r3, [pc, #36]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a08      	ldr	r2, [pc, #32]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 80038c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c6:	f7fd ff5b 	bl	8001780 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038cc:	e00c      	b.n	80038e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ce:	f7fd ff57 	bl	8001780 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d905      	bls.n	80038e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e0ab      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e8:	4b55      	ldr	r3, [pc, #340]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1ec      	bne.n	80038ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f4:	4b52      	ldr	r3, [pc, #328]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	4b52      	ldr	r3, [pc, #328]	@ (8003a44 <HAL_RCC_OscConfig+0x61c>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6a11      	ldr	r1, [r2, #32]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003904:	3a01      	subs	r2, #1
 8003906:	0112      	lsls	r2, r2, #4
 8003908:	4311      	orrs	r1, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800390e:	0212      	lsls	r2, r2, #8
 8003910:	4311      	orrs	r1, r2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003916:	0852      	lsrs	r2, r2, #1
 8003918:	3a01      	subs	r2, #1
 800391a:	0552      	lsls	r2, r2, #21
 800391c:	4311      	orrs	r1, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003922:	0852      	lsrs	r2, r2, #1
 8003924:	3a01      	subs	r2, #1
 8003926:	0652      	lsls	r2, r2, #25
 8003928:	4311      	orrs	r1, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800392e:	06d2      	lsls	r2, r2, #27
 8003930:	430a      	orrs	r2, r1
 8003932:	4943      	ldr	r1, [pc, #268]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 8003934:	4313      	orrs	r3, r2
 8003936:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003938:	4b41      	ldr	r3, [pc, #260]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a40      	ldr	r2, [pc, #256]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 800393e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003942:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003944:	4b3e      	ldr	r3, [pc, #248]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4a3d      	ldr	r2, [pc, #244]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 800394a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800394e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fd ff16 	bl	8001780 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003958:	f7fd ff12 	bl	8001780 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e066      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396a:	4b35      	ldr	r3, [pc, #212]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0x530>
 8003976:	e05e      	b.n	8003a36 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003978:	4b31      	ldr	r3, [pc, #196]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a30      	ldr	r2, [pc, #192]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 800397e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fd fefc 	bl	8001780 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398c:	f7fd fef8 	bl	8001780 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e04c      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800399e:	4b28      	ldr	r3, [pc, #160]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80039aa:	4b25      	ldr	r3, [pc, #148]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	4924      	ldr	r1, [pc, #144]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 80039b0:	4b25      	ldr	r3, [pc, #148]	@ (8003a48 <HAL_RCC_OscConfig+0x620>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	60cb      	str	r3, [r1, #12]
 80039b6:	e03e      	b.n	8003a36 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e039      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80039c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f003 0203 	and.w	r2, r3, #3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d12c      	bne.n	8003a32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	3b01      	subs	r3, #1
 80039e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d123      	bne.n	8003a32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d11b      	bne.n	8003a32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a04:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d113      	bne.n	8003a32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	3b01      	subs	r3, #1
 8003a18:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d109      	bne.n	8003a32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a28:	085b      	lsrs	r3, r3, #1
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d001      	beq.n	8003a36 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3720      	adds	r7, #32
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40021000 	.word	0x40021000
 8003a44:	019f800c 	.word	0x019f800c
 8003a48:	feeefffc 	.word	0xfeeefffc

08003a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e11e      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a64:	4b91      	ldr	r3, [pc, #580]	@ (8003cac <HAL_RCC_ClockConfig+0x260>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d910      	bls.n	8003a94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a72:	4b8e      	ldr	r3, [pc, #568]	@ (8003cac <HAL_RCC_ClockConfig+0x260>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 020f 	bic.w	r2, r3, #15
 8003a7a:	498c      	ldr	r1, [pc, #560]	@ (8003cac <HAL_RCC_ClockConfig+0x260>)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a82:	4b8a      	ldr	r3, [pc, #552]	@ (8003cac <HAL_RCC_ClockConfig+0x260>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e106      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d073      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d129      	bne.n	8003afc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa8:	4b81      	ldr	r3, [pc, #516]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0f4      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ab8:	f000 f966 	bl	8003d88 <RCC_GetSysClockFreqFromPLLSource>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4a7c      	ldr	r2, [pc, #496]	@ (8003cb4 <HAL_RCC_ClockConfig+0x268>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d93f      	bls.n	8003b46 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ac6:	4b7a      	ldr	r3, [pc, #488]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d009      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d033      	beq.n	8003b46 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d12f      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ae6:	4b72      	ldr	r3, [pc, #456]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003aee:	4a70      	ldr	r2, [pc, #448]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003af4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003af6:	2380      	movs	r3, #128	@ 0x80
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e024      	b.n	8003b46 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b04:	4b6a      	ldr	r3, [pc, #424]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0c6      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b14:	4b66      	ldr	r3, [pc, #408]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0be      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b24:	f000 f8ce 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4a61      	ldr	r2, [pc, #388]	@ (8003cb4 <HAL_RCC_ClockConfig+0x268>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d909      	bls.n	8003b46 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b32:	4b5f      	ldr	r3, [pc, #380]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b3a:	4a5d      	ldr	r2, [pc, #372]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b40:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b42:	2380      	movs	r3, #128	@ 0x80
 8003b44:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b46:	4b5a      	ldr	r3, [pc, #360]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f023 0203 	bic.w	r2, r3, #3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4957      	ldr	r1, [pc, #348]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b58:	f7fd fe12 	bl	8001780 <HAL_GetTick>
 8003b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5e:	e00a      	b.n	8003b76 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b60:	f7fd fe0e 	bl	8001780 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e095      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b76:	4b4e      	ldr	r3, [pc, #312]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 020c 	and.w	r2, r3, #12
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d1eb      	bne.n	8003b60 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d023      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba0:	4b43      	ldr	r3, [pc, #268]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4a42      	ldr	r2, [pc, #264]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003ba6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003baa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d007      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003bb8:	4b3d      	ldr	r3, [pc, #244]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003bc0:	4a3b      	ldr	r2, [pc, #236]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003bc2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003bc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc8:	4b39      	ldr	r3, [pc, #228]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4936      	ldr	r1, [pc, #216]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
 8003bda:	e008      	b.n	8003bee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2b80      	cmp	r3, #128	@ 0x80
 8003be0:	d105      	bne.n	8003bee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003be2:	4b33      	ldr	r3, [pc, #204]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	4a32      	ldr	r2, [pc, #200]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003be8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bee:	4b2f      	ldr	r3, [pc, #188]	@ (8003cac <HAL_RCC_ClockConfig+0x260>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d21d      	bcs.n	8003c38 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8003cac <HAL_RCC_ClockConfig+0x260>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f023 020f 	bic.w	r2, r3, #15
 8003c04:	4929      	ldr	r1, [pc, #164]	@ (8003cac <HAL_RCC_ClockConfig+0x260>)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c0c:	f7fd fdb8 	bl	8001780 <HAL_GetTick>
 8003c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c14:	f7fd fdb4 	bl	8001780 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e03b      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2a:	4b20      	ldr	r3, [pc, #128]	@ (8003cac <HAL_RCC_ClockConfig+0x260>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d1ed      	bne.n	8003c14 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c44:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	4917      	ldr	r1, [pc, #92]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c62:	4b13      	ldr	r3, [pc, #76]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	490f      	ldr	r1, [pc, #60]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c76:	f000 f825 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	490c      	ldr	r1, [pc, #48]	@ (8003cb8 <HAL_RCC_ClockConfig+0x26c>)
 8003c88:	5ccb      	ldrb	r3, [r1, r3]
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c92:	4a0a      	ldr	r2, [pc, #40]	@ (8003cbc <HAL_RCC_ClockConfig+0x270>)
 8003c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c96:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc0 <HAL_RCC_ClockConfig+0x274>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fd fd24 	bl	80016e8 <HAL_InitTick>
 8003ca0:	4603      	mov	r3, r0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40022000 	.word	0x40022000
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	04c4b400 	.word	0x04c4b400
 8003cb8:	0800600c 	.word	0x0800600c
 8003cbc:	20000008 	.word	0x20000008
 8003cc0:	2000000c 	.word	0x2000000c

08003cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003cca:	4b2c      	ldr	r3, [pc, #176]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d102      	bne.n	8003cdc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	e047      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003cdc:	4b27      	ldr	r3, [pc, #156]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 030c 	and.w	r3, r3, #12
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d102      	bne.n	8003cee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ce8:	4b26      	ldr	r3, [pc, #152]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	e03e      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003cee:	4b23      	ldr	r3, [pc, #140]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b0c      	cmp	r3, #12
 8003cf8:	d136      	bne.n	8003d68 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cfa:	4b20      	ldr	r3, [pc, #128]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d04:	4b1d      	ldr	r3, [pc, #116]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	091b      	lsrs	r3, r3, #4
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	3301      	adds	r3, #1
 8003d10:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d10c      	bne.n	8003d32 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d18:	4a1a      	ldr	r2, [pc, #104]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d20:	4a16      	ldr	r2, [pc, #88]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d22:	68d2      	ldr	r2, [r2, #12]
 8003d24:	0a12      	lsrs	r2, r2, #8
 8003d26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	617b      	str	r3, [r7, #20]
      break;
 8003d30:	e00c      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d32:	4a13      	ldr	r2, [pc, #76]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3a:	4a10      	ldr	r2, [pc, #64]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d3c:	68d2      	ldr	r2, [r2, #12]
 8003d3e:	0a12      	lsrs	r2, r2, #8
 8003d40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d44:	fb02 f303 	mul.w	r3, r2, r3
 8003d48:	617b      	str	r3, [r7, #20]
      break;
 8003d4a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	0e5b      	lsrs	r3, r3, #25
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	3301      	adds	r3, #1
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	e001      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d6c:	693b      	ldr	r3, [r7, #16]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	00f42400 	.word	0x00f42400
 8003d84:	016e3600 	.word	0x016e3600

08003d88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d98:	4b1b      	ldr	r3, [pc, #108]	@ (8003e08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	3301      	adds	r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d10c      	bne.n	8003dc6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dac:	4a17      	ldr	r2, [pc, #92]	@ (8003e0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	4a14      	ldr	r2, [pc, #80]	@ (8003e08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003db6:	68d2      	ldr	r2, [r2, #12]
 8003db8:	0a12      	lsrs	r2, r2, #8
 8003dba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003dbe:	fb02 f303 	mul.w	r3, r2, r3
 8003dc2:	617b      	str	r3, [r7, #20]
    break;
 8003dc4:	e00c      	b.n	8003de0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dc6:	4a12      	ldr	r2, [pc, #72]	@ (8003e10 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dce:	4a0e      	ldr	r2, [pc, #56]	@ (8003e08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dd0:	68d2      	ldr	r2, [r2, #12]
 8003dd2:	0a12      	lsrs	r2, r2, #8
 8003dd4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003dd8:	fb02 f303 	mul.w	r3, r2, r3
 8003ddc:	617b      	str	r3, [r7, #20]
    break;
 8003dde:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003de0:	4b09      	ldr	r3, [pc, #36]	@ (8003e08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	0e5b      	lsrs	r3, r3, #25
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	3301      	adds	r3, #1
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003dfa:	687b      	ldr	r3, [r7, #4]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	371c      	adds	r7, #28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	016e3600 	.word	0x016e3600
 8003e10:	00f42400 	.word	0x00f42400

08003e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e20:	2300      	movs	r3, #0
 8003e22:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 8098 	beq.w	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e32:	2300      	movs	r3, #0
 8003e34:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e36:	4b43      	ldr	r3, [pc, #268]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10d      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e42:	4b40      	ldr	r3, [pc, #256]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e46:	4a3f      	ldr	r2, [pc, #252]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e4e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e5e:	4b3a      	ldr	r3, [pc, #232]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a39      	ldr	r2, [pc, #228]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e6a:	f7fd fc89 	bl	8001780 <HAL_GetTick>
 8003e6e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e70:	e009      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e72:	f7fd fc85 	bl	8001780 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d902      	bls.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	74fb      	strb	r3, [r7, #19]
        break;
 8003e84:	e005      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e86:	4b30      	ldr	r3, [pc, #192]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0ef      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e92:	7cfb      	ldrb	r3, [r7, #19]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d159      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e98:	4b2a      	ldr	r3, [pc, #168]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ea2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d01e      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d019      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003eb4:	4b23      	ldr	r3, [pc, #140]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ebe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ec0:	4b20      	ldr	r3, [pc, #128]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ee0:	4a18      	ldr	r2, [pc, #96]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d016      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef2:	f7fd fc45 	bl	8001780 <HAL_GetTick>
 8003ef6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ef8:	e00b      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efa:	f7fd fc41 	bl	8001780 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d902      	bls.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	74fb      	strb	r3, [r7, #19]
            break;
 8003f10:	e006      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f12:	4b0c      	ldr	r3, [pc, #48]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0ec      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003f20:	7cfb      	ldrb	r3, [r7, #19]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10b      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f26:	4b07      	ldr	r3, [pc, #28]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f34:	4903      	ldr	r1, [pc, #12]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f3c:	e008      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f3e:	7cfb      	ldrb	r3, [r7, #19]
 8003f40:	74bb      	strb	r3, [r7, #18]
 8003f42:	e005      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4c:	7cfb      	ldrb	r3, [r7, #19]
 8003f4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f50:	7c7b      	ldrb	r3, [r7, #17]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d105      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f56:	4ba7      	ldr	r3, [pc, #668]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5a:	4aa6      	ldr	r2, [pc, #664]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f6e:	4ba1      	ldr	r3, [pc, #644]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f74:	f023 0203 	bic.w	r2, r3, #3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	499d      	ldr	r1, [pc, #628]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f90:	4b98      	ldr	r3, [pc, #608]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f96:	f023 020c 	bic.w	r2, r3, #12
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	4995      	ldr	r1, [pc, #596]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fb2:	4b90      	ldr	r3, [pc, #576]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	498c      	ldr	r1, [pc, #560]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fd4:	4b87      	ldr	r3, [pc, #540]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	4984      	ldr	r1, [pc, #528]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0310 	and.w	r3, r3, #16
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ff6:	4b7f      	ldr	r3, [pc, #508]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	497b      	ldr	r1, [pc, #492]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004018:	4b76      	ldr	r3, [pc, #472]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	4973      	ldr	r1, [pc, #460]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800403a:	4b6e      	ldr	r3, [pc, #440]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800403c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004040:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	496a      	ldr	r1, [pc, #424]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800405c:	4b65      	ldr	r3, [pc, #404]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004062:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	4962      	ldr	r1, [pc, #392]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800407e:	4b5d      	ldr	r3, [pc, #372]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004084:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	4959      	ldr	r1, [pc, #356]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040a0:	4b54      	ldr	r3, [pc, #336]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040a6:	f023 0203 	bic.w	r2, r3, #3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ae:	4951      	ldr	r1, [pc, #324]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040c2:	4b4c      	ldr	r3, [pc, #304]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d0:	4948      	ldr	r1, [pc, #288]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d015      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040e4:	4b43      	ldr	r3, [pc, #268]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f2:	4940      	ldr	r1, [pc, #256]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004102:	d105      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004104:	4b3b      	ldr	r3, [pc, #236]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	4a3a      	ldr	r2, [pc, #232]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800410e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004118:	2b00      	cmp	r3, #0
 800411a:	d015      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800411c:	4b35      	ldr	r3, [pc, #212]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004122:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800412a:	4932      	ldr	r1, [pc, #200]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004136:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800413a:	d105      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800413c:	4b2d      	ldr	r3, [pc, #180]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	4a2c      	ldr	r2, [pc, #176]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004146:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d015      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004154:	4b27      	ldr	r3, [pc, #156]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004162:	4924      	ldr	r1, [pc, #144]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800416e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004172:	d105      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004174:	4b1f      	ldr	r3, [pc, #124]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4a1e      	ldr	r2, [pc, #120]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800417e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d015      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800418c:	4b19      	ldr	r3, [pc, #100]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004192:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419a:	4916      	ldr	r1, [pc, #88]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041aa:	d105      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041ac:	4b11      	ldr	r3, [pc, #68]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	4a10      	ldr	r2, [pc, #64]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d019      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041c4:	4b0b      	ldr	r3, [pc, #44]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d2:	4908      	ldr	r1, [pc, #32]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041e2:	d109      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041e4:	4b03      	ldr	r3, [pc, #12]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	4a02      	ldr	r2, [pc, #8]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ee:	60d3      	str	r3, [r2, #12]
 80041f0:	e002      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80041f2:	bf00      	nop
 80041f4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d015      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004204:	4b29      	ldr	r3, [pc, #164]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004212:	4926      	ldr	r1, [pc, #152]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004222:	d105      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004224:	4b21      	ldr	r3, [pc, #132]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4a20      	ldr	r2, [pc, #128]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800422a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800422e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d015      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800423c:	4b1b      	ldr	r3, [pc, #108]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004242:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800424a:	4918      	ldr	r1, [pc, #96]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800425a:	d105      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800425c:	4b13      	ldr	r3, [pc, #76]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4a12      	ldr	r2, [pc, #72]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004262:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004266:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d015      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004274:	4b0d      	ldr	r3, [pc, #52]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004276:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800427a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004282:	490a      	ldr	r1, [pc, #40]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004292:	d105      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004294:	4b05      	ldr	r3, [pc, #20]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4a04      	ldr	r2, [pc, #16]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800429a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800429e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80042a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000

080042b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e049      	b.n	8004356 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fd f82c 	bl	8001334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3304      	adds	r3, #4
 80042ec:	4619      	mov	r1, r3
 80042ee:	4610      	mov	r0, r2
 80042f0:	f001 f80e 	bl	8005310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b01      	cmp	r3, #1
 8004372:	d001      	beq.n	8004378 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e04c      	b.n	8004412 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a26      	ldr	r2, [pc, #152]	@ (8004420 <HAL_TIM_Base_Start+0xc0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d022      	beq.n	80043d0 <HAL_TIM_Base_Start+0x70>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004392:	d01d      	beq.n	80043d0 <HAL_TIM_Base_Start+0x70>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a22      	ldr	r2, [pc, #136]	@ (8004424 <HAL_TIM_Base_Start+0xc4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d018      	beq.n	80043d0 <HAL_TIM_Base_Start+0x70>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a21      	ldr	r2, [pc, #132]	@ (8004428 <HAL_TIM_Base_Start+0xc8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d013      	beq.n	80043d0 <HAL_TIM_Base_Start+0x70>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1f      	ldr	r2, [pc, #124]	@ (800442c <HAL_TIM_Base_Start+0xcc>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00e      	beq.n	80043d0 <HAL_TIM_Base_Start+0x70>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004430 <HAL_TIM_Base_Start+0xd0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d009      	beq.n	80043d0 <HAL_TIM_Base_Start+0x70>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004434 <HAL_TIM_Base_Start+0xd4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d004      	beq.n	80043d0 <HAL_TIM_Base_Start+0x70>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004438 <HAL_TIM_Base_Start+0xd8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d115      	bne.n	80043fc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	4b19      	ldr	r3, [pc, #100]	@ (800443c <HAL_TIM_Base_Start+0xdc>)
 80043d8:	4013      	ands	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b06      	cmp	r3, #6
 80043e0:	d015      	beq.n	800440e <HAL_TIM_Base_Start+0xae>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043e8:	d011      	beq.n	800440e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0201 	orr.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043fa:	e008      	b.n	800440e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0201 	orr.w	r2, r2, #1
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	e000      	b.n	8004410 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40012c00 	.word	0x40012c00
 8004424:	40000400 	.word	0x40000400
 8004428:	40000800 	.word	0x40000800
 800442c:	40000c00 	.word	0x40000c00
 8004430:	40013400 	.word	0x40013400
 8004434:	40014000 	.word	0x40014000
 8004438:	40015000 	.word	0x40015000
 800443c:	00010007 	.word	0x00010007

08004440 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d001      	beq.n	8004458 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e054      	b.n	8004502 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a26      	ldr	r2, [pc, #152]	@ (8004510 <HAL_TIM_Base_Start_IT+0xd0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d022      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004482:	d01d      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a22      	ldr	r2, [pc, #136]	@ (8004514 <HAL_TIM_Base_Start_IT+0xd4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d018      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a21      	ldr	r2, [pc, #132]	@ (8004518 <HAL_TIM_Base_Start_IT+0xd8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d013      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1f      	ldr	r2, [pc, #124]	@ (800451c <HAL_TIM_Base_Start_IT+0xdc>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00e      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004520 <HAL_TIM_Base_Start_IT+0xe0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d009      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004524 <HAL_TIM_Base_Start_IT+0xe4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d004      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x80>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004528 <HAL_TIM_Base_Start_IT+0xe8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d115      	bne.n	80044ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	4b19      	ldr	r3, [pc, #100]	@ (800452c <HAL_TIM_Base_Start_IT+0xec>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b06      	cmp	r3, #6
 80044d0:	d015      	beq.n	80044fe <HAL_TIM_Base_Start_IT+0xbe>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044d8:	d011      	beq.n	80044fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 0201 	orr.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ea:	e008      	b.n	80044fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	e000      	b.n	8004500 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	40012c00 	.word	0x40012c00
 8004514:	40000400 	.word	0x40000400
 8004518:	40000800 	.word	0x40000800
 800451c:	40000c00 	.word	0x40000c00
 8004520:	40013400 	.word	0x40013400
 8004524:	40014000 	.word	0x40014000
 8004528:	40015000 	.word	0x40015000
 800452c:	00010007 	.word	0x00010007

08004530 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e049      	b.n	80045d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f841 	bl	80045de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f000 fece 	bl	8005310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d109      	bne.n	8004618 <HAL_TIM_PWM_Start+0x24>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b01      	cmp	r3, #1
 800460e:	bf14      	ite	ne
 8004610:	2301      	movne	r3, #1
 8004612:	2300      	moveq	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	e03c      	b.n	8004692 <HAL_TIM_PWM_Start+0x9e>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b04      	cmp	r3, #4
 800461c:	d109      	bne.n	8004632 <HAL_TIM_PWM_Start+0x3e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b01      	cmp	r3, #1
 8004628:	bf14      	ite	ne
 800462a:	2301      	movne	r3, #1
 800462c:	2300      	moveq	r3, #0
 800462e:	b2db      	uxtb	r3, r3
 8004630:	e02f      	b.n	8004692 <HAL_TIM_PWM_Start+0x9e>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b08      	cmp	r3, #8
 8004636:	d109      	bne.n	800464c <HAL_TIM_PWM_Start+0x58>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b01      	cmp	r3, #1
 8004642:	bf14      	ite	ne
 8004644:	2301      	movne	r3, #1
 8004646:	2300      	moveq	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	e022      	b.n	8004692 <HAL_TIM_PWM_Start+0x9e>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b0c      	cmp	r3, #12
 8004650:	d109      	bne.n	8004666 <HAL_TIM_PWM_Start+0x72>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b01      	cmp	r3, #1
 800465c:	bf14      	ite	ne
 800465e:	2301      	movne	r3, #1
 8004660:	2300      	moveq	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	e015      	b.n	8004692 <HAL_TIM_PWM_Start+0x9e>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b10      	cmp	r3, #16
 800466a:	d109      	bne.n	8004680 <HAL_TIM_PWM_Start+0x8c>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b01      	cmp	r3, #1
 8004676:	bf14      	ite	ne
 8004678:	2301      	movne	r3, #1
 800467a:	2300      	moveq	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	e008      	b.n	8004692 <HAL_TIM_PWM_Start+0x9e>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	bf14      	ite	ne
 800468c:	2301      	movne	r3, #1
 800468e:	2300      	moveq	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e0a6      	b.n	80047e8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d104      	bne.n	80046aa <HAL_TIM_PWM_Start+0xb6>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046a8:	e023      	b.n	80046f2 <HAL_TIM_PWM_Start+0xfe>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d104      	bne.n	80046ba <HAL_TIM_PWM_Start+0xc6>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046b8:	e01b      	b.n	80046f2 <HAL_TIM_PWM_Start+0xfe>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d104      	bne.n	80046ca <HAL_TIM_PWM_Start+0xd6>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046c8:	e013      	b.n	80046f2 <HAL_TIM_PWM_Start+0xfe>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b0c      	cmp	r3, #12
 80046ce:	d104      	bne.n	80046da <HAL_TIM_PWM_Start+0xe6>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046d8:	e00b      	b.n	80046f2 <HAL_TIM_PWM_Start+0xfe>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b10      	cmp	r3, #16
 80046de:	d104      	bne.n	80046ea <HAL_TIM_PWM_Start+0xf6>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046e8:	e003      	b.n	80046f2 <HAL_TIM_PWM_Start+0xfe>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2202      	movs	r2, #2
 80046ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2201      	movs	r2, #1
 80046f8:	6839      	ldr	r1, [r7, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f001 fa82 	bl	8005c04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a3a      	ldr	r2, [pc, #232]	@ (80047f0 <HAL_TIM_PWM_Start+0x1fc>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d018      	beq.n	800473c <HAL_TIM_PWM_Start+0x148>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a39      	ldr	r2, [pc, #228]	@ (80047f4 <HAL_TIM_PWM_Start+0x200>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d013      	beq.n	800473c <HAL_TIM_PWM_Start+0x148>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a37      	ldr	r2, [pc, #220]	@ (80047f8 <HAL_TIM_PWM_Start+0x204>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00e      	beq.n	800473c <HAL_TIM_PWM_Start+0x148>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a36      	ldr	r2, [pc, #216]	@ (80047fc <HAL_TIM_PWM_Start+0x208>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d009      	beq.n	800473c <HAL_TIM_PWM_Start+0x148>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a34      	ldr	r2, [pc, #208]	@ (8004800 <HAL_TIM_PWM_Start+0x20c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d004      	beq.n	800473c <HAL_TIM_PWM_Start+0x148>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a33      	ldr	r2, [pc, #204]	@ (8004804 <HAL_TIM_PWM_Start+0x210>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d101      	bne.n	8004740 <HAL_TIM_PWM_Start+0x14c>
 800473c:	2301      	movs	r3, #1
 800473e:	e000      	b.n	8004742 <HAL_TIM_PWM_Start+0x14e>
 8004740:	2300      	movs	r3, #0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d007      	beq.n	8004756 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004754:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a25      	ldr	r2, [pc, #148]	@ (80047f0 <HAL_TIM_PWM_Start+0x1fc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d022      	beq.n	80047a6 <HAL_TIM_PWM_Start+0x1b2>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004768:	d01d      	beq.n	80047a6 <HAL_TIM_PWM_Start+0x1b2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a26      	ldr	r2, [pc, #152]	@ (8004808 <HAL_TIM_PWM_Start+0x214>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d018      	beq.n	80047a6 <HAL_TIM_PWM_Start+0x1b2>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a24      	ldr	r2, [pc, #144]	@ (800480c <HAL_TIM_PWM_Start+0x218>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d013      	beq.n	80047a6 <HAL_TIM_PWM_Start+0x1b2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a23      	ldr	r2, [pc, #140]	@ (8004810 <HAL_TIM_PWM_Start+0x21c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d00e      	beq.n	80047a6 <HAL_TIM_PWM_Start+0x1b2>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a19      	ldr	r2, [pc, #100]	@ (80047f4 <HAL_TIM_PWM_Start+0x200>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d009      	beq.n	80047a6 <HAL_TIM_PWM_Start+0x1b2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a18      	ldr	r2, [pc, #96]	@ (80047f8 <HAL_TIM_PWM_Start+0x204>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d004      	beq.n	80047a6 <HAL_TIM_PWM_Start+0x1b2>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a18      	ldr	r2, [pc, #96]	@ (8004804 <HAL_TIM_PWM_Start+0x210>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d115      	bne.n	80047d2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	4b19      	ldr	r3, [pc, #100]	@ (8004814 <HAL_TIM_PWM_Start+0x220>)
 80047ae:	4013      	ands	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2b06      	cmp	r3, #6
 80047b6:	d015      	beq.n	80047e4 <HAL_TIM_PWM_Start+0x1f0>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047be:	d011      	beq.n	80047e4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d0:	e008      	b.n	80047e4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0201 	orr.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	e000      	b.n	80047e6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40012c00 	.word	0x40012c00
 80047f4:	40013400 	.word	0x40013400
 80047f8:	40014000 	.word	0x40014000
 80047fc:	40014400 	.word	0x40014400
 8004800:	40014800 	.word	0x40014800
 8004804:	40015000 	.word	0x40015000
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800
 8004810:	40000c00 	.word	0x40000c00
 8004814:	00010007 	.word	0x00010007

08004818 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e097      	b.n	800495c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d106      	bne.n	8004846 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7fc fdcb 	bl	80013dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2202      	movs	r2, #2
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800485c:	f023 0307 	bic.w	r3, r3, #7
 8004860:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3304      	adds	r3, #4
 800486a:	4619      	mov	r1, r3
 800486c:	4610      	mov	r0, r2
 800486e:	f000 fd4f 	bl	8005310 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800489a:	f023 0303 	bic.w	r3, r3, #3
 800489e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	4313      	orrs	r3, r2
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80048b8:	f023 030c 	bic.w	r3, r3, #12
 80048bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	021b      	lsls	r3, r3, #8
 80048d4:	4313      	orrs	r3, r2
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	011a      	lsls	r2, r3, #4
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	031b      	lsls	r3, r3, #12
 80048e8:	4313      	orrs	r3, r2
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80048f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80048fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	4313      	orrs	r3, r2
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004974:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800497c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004984:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800498c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d110      	bne.n	80049b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d102      	bne.n	80049a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800499a:	7b7b      	ldrb	r3, [r7, #13]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d001      	beq.n	80049a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e069      	b.n	8004a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049b4:	e031      	b.n	8004a1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d110      	bne.n	80049de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049bc:	7bbb      	ldrb	r3, [r7, #14]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d102      	bne.n	80049c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049c2:	7b3b      	ldrb	r3, [r7, #12]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d001      	beq.n	80049cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e055      	b.n	8004a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049dc:	e01d      	b.n	8004a1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d108      	bne.n	80049f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049e4:	7bbb      	ldrb	r3, [r7, #14]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d105      	bne.n	80049f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049ea:	7b7b      	ldrb	r3, [r7, #13]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d102      	bne.n	80049f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049f0:	7b3b      	ldrb	r3, [r7, #12]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d001      	beq.n	80049fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e03e      	b.n	8004a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2202      	movs	r2, #2
 80049fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2202      	movs	r2, #2
 8004a06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2202      	movs	r2, #2
 8004a16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_TIM_Encoder_Start+0xc4>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d008      	beq.n	8004a38 <HAL_TIM_Encoder_Start+0xd4>
 8004a26:	e00f      	b.n	8004a48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	2100      	movs	r1, #0
 8004a30:	4618      	mov	r0, r3
 8004a32:	f001 f8e7 	bl	8005c04 <TIM_CCxChannelCmd>
      break;
 8004a36:	e016      	b.n	8004a66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	2104      	movs	r1, #4
 8004a40:	4618      	mov	r0, r3
 8004a42:	f001 f8df 	bl	8005c04 <TIM_CCxChannelCmd>
      break;
 8004a46:	e00e      	b.n	8004a66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	2100      	movs	r1, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f001 f8d7 	bl	8005c04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	2104      	movs	r1, #4
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f001 f8d0 	bl	8005c04 <TIM_CCxChannelCmd>
      break;
 8004a64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f042 0201 	orr.w	r2, r2, #1
 8004a74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_TIM_Encoder_Stop+0x18>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d008      	beq.n	8004aa8 <HAL_TIM_Encoder_Stop+0x28>
 8004a96:	e00f      	b.n	8004ab8 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f001 f8af 	bl	8005c04 <TIM_CCxChannelCmd>
      break;
 8004aa6:	e016      	b.n	8004ad6 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2200      	movs	r2, #0
 8004aae:	2104      	movs	r1, #4
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f001 f8a7 	bl	8005c04 <TIM_CCxChannelCmd>
      break;
 8004ab6:	e00e      	b.n	8004ad6 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2200      	movs	r2, #0
 8004abe:	2100      	movs	r1, #0
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f001 f89f 	bl	8005c04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2200      	movs	r2, #0
 8004acc:	2104      	movs	r1, #4
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f001 f898 	bl	8005c04 <TIM_CCxChannelCmd>
      break;
 8004ad4:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6a1a      	ldr	r2, [r3, #32]
 8004adc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10f      	bne.n	8004b06 <HAL_TIM_Encoder_Stop+0x86>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6a1a      	ldr	r2, [r3, #32]
 8004aec:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d107      	bne.n	8004b06 <HAL_TIM_Encoder_Stop+0x86>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0201 	bic.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <HAL_TIM_Encoder_Stop+0x92>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d148      	bne.n	8004ba4 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d104      	bne.n	8004b22 <HAL_TIM_Encoder_Stop+0xa2>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b20:	e023      	b.n	8004b6a <HAL_TIM_Encoder_Stop+0xea>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d104      	bne.n	8004b32 <HAL_TIM_Encoder_Stop+0xb2>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b30:	e01b      	b.n	8004b6a <HAL_TIM_Encoder_Stop+0xea>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d104      	bne.n	8004b42 <HAL_TIM_Encoder_Stop+0xc2>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b40:	e013      	b.n	8004b6a <HAL_TIM_Encoder_Stop+0xea>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b0c      	cmp	r3, #12
 8004b46:	d104      	bne.n	8004b52 <HAL_TIM_Encoder_Stop+0xd2>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b50:	e00b      	b.n	8004b6a <HAL_TIM_Encoder_Stop+0xea>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b10      	cmp	r3, #16
 8004b56:	d104      	bne.n	8004b62 <HAL_TIM_Encoder_Stop+0xe2>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b60:	e003      	b.n	8004b6a <HAL_TIM_Encoder_Stop+0xea>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d104      	bne.n	8004b7a <HAL_TIM_Encoder_Stop+0xfa>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b78:	e024      	b.n	8004bc4 <HAL_TIM_Encoder_Stop+0x144>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d104      	bne.n	8004b8a <HAL_TIM_Encoder_Stop+0x10a>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b88:	e01c      	b.n	8004bc4 <HAL_TIM_Encoder_Stop+0x144>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_Encoder_Stop+0x11a>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b98:	e014      	b.n	8004bc4 <HAL_TIM_Encoder_Stop+0x144>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8004ba2:	e00f      	b.n	8004bc4 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d020      	beq.n	8004c32 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d01b      	beq.n	8004c32 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f06f 0202 	mvn.w	r2, #2
 8004c02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fb5b 	bl	80052d4 <HAL_TIM_IC_CaptureCallback>
 8004c1e:	e005      	b.n	8004c2c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fb4d 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fb5e 	bl	80052e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d020      	beq.n	8004c7e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d01b      	beq.n	8004c7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f06f 0204 	mvn.w	r2, #4
 8004c4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fb35 	bl	80052d4 <HAL_TIM_IC_CaptureCallback>
 8004c6a:	e005      	b.n	8004c78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fb27 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fb38 	bl	80052e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d020      	beq.n	8004cca <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01b      	beq.n	8004cca <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f06f 0208 	mvn.w	r2, #8
 8004c9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2204      	movs	r2, #4
 8004ca0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	f003 0303 	and.w	r3, r3, #3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 fb0f 	bl	80052d4 <HAL_TIM_IC_CaptureCallback>
 8004cb6:	e005      	b.n	8004cc4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fb01 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fb12 	bl	80052e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d020      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01b      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f06f 0210 	mvn.w	r2, #16
 8004ce6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2208      	movs	r2, #8
 8004cec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 fae9 	bl	80052d4 <HAL_TIM_IC_CaptureCallback>
 8004d02:	e005      	b.n	8004d10 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fadb 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 faec 	bl	80052e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00c      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d007      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f06f 0201 	mvn.w	r2, #1
 8004d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7fc fa07 	bl	8001148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00c      	beq.n	8004d68 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d007      	beq.n	8004d68 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f001 f8a8 	bl	8005eb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00c      	beq.n	8004d8c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d007      	beq.n	8004d8c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f001 f8a0 	bl	8005ecc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00c      	beq.n	8004db0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d007      	beq.n	8004db0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 faa6 	bl	80052fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f003 0320 	and.w	r3, r3, #32
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00c      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d007      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0220 	mvn.w	r2, #32
 8004dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f001 f868 	bl	8005ea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00c      	beq.n	8004df8 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d007      	beq.n	8004df8 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f001 f874 	bl	8005ee0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00c      	beq.n	8004e1c <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d007      	beq.n	8004e1c <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f001 f86c 	bl	8005ef4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00c      	beq.n	8004e40 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d007      	beq.n	8004e40 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f001 f864 	bl	8005f08 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00c      	beq.n	8004e64 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d007      	beq.n	8004e64 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f001 f85c 	bl	8005f1c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d101      	bne.n	8004e8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e86:	2302      	movs	r3, #2
 8004e88:	e0ff      	b.n	800508a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b14      	cmp	r3, #20
 8004e96:	f200 80f0 	bhi.w	800507a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08004ef5 	.word	0x08004ef5
 8004ea4:	0800507b 	.word	0x0800507b
 8004ea8:	0800507b 	.word	0x0800507b
 8004eac:	0800507b 	.word	0x0800507b
 8004eb0:	08004f35 	.word	0x08004f35
 8004eb4:	0800507b 	.word	0x0800507b
 8004eb8:	0800507b 	.word	0x0800507b
 8004ebc:	0800507b 	.word	0x0800507b
 8004ec0:	08004f77 	.word	0x08004f77
 8004ec4:	0800507b 	.word	0x0800507b
 8004ec8:	0800507b 	.word	0x0800507b
 8004ecc:	0800507b 	.word	0x0800507b
 8004ed0:	08004fb7 	.word	0x08004fb7
 8004ed4:	0800507b 	.word	0x0800507b
 8004ed8:	0800507b 	.word	0x0800507b
 8004edc:	0800507b 	.word	0x0800507b
 8004ee0:	08004ff9 	.word	0x08004ff9
 8004ee4:	0800507b 	.word	0x0800507b
 8004ee8:	0800507b 	.word	0x0800507b
 8004eec:	0800507b 	.word	0x0800507b
 8004ef0:	08005039 	.word	0x08005039
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fabc 	bl	8005478 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699a      	ldr	r2, [r3, #24]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0208 	orr.w	r2, r2, #8
 8004f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0204 	bic.w	r2, r2, #4
 8004f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6999      	ldr	r1, [r3, #24]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	691a      	ldr	r2, [r3, #16]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	619a      	str	r2, [r3, #24]
      break;
 8004f32:	e0a5      	b.n	8005080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fb36 	bl	80055ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6999      	ldr	r1, [r3, #24]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	021a      	lsls	r2, r3, #8
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	619a      	str	r2, [r3, #24]
      break;
 8004f74:	e084      	b.n	8005080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 fba9 	bl	80056d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69da      	ldr	r2, [r3, #28]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0208 	orr.w	r2, r2, #8
 8004f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69da      	ldr	r2, [r3, #28]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0204 	bic.w	r2, r2, #4
 8004fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69d9      	ldr	r1, [r3, #28]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	61da      	str	r2, [r3, #28]
      break;
 8004fb4:	e064      	b.n	8005080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fc1b 	bl	80057f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69da      	ldr	r2, [r3, #28]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69d9      	ldr	r1, [r3, #28]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	021a      	lsls	r2, r3, #8
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	61da      	str	r2, [r3, #28]
      break;
 8004ff6:	e043      	b.n	8005080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68b9      	ldr	r1, [r7, #8]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fc8e 	bl	8005920 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0208 	orr.w	r2, r2, #8
 8005012:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0204 	bic.w	r2, r2, #4
 8005022:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	691a      	ldr	r2, [r3, #16]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005036:	e023      	b.n	8005080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fcd8 	bl	80059f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005052:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005062:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	021a      	lsls	r2, r3, #8
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005078:	e002      	b.n	8005080 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	75fb      	strb	r3, [r7, #23]
      break;
 800507e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005088:	7dfb      	ldrb	r3, [r7, #23]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop

08005094 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800509e:	2300      	movs	r3, #0
 80050a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_TIM_ConfigClockSource+0x1c>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e0f6      	b.n	800529e <HAL_TIM_ConfigClockSource+0x20a>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80050ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80050d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a6f      	ldr	r2, [pc, #444]	@ (80052a8 <HAL_TIM_ConfigClockSource+0x214>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	f000 80c1 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 80050f0:	4a6d      	ldr	r2, [pc, #436]	@ (80052a8 <HAL_TIM_ConfigClockSource+0x214>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	f200 80c6 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 80050f8:	4a6c      	ldr	r2, [pc, #432]	@ (80052ac <HAL_TIM_ConfigClockSource+0x218>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	f000 80b9 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005100:	4a6a      	ldr	r2, [pc, #424]	@ (80052ac <HAL_TIM_ConfigClockSource+0x218>)
 8005102:	4293      	cmp	r3, r2
 8005104:	f200 80be 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005108:	4a69      	ldr	r2, [pc, #420]	@ (80052b0 <HAL_TIM_ConfigClockSource+0x21c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	f000 80b1 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005110:	4a67      	ldr	r2, [pc, #412]	@ (80052b0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	f200 80b6 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005118:	4a66      	ldr	r2, [pc, #408]	@ (80052b4 <HAL_TIM_ConfigClockSource+0x220>)
 800511a:	4293      	cmp	r3, r2
 800511c:	f000 80a9 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005120:	4a64      	ldr	r2, [pc, #400]	@ (80052b4 <HAL_TIM_ConfigClockSource+0x220>)
 8005122:	4293      	cmp	r3, r2
 8005124:	f200 80ae 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005128:	4a63      	ldr	r2, [pc, #396]	@ (80052b8 <HAL_TIM_ConfigClockSource+0x224>)
 800512a:	4293      	cmp	r3, r2
 800512c:	f000 80a1 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005130:	4a61      	ldr	r2, [pc, #388]	@ (80052b8 <HAL_TIM_ConfigClockSource+0x224>)
 8005132:	4293      	cmp	r3, r2
 8005134:	f200 80a6 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005138:	4a60      	ldr	r2, [pc, #384]	@ (80052bc <HAL_TIM_ConfigClockSource+0x228>)
 800513a:	4293      	cmp	r3, r2
 800513c:	f000 8099 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005140:	4a5e      	ldr	r2, [pc, #376]	@ (80052bc <HAL_TIM_ConfigClockSource+0x228>)
 8005142:	4293      	cmp	r3, r2
 8005144:	f200 809e 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005148:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800514c:	f000 8091 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005150:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005154:	f200 8096 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005158:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800515c:	f000 8089 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 8005160:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005164:	f200 808e 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005168:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800516c:	d03e      	beq.n	80051ec <HAL_TIM_ConfigClockSource+0x158>
 800516e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005172:	f200 8087 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800517a:	f000 8086 	beq.w	800528a <HAL_TIM_ConfigClockSource+0x1f6>
 800517e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005182:	d87f      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005184:	2b70      	cmp	r3, #112	@ 0x70
 8005186:	d01a      	beq.n	80051be <HAL_TIM_ConfigClockSource+0x12a>
 8005188:	2b70      	cmp	r3, #112	@ 0x70
 800518a:	d87b      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 800518c:	2b60      	cmp	r3, #96	@ 0x60
 800518e:	d050      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0x19e>
 8005190:	2b60      	cmp	r3, #96	@ 0x60
 8005192:	d877      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 8005194:	2b50      	cmp	r3, #80	@ 0x50
 8005196:	d03c      	beq.n	8005212 <HAL_TIM_ConfigClockSource+0x17e>
 8005198:	2b50      	cmp	r3, #80	@ 0x50
 800519a:	d873      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 800519c:	2b40      	cmp	r3, #64	@ 0x40
 800519e:	d058      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x1be>
 80051a0:	2b40      	cmp	r3, #64	@ 0x40
 80051a2:	d86f      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 80051a4:	2b30      	cmp	r3, #48	@ 0x30
 80051a6:	d064      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 80051a8:	2b30      	cmp	r3, #48	@ 0x30
 80051aa:	d86b      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d060      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d867      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d05c      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 80051b8:	2b10      	cmp	r3, #16
 80051ba:	d05a      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x1de>
 80051bc:	e062      	b.n	8005284 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051ce:	f000 fcf9 	bl	8005bc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	609a      	str	r2, [r3, #8]
      break;
 80051ea:	e04f      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051fc:	f000 fce2 	bl	8005bc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800520e:	609a      	str	r2, [r3, #8]
      break;
 8005210:	e03c      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800521e:	461a      	mov	r2, r3
 8005220:	f000 fc54 	bl	8005acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2150      	movs	r1, #80	@ 0x50
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fcad 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8005230:	e02c      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800523e:	461a      	mov	r2, r3
 8005240:	f000 fc73 	bl	8005b2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2160      	movs	r1, #96	@ 0x60
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fc9d 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8005250:	e01c      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800525e:	461a      	mov	r2, r3
 8005260:	f000 fc34 	bl	8005acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2140      	movs	r1, #64	@ 0x40
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fc8d 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8005270:	e00c      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4619      	mov	r1, r3
 800527c:	4610      	mov	r0, r2
 800527e:	f000 fc84 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8005282:	e003      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	73fb      	strb	r3, [r7, #15]
      break;
 8005288:	e000      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800528a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800529c:	7bfb      	ldrb	r3, [r7, #15]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	00100070 	.word	0x00100070
 80052ac:	00100060 	.word	0x00100060
 80052b0:	00100050 	.word	0x00100050
 80052b4:	00100040 	.word	0x00100040
 80052b8:	00100030 	.word	0x00100030
 80052bc:	00100020 	.word	0x00100020

080052c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a4c      	ldr	r2, [pc, #304]	@ (8005454 <TIM_Base_SetConfig+0x144>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d017      	beq.n	8005358 <TIM_Base_SetConfig+0x48>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800532e:	d013      	beq.n	8005358 <TIM_Base_SetConfig+0x48>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a49      	ldr	r2, [pc, #292]	@ (8005458 <TIM_Base_SetConfig+0x148>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d00f      	beq.n	8005358 <TIM_Base_SetConfig+0x48>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a48      	ldr	r2, [pc, #288]	@ (800545c <TIM_Base_SetConfig+0x14c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00b      	beq.n	8005358 <TIM_Base_SetConfig+0x48>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a47      	ldr	r2, [pc, #284]	@ (8005460 <TIM_Base_SetConfig+0x150>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d007      	beq.n	8005358 <TIM_Base_SetConfig+0x48>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a46      	ldr	r2, [pc, #280]	@ (8005464 <TIM_Base_SetConfig+0x154>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d003      	beq.n	8005358 <TIM_Base_SetConfig+0x48>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a45      	ldr	r2, [pc, #276]	@ (8005468 <TIM_Base_SetConfig+0x158>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d108      	bne.n	800536a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800535e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a39      	ldr	r2, [pc, #228]	@ (8005454 <TIM_Base_SetConfig+0x144>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d023      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005378:	d01f      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a36      	ldr	r2, [pc, #216]	@ (8005458 <TIM_Base_SetConfig+0x148>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d01b      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a35      	ldr	r2, [pc, #212]	@ (800545c <TIM_Base_SetConfig+0x14c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d017      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a34      	ldr	r2, [pc, #208]	@ (8005460 <TIM_Base_SetConfig+0x150>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d013      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a33      	ldr	r2, [pc, #204]	@ (8005464 <TIM_Base_SetConfig+0x154>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00f      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a33      	ldr	r2, [pc, #204]	@ (800546c <TIM_Base_SetConfig+0x15c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00b      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a32      	ldr	r2, [pc, #200]	@ (8005470 <TIM_Base_SetConfig+0x160>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d007      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a31      	ldr	r2, [pc, #196]	@ (8005474 <TIM_Base_SetConfig+0x164>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <TIM_Base_SetConfig+0xaa>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005468 <TIM_Base_SetConfig+0x158>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d108      	bne.n	80053cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a18      	ldr	r2, [pc, #96]	@ (8005454 <TIM_Base_SetConfig+0x144>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d013      	beq.n	8005420 <TIM_Base_SetConfig+0x110>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005464 <TIM_Base_SetConfig+0x154>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d00f      	beq.n	8005420 <TIM_Base_SetConfig+0x110>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a1a      	ldr	r2, [pc, #104]	@ (800546c <TIM_Base_SetConfig+0x15c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00b      	beq.n	8005420 <TIM_Base_SetConfig+0x110>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a19      	ldr	r2, [pc, #100]	@ (8005470 <TIM_Base_SetConfig+0x160>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d007      	beq.n	8005420 <TIM_Base_SetConfig+0x110>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a18      	ldr	r2, [pc, #96]	@ (8005474 <TIM_Base_SetConfig+0x164>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d003      	beq.n	8005420 <TIM_Base_SetConfig+0x110>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a13      	ldr	r2, [pc, #76]	@ (8005468 <TIM_Base_SetConfig+0x158>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d103      	bne.n	8005428 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b01      	cmp	r3, #1
 8005438:	d105      	bne.n	8005446 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f023 0201 	bic.w	r2, r3, #1
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	611a      	str	r2, [r3, #16]
  }
}
 8005446:	bf00      	nop
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40000400 	.word	0x40000400
 800545c:	40000800 	.word	0x40000800
 8005460:	40000c00 	.word	0x40000c00
 8005464:	40013400 	.word	0x40013400
 8005468:	40015000 	.word	0x40015000
 800546c:	40014000 	.word	0x40014000
 8005470:	40014400 	.word	0x40014400
 8005474:	40014800 	.word	0x40014800

08005478 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	f023 0201 	bic.w	r2, r3, #1
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0303 	bic.w	r3, r3, #3
 80054b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f023 0302 	bic.w	r3, r3, #2
 80054c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a30      	ldr	r2, [pc, #192]	@ (8005594 <TIM_OC1_SetConfig+0x11c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d013      	beq.n	8005500 <TIM_OC1_SetConfig+0x88>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a2f      	ldr	r2, [pc, #188]	@ (8005598 <TIM_OC1_SetConfig+0x120>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00f      	beq.n	8005500 <TIM_OC1_SetConfig+0x88>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a2e      	ldr	r2, [pc, #184]	@ (800559c <TIM_OC1_SetConfig+0x124>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00b      	beq.n	8005500 <TIM_OC1_SetConfig+0x88>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a2d      	ldr	r2, [pc, #180]	@ (80055a0 <TIM_OC1_SetConfig+0x128>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d007      	beq.n	8005500 <TIM_OC1_SetConfig+0x88>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a2c      	ldr	r2, [pc, #176]	@ (80055a4 <TIM_OC1_SetConfig+0x12c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d003      	beq.n	8005500 <TIM_OC1_SetConfig+0x88>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a2b      	ldr	r2, [pc, #172]	@ (80055a8 <TIM_OC1_SetConfig+0x130>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d10c      	bne.n	800551a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f023 0308 	bic.w	r3, r3, #8
 8005506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4313      	orrs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f023 0304 	bic.w	r3, r3, #4
 8005518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a1d      	ldr	r2, [pc, #116]	@ (8005594 <TIM_OC1_SetConfig+0x11c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d013      	beq.n	800554a <TIM_OC1_SetConfig+0xd2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a1c      	ldr	r2, [pc, #112]	@ (8005598 <TIM_OC1_SetConfig+0x120>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00f      	beq.n	800554a <TIM_OC1_SetConfig+0xd2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a1b      	ldr	r2, [pc, #108]	@ (800559c <TIM_OC1_SetConfig+0x124>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00b      	beq.n	800554a <TIM_OC1_SetConfig+0xd2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a1a      	ldr	r2, [pc, #104]	@ (80055a0 <TIM_OC1_SetConfig+0x128>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d007      	beq.n	800554a <TIM_OC1_SetConfig+0xd2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a19      	ldr	r2, [pc, #100]	@ (80055a4 <TIM_OC1_SetConfig+0x12c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d003      	beq.n	800554a <TIM_OC1_SetConfig+0xd2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a18      	ldr	r2, [pc, #96]	@ (80055a8 <TIM_OC1_SetConfig+0x130>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d111      	bne.n	800556e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4313      	orrs	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	621a      	str	r2, [r3, #32]
}
 8005588:	bf00      	nop
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	40012c00 	.word	0x40012c00
 8005598:	40013400 	.word	0x40013400
 800559c:	40014000 	.word	0x40014000
 80055a0:	40014400 	.word	0x40014400
 80055a4:	40014800 	.word	0x40014800
 80055a8:	40015000 	.word	0x40015000

080055ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	f023 0210 	bic.w	r2, r3, #16
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	021b      	lsls	r3, r3, #8
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f023 0320 	bic.w	r3, r3, #32
 80055fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	011b      	lsls	r3, r3, #4
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a2c      	ldr	r2, [pc, #176]	@ (80056bc <TIM_OC2_SetConfig+0x110>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d007      	beq.n	8005620 <TIM_OC2_SetConfig+0x74>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a2b      	ldr	r2, [pc, #172]	@ (80056c0 <TIM_OC2_SetConfig+0x114>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d003      	beq.n	8005620 <TIM_OC2_SetConfig+0x74>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a2a      	ldr	r2, [pc, #168]	@ (80056c4 <TIM_OC2_SetConfig+0x118>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d10d      	bne.n	800563c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800563a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a1f      	ldr	r2, [pc, #124]	@ (80056bc <TIM_OC2_SetConfig+0x110>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d013      	beq.n	800566c <TIM_OC2_SetConfig+0xc0>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a1e      	ldr	r2, [pc, #120]	@ (80056c0 <TIM_OC2_SetConfig+0x114>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00f      	beq.n	800566c <TIM_OC2_SetConfig+0xc0>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a1e      	ldr	r2, [pc, #120]	@ (80056c8 <TIM_OC2_SetConfig+0x11c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00b      	beq.n	800566c <TIM_OC2_SetConfig+0xc0>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a1d      	ldr	r2, [pc, #116]	@ (80056cc <TIM_OC2_SetConfig+0x120>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d007      	beq.n	800566c <TIM_OC2_SetConfig+0xc0>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a1c      	ldr	r2, [pc, #112]	@ (80056d0 <TIM_OC2_SetConfig+0x124>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d003      	beq.n	800566c <TIM_OC2_SetConfig+0xc0>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a17      	ldr	r2, [pc, #92]	@ (80056c4 <TIM_OC2_SetConfig+0x118>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d113      	bne.n	8005694 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005672:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800567a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	621a      	str	r2, [r3, #32]
}
 80056ae:	bf00      	nop
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	40012c00 	.word	0x40012c00
 80056c0:	40013400 	.word	0x40013400
 80056c4:	40015000 	.word	0x40015000
 80056c8:	40014000 	.word	0x40014000
 80056cc:	40014400 	.word	0x40014400
 80056d0:	40014800 	.word	0x40014800

080056d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0303 	bic.w	r3, r3, #3
 800570e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2b      	ldr	r2, [pc, #172]	@ (80057e0 <TIM_OC3_SetConfig+0x10c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d007      	beq.n	8005746 <TIM_OC3_SetConfig+0x72>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2a      	ldr	r2, [pc, #168]	@ (80057e4 <TIM_OC3_SetConfig+0x110>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d003      	beq.n	8005746 <TIM_OC3_SetConfig+0x72>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a29      	ldr	r2, [pc, #164]	@ (80057e8 <TIM_OC3_SetConfig+0x114>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d10d      	bne.n	8005762 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800574c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a1e      	ldr	r2, [pc, #120]	@ (80057e0 <TIM_OC3_SetConfig+0x10c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d013      	beq.n	8005792 <TIM_OC3_SetConfig+0xbe>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a1d      	ldr	r2, [pc, #116]	@ (80057e4 <TIM_OC3_SetConfig+0x110>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00f      	beq.n	8005792 <TIM_OC3_SetConfig+0xbe>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a1d      	ldr	r2, [pc, #116]	@ (80057ec <TIM_OC3_SetConfig+0x118>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00b      	beq.n	8005792 <TIM_OC3_SetConfig+0xbe>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a1c      	ldr	r2, [pc, #112]	@ (80057f0 <TIM_OC3_SetConfig+0x11c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d007      	beq.n	8005792 <TIM_OC3_SetConfig+0xbe>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a1b      	ldr	r2, [pc, #108]	@ (80057f4 <TIM_OC3_SetConfig+0x120>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d003      	beq.n	8005792 <TIM_OC3_SetConfig+0xbe>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a16      	ldr	r2, [pc, #88]	@ (80057e8 <TIM_OC3_SetConfig+0x114>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d113      	bne.n	80057ba <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	621a      	str	r2, [r3, #32]
}
 80057d4:	bf00      	nop
 80057d6:	371c      	adds	r7, #28
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40013400 	.word	0x40013400
 80057e8:	40015000 	.word	0x40015000
 80057ec:	40014000 	.word	0x40014000
 80057f0:	40014400 	.word	0x40014400
 80057f4:	40014800 	.word	0x40014800

080057f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800582a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	021b      	lsls	r3, r3, #8
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	031b      	lsls	r3, r3, #12
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a2c      	ldr	r2, [pc, #176]	@ (8005908 <TIM_OC4_SetConfig+0x110>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d007      	beq.n	800586c <TIM_OC4_SetConfig+0x74>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a2b      	ldr	r2, [pc, #172]	@ (800590c <TIM_OC4_SetConfig+0x114>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d003      	beq.n	800586c <TIM_OC4_SetConfig+0x74>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a2a      	ldr	r2, [pc, #168]	@ (8005910 <TIM_OC4_SetConfig+0x118>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d10d      	bne.n	8005888 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	031b      	lsls	r3, r3, #12
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005886:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a1f      	ldr	r2, [pc, #124]	@ (8005908 <TIM_OC4_SetConfig+0x110>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d013      	beq.n	80058b8 <TIM_OC4_SetConfig+0xc0>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a1e      	ldr	r2, [pc, #120]	@ (800590c <TIM_OC4_SetConfig+0x114>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00f      	beq.n	80058b8 <TIM_OC4_SetConfig+0xc0>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a1e      	ldr	r2, [pc, #120]	@ (8005914 <TIM_OC4_SetConfig+0x11c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00b      	beq.n	80058b8 <TIM_OC4_SetConfig+0xc0>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005918 <TIM_OC4_SetConfig+0x120>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d007      	beq.n	80058b8 <TIM_OC4_SetConfig+0xc0>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a1c      	ldr	r2, [pc, #112]	@ (800591c <TIM_OC4_SetConfig+0x124>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d003      	beq.n	80058b8 <TIM_OC4_SetConfig+0xc0>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a17      	ldr	r2, [pc, #92]	@ (8005910 <TIM_OC4_SetConfig+0x118>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d113      	bne.n	80058e0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058be:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058c6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	019b      	lsls	r3, r3, #6
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	019b      	lsls	r3, r3, #6
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	621a      	str	r2, [r3, #32]
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40012c00 	.word	0x40012c00
 800590c:	40013400 	.word	0x40013400
 8005910:	40015000 	.word	0x40015000
 8005914:	40014000 	.word	0x40014000
 8005918:	40014400 	.word	0x40014400
 800591c:	40014800 	.word	0x40014800

08005920 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800594e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005964:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	041b      	lsls	r3, r3, #16
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a19      	ldr	r2, [pc, #100]	@ (80059dc <TIM_OC5_SetConfig+0xbc>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d013      	beq.n	80059a2 <TIM_OC5_SetConfig+0x82>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a18      	ldr	r2, [pc, #96]	@ (80059e0 <TIM_OC5_SetConfig+0xc0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00f      	beq.n	80059a2 <TIM_OC5_SetConfig+0x82>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a17      	ldr	r2, [pc, #92]	@ (80059e4 <TIM_OC5_SetConfig+0xc4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00b      	beq.n	80059a2 <TIM_OC5_SetConfig+0x82>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a16      	ldr	r2, [pc, #88]	@ (80059e8 <TIM_OC5_SetConfig+0xc8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d007      	beq.n	80059a2 <TIM_OC5_SetConfig+0x82>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a15      	ldr	r2, [pc, #84]	@ (80059ec <TIM_OC5_SetConfig+0xcc>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d003      	beq.n	80059a2 <TIM_OC5_SetConfig+0x82>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a14      	ldr	r2, [pc, #80]	@ (80059f0 <TIM_OC5_SetConfig+0xd0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d109      	bne.n	80059b6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	021b      	lsls	r3, r3, #8
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	621a      	str	r2, [r3, #32]
}
 80059d0:	bf00      	nop
 80059d2:	371c      	adds	r7, #28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40013400 	.word	0x40013400
 80059e4:	40014000 	.word	0x40014000
 80059e8:	40014400 	.word	0x40014400
 80059ec:	40014800 	.word	0x40014800
 80059f0:	40015000 	.word	0x40015000

080059f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	021b      	lsls	r3, r3, #8
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	051b      	lsls	r3, r3, #20
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ab4 <TIM_OC6_SetConfig+0xc0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d013      	beq.n	8005a78 <TIM_OC6_SetConfig+0x84>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a19      	ldr	r2, [pc, #100]	@ (8005ab8 <TIM_OC6_SetConfig+0xc4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00f      	beq.n	8005a78 <TIM_OC6_SetConfig+0x84>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a18      	ldr	r2, [pc, #96]	@ (8005abc <TIM_OC6_SetConfig+0xc8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00b      	beq.n	8005a78 <TIM_OC6_SetConfig+0x84>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a17      	ldr	r2, [pc, #92]	@ (8005ac0 <TIM_OC6_SetConfig+0xcc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d007      	beq.n	8005a78 <TIM_OC6_SetConfig+0x84>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a16      	ldr	r2, [pc, #88]	@ (8005ac4 <TIM_OC6_SetConfig+0xd0>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d003      	beq.n	8005a78 <TIM_OC6_SetConfig+0x84>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a15      	ldr	r2, [pc, #84]	@ (8005ac8 <TIM_OC6_SetConfig+0xd4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d109      	bne.n	8005a8c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	029b      	lsls	r3, r3, #10
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	621a      	str	r2, [r3, #32]
}
 8005aa6:	bf00      	nop
 8005aa8:	371c      	adds	r7, #28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	40012c00 	.word	0x40012c00
 8005ab8:	40013400 	.word	0x40013400
 8005abc:	40014000 	.word	0x40014000
 8005ac0:	40014400 	.word	0x40014400
 8005ac4:	40014800 	.word	0x40014800
 8005ac8:	40015000 	.word	0x40015000

08005acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	f023 0201 	bic.w	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	011b      	lsls	r3, r3, #4
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f023 030a 	bic.w	r3, r3, #10
 8005b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	621a      	str	r2, [r3, #32]
}
 8005b1e:	bf00      	nop
 8005b20:	371c      	adds	r7, #28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b087      	sub	sp, #28
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	60f8      	str	r0, [r7, #12]
 8005b32:	60b9      	str	r1, [r7, #8]
 8005b34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	f023 0210 	bic.w	r2, r3, #16
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	031b      	lsls	r3, r3, #12
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	621a      	str	r2, [r3, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005ba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ba4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f043 0307 	orr.w	r3, r3, #7
 8005bb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	609a      	str	r2, [r3, #8]
}
 8005bb8:	bf00      	nop
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
 8005bd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	021a      	lsls	r2, r3, #8
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	431a      	orrs	r2, r3
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	609a      	str	r2, [r3, #8]
}
 8005bf8:	bf00      	nop
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f003 031f 	and.w	r3, r3, #31
 8005c16:	2201      	movs	r2, #1
 8005c18:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a1a      	ldr	r2, [r3, #32]
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	43db      	mvns	r3, r3
 8005c26:	401a      	ands	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6a1a      	ldr	r2, [r3, #32]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f003 031f 	and.w	r3, r3, #31
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	fa01 f303 	lsl.w	r3, r1, r3
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	621a      	str	r2, [r3, #32]
}
 8005c42:	bf00      	nop
 8005c44:	371c      	adds	r7, #28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
	...

08005c50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e074      	b.n	8005d52 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a34      	ldr	r2, [pc, #208]	@ (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d009      	beq.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a33      	ldr	r2, [pc, #204]	@ (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d004      	beq.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a31      	ldr	r2, [pc, #196]	@ (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d108      	bne.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005cac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a21      	ldr	r2, [pc, #132]	@ (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d022      	beq.n	8005d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ce8:	d01d      	beq.n	8005d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a1f      	ldr	r2, [pc, #124]	@ (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d018      	beq.n	8005d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d013      	beq.n	8005d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a1c      	ldr	r2, [pc, #112]	@ (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d00e      	beq.n	8005d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a15      	ldr	r2, [pc, #84]	@ (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d009      	beq.n	8005d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a18      	ldr	r2, [pc, #96]	@ (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d004      	beq.n	8005d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a11      	ldr	r2, [pc, #68]	@ (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d10c      	bne.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40012c00 	.word	0x40012c00
 8005d64:	40013400 	.word	0x40013400
 8005d68:	40015000 	.word	0x40015000
 8005d6c:	40000400 	.word	0x40000400
 8005d70:	40000800 	.word	0x40000800
 8005d74:	40000c00 	.word	0x40000c00
 8005d78:	40014000 	.word	0x40014000

08005d7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d94:	2302      	movs	r3, #2
 8005d96:	e078      	b.n	8005e8a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	041b      	lsls	r3, r3, #16
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a1c      	ldr	r2, [pc, #112]	@ (8005e98 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d009      	beq.n	8005e3e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8005e9c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d004      	beq.n	8005e3e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a19      	ldr	r2, [pc, #100]	@ (8005ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d11c      	bne.n	8005e78 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e48:	051b      	lsls	r3, r3, #20
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	40012c00 	.word	0x40012c00
 8005e9c:	40013400 	.word	0x40013400
 8005ea0:	40015000 	.word	0x40015000

08005ea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	ed93 7a06 	vldr	s14, [r3, #24]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	edd3 7a07 	vldr	s15, [r3, #28]
 8005f46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	edd3 7a08 	vldr	s15, [r3, #32]
 8005f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005f60:	eeb1 7a67 	vneg.f32	s14, s15
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	edd3 7a08 	vldr	s15, [r3, #32]
 8005f6a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a1a      	ldr	r2, [r3, #32]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d006      	beq.n	8005f94 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	330c      	adds	r3, #12
 8005f8a:	220c      	movs	r2, #12
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 f804 	bl	8005f9c <memset>
  }

}
 8005f94:	bf00      	nop
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <memset>:
 8005f9c:	4402      	add	r2, r0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d100      	bne.n	8005fa6 <memset+0xa>
 8005fa4:	4770      	bx	lr
 8005fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8005faa:	e7f9      	b.n	8005fa0 <memset+0x4>

08005fac <__libc_init_array>:
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	4d0d      	ldr	r5, [pc, #52]	@ (8005fe4 <__libc_init_array+0x38>)
 8005fb0:	4c0d      	ldr	r4, [pc, #52]	@ (8005fe8 <__libc_init_array+0x3c>)
 8005fb2:	1b64      	subs	r4, r4, r5
 8005fb4:	10a4      	asrs	r4, r4, #2
 8005fb6:	2600      	movs	r6, #0
 8005fb8:	42a6      	cmp	r6, r4
 8005fba:	d109      	bne.n	8005fd0 <__libc_init_array+0x24>
 8005fbc:	4d0b      	ldr	r5, [pc, #44]	@ (8005fec <__libc_init_array+0x40>)
 8005fbe:	4c0c      	ldr	r4, [pc, #48]	@ (8005ff0 <__libc_init_array+0x44>)
 8005fc0:	f000 f818 	bl	8005ff4 <_init>
 8005fc4:	1b64      	subs	r4, r4, r5
 8005fc6:	10a4      	asrs	r4, r4, #2
 8005fc8:	2600      	movs	r6, #0
 8005fca:	42a6      	cmp	r6, r4
 8005fcc:	d105      	bne.n	8005fda <__libc_init_array+0x2e>
 8005fce:	bd70      	pop	{r4, r5, r6, pc}
 8005fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd4:	4798      	blx	r3
 8005fd6:	3601      	adds	r6, #1
 8005fd8:	e7ee      	b.n	8005fb8 <__libc_init_array+0xc>
 8005fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fde:	4798      	blx	r3
 8005fe0:	3601      	adds	r6, #1
 8005fe2:	e7f2      	b.n	8005fca <__libc_init_array+0x1e>
 8005fe4:	0800601c 	.word	0x0800601c
 8005fe8:	0800601c 	.word	0x0800601c
 8005fec:	0800601c 	.word	0x0800601c
 8005ff0:	08006020 	.word	0x08006020

08005ff4 <_init>:
 8005ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff6:	bf00      	nop
 8005ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffa:	bc08      	pop	{r3}
 8005ffc:	469e      	mov	lr, r3
 8005ffe:	4770      	bx	lr

08006000 <_fini>:
 8006000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006002:	bf00      	nop
 8006004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006006:	bc08      	pop	{r3}
 8006008:	469e      	mov	lr, r3
 800600a:	4770      	bx	lr
