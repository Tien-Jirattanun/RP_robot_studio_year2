
RP_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051fc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080053d4  080053d4  000063d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e4  080053e4  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080053e4  080053e4  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053e4  080053e4  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e4  080053e4  000063e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053e8  080053e8  000063e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080053ec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000000c  080053f8  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  080053f8  00007238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f8f  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000248f  00000000  00000000  00017fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  0001a460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dab  00000000  00000000  0001b618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028097  00000000  00000000  0001c3c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d68  00000000  00000000  0004445a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010dd7a  00000000  00000000  000571c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00164f3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c3c  00000000  00000000  00164f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00169bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080053bc 	.word	0x080053bc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080053bc 	.word	0x080053bc

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fe39 	bl	8000e92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f82c 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 faea 	bl	80007fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000228:	f000 fabe 	bl	80007a8 <MX_DMA_Init>
  MX_TIM1_Init();
 800022c:	f000 f8fa 	bl	8000424 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000230:	f000 fa0e 	bl	8000650 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000234:	f000 fa62 	bl	80006fc <MX_TIM4_Init>
  MX_ADC1_Init();
 8000238:	f000 f86c 	bl	8000314 <MX_ADC1_Init>
  MX_TIM2_Init();
 800023c:	f000 f9ba 	bl	80005b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Setup PWM Generator
  HAL_TIM_Base_Start(&htim1);
 8000240:	480c      	ldr	r0, [pc, #48]	@ (8000274 <main+0x5c>)
 8000242:	f003 fc63 	bl	8003b0c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000246:	2100      	movs	r1, #0
 8000248:	480a      	ldr	r0, [pc, #40]	@ (8000274 <main+0x5c>)
 800024a:	f003 fda9 	bl	8003da0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800024e:	2104      	movs	r1, #4
 8000250:	4808      	ldr	r0, [pc, #32]	@ (8000274 <main+0x5c>)
 8000252:	f003 fda5 	bl	8003da0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000256:	2108      	movs	r1, #8
 8000258:	4806      	ldr	r0, [pc, #24]	@ (8000274 <main+0x5c>)
 800025a:	f003 fda1 	bl	8003da0 <HAL_TIM_PWM_Start>

  // Setup Encoder
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800025e:	213c      	movs	r1, #60	@ 0x3c
 8000260:	4805      	ldr	r0, [pc, #20]	@ (8000278 <main+0x60>)
 8000262:	f003 ff55 	bl	8004110 <HAL_TIM_Encoder_Start>

  // Setup Timer 2 for sensor reading
  HAL_TIM_Base_Start_IT(&htim3);
 8000266:	4804      	ldr	r0, [pc, #16]	@ (8000278 <main+0x60>)
 8000268:	f003 fcc0 	bl	8003bec <HAL_TIM_Base_Start_IT>

  SetHomePrismatic();
 800026c:	f000 fb68 	bl	8000940 <SetHomePrismatic>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000270:	bf00      	nop
 8000272:	e7fd      	b.n	8000270 <main+0x58>
 8000274:	200000f4 	.word	0x200000f4
 8000278:	2000018c 	.word	0x2000018c

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b094      	sub	sp, #80	@ 0x50
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	2238      	movs	r2, #56	@ 0x38
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f005 f86a 	bl	8005364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800029e:	2000      	movs	r0, #0
 80002a0:	f002 fbe4 	bl	8002a6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a4:	2302      	movs	r3, #2
 80002a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ae:	2340      	movs	r3, #64	@ 0x40
 80002b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b2:	2302      	movs	r3, #2
 80002b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002b6:	2302      	movs	r3, #2
 80002b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80002ba:	2304      	movs	r3, #4
 80002bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80002be:	2355      	movs	r3, #85	@ 0x55
 80002c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002c2:	2302      	movs	r3, #2
 80002c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002c6:	2302      	movs	r3, #2
 80002c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ca:	2302      	movs	r3, #2
 80002cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ce:	f107 0318 	add.w	r3, r7, #24
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 fc7e 	bl	8002bd4 <HAL_RCC_OscConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002de:	f000 fbc3 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	230f      	movs	r3, #15
 80002e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e6:	2303      	movs	r3, #3
 80002e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2104      	movs	r1, #4
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 ff7c 	bl	80031f8 <HAL_RCC_ClockConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000306:	f000 fbaf 	bl	8000a68 <Error_Handler>
  }
}
 800030a:	bf00      	nop
 800030c:	3750      	adds	r7, #80	@ 0x50
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b08c      	sub	sp, #48	@ 0x30
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800031a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2220      	movs	r2, #32
 800032a:	2100      	movs	r1, #0
 800032c:	4618      	mov	r0, r3
 800032e:	f005 f819 	bl	8005364 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000332:	4b39      	ldr	r3, [pc, #228]	@ (8000418 <MX_ADC1_Init+0x104>)
 8000334:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000338:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800033a:	4b37      	ldr	r3, [pc, #220]	@ (8000418 <MX_ADC1_Init+0x104>)
 800033c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000340:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000342:	4b35      	ldr	r3, [pc, #212]	@ (8000418 <MX_ADC1_Init+0x104>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000348:	4b33      	ldr	r3, [pc, #204]	@ (8000418 <MX_ADC1_Init+0x104>)
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800034e:	4b32      	ldr	r3, [pc, #200]	@ (8000418 <MX_ADC1_Init+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000354:	4b30      	ldr	r3, [pc, #192]	@ (8000418 <MX_ADC1_Init+0x104>)
 8000356:	2201      	movs	r2, #1
 8000358:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800035a:	4b2f      	ldr	r3, [pc, #188]	@ (8000418 <MX_ADC1_Init+0x104>)
 800035c:	2204      	movs	r2, #4
 800035e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000360:	4b2d      	ldr	r3, [pc, #180]	@ (8000418 <MX_ADC1_Init+0x104>)
 8000362:	2200      	movs	r2, #0
 8000364:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000366:	4b2c      	ldr	r3, [pc, #176]	@ (8000418 <MX_ADC1_Init+0x104>)
 8000368:	2201      	movs	r2, #1
 800036a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800036c:	4b2a      	ldr	r3, [pc, #168]	@ (8000418 <MX_ADC1_Init+0x104>)
 800036e:	2202      	movs	r2, #2
 8000370:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000372:	4b29      	ldr	r3, [pc, #164]	@ (8000418 <MX_ADC1_Init+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800037a:	4b27      	ldr	r3, [pc, #156]	@ (8000418 <MX_ADC1_Init+0x104>)
 800037c:	2200      	movs	r2, #0
 800037e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000380:	4b25      	ldr	r3, [pc, #148]	@ (8000418 <MX_ADC1_Init+0x104>)
 8000382:	2200      	movs	r2, #0
 8000384:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000386:	4b24      	ldr	r3, [pc, #144]	@ (8000418 <MX_ADC1_Init+0x104>)
 8000388:	2201      	movs	r2, #1
 800038a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800038e:	4b22      	ldr	r3, [pc, #136]	@ (8000418 <MX_ADC1_Init+0x104>)
 8000390:	2200      	movs	r2, #0
 8000392:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000394:	4b20      	ldr	r3, [pc, #128]	@ (8000418 <MX_ADC1_Init+0x104>)
 8000396:	2200      	movs	r2, #0
 8000398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800039c:	481e      	ldr	r0, [pc, #120]	@ (8000418 <MX_ADC1_Init+0x104>)
 800039e:	f000 ffbf 	bl	8001320 <HAL_ADC_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80003a8:	f000 fb5e 	bl	8000a68 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003ac:	2300      	movs	r3, #0
 80003ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003b4:	4619      	mov	r1, r3
 80003b6:	4818      	ldr	r0, [pc, #96]	@ (8000418 <MX_ADC1_Init+0x104>)
 80003b8:	f001 fdd4 	bl	8001f64 <HAL_ADCEx_MultiModeConfigChannel>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80003c2:	f000 fb51 	bl	8000a68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003c6:	4b15      	ldr	r3, [pc, #84]	@ (800041c <MX_ADC1_Init+0x108>)
 80003c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ca:	2306      	movs	r3, #6
 80003cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80003ce:	2307      	movs	r3, #7
 80003d0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003d2:	237f      	movs	r3, #127	@ 0x7f
 80003d4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003d6:	2304      	movs	r3, #4
 80003d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4619      	mov	r1, r3
 80003e2:	480d      	ldr	r0, [pc, #52]	@ (8000418 <MX_ADC1_Init+0x104>)
 80003e4:	f001 f958 	bl	8001698 <HAL_ADC_ConfigChannel>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80003ee:	f000 fb3b 	bl	8000a68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80003f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000420 <MX_ADC1_Init+0x10c>)
 80003f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003f6:	230c      	movs	r3, #12
 80003f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	4619      	mov	r1, r3
 80003fe:	4806      	ldr	r0, [pc, #24]	@ (8000418 <MX_ADC1_Init+0x104>)
 8000400:	f001 f94a 	bl	8001698 <HAL_ADC_ConfigChannel>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800040a:	f000 fb2d 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	3730      	adds	r7, #48	@ 0x30
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000028 	.word	0x20000028
 800041c:	1d500080 	.word	0x1d500080
 8000420:	21800100 	.word	0x21800100

08000424 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b09c      	sub	sp, #112	@ 0x70
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800042a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000438:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000444:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	605a      	str	r2, [r3, #4]
 800044e:	609a      	str	r2, [r3, #8]
 8000450:	60da      	str	r2, [r3, #12]
 8000452:	611a      	str	r2, [r3, #16]
 8000454:	615a      	str	r2, [r3, #20]
 8000456:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2234      	movs	r2, #52	@ 0x34
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f004 ff80 	bl	8005364 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000464:	4b51      	ldr	r3, [pc, #324]	@ (80005ac <MX_TIM1_Init+0x188>)
 8000466:	4a52      	ldr	r2, [pc, #328]	@ (80005b0 <MX_TIM1_Init+0x18c>)
 8000468:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 800046a:	4b50      	ldr	r3, [pc, #320]	@ (80005ac <MX_TIM1_Init+0x188>)
 800046c:	22a9      	movs	r2, #169	@ 0xa9
 800046e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000470:	4b4e      	ldr	r3, [pc, #312]	@ (80005ac <MX_TIM1_Init+0x188>)
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000476:	4b4d      	ldr	r3, [pc, #308]	@ (80005ac <MX_TIM1_Init+0x188>)
 8000478:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800047c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800047e:	4b4b      	ldr	r3, [pc, #300]	@ (80005ac <MX_TIM1_Init+0x188>)
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000484:	4b49      	ldr	r3, [pc, #292]	@ (80005ac <MX_TIM1_Init+0x188>)
 8000486:	2200      	movs	r2, #0
 8000488:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800048a:	4b48      	ldr	r3, [pc, #288]	@ (80005ac <MX_TIM1_Init+0x188>)
 800048c:	2200      	movs	r2, #0
 800048e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000490:	4846      	ldr	r0, [pc, #280]	@ (80005ac <MX_TIM1_Init+0x188>)
 8000492:	f003 fae3 	bl	8003a5c <HAL_TIM_Base_Init>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800049c:	f000 fae4 	bl	8000a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004a4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004a6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80004aa:	4619      	mov	r1, r3
 80004ac:	483f      	ldr	r0, [pc, #252]	@ (80005ac <MX_TIM1_Init+0x188>)
 80004ae:	f004 f879 	bl	80045a4 <HAL_TIM_ConfigClockSource>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80004b8:	f000 fad6 	bl	8000a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004bc:	483b      	ldr	r0, [pc, #236]	@ (80005ac <MX_TIM1_Init+0x188>)
 80004be:	f003 fc0d 	bl	8003cdc <HAL_TIM_PWM_Init>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80004c8:	f000 face 	bl	8000a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004cc:	2300      	movs	r3, #0
 80004ce:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004d0:	2300      	movs	r3, #0
 80004d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d4:	2300      	movs	r3, #0
 80004d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80004dc:	4619      	mov	r1, r3
 80004de:	4833      	ldr	r0, [pc, #204]	@ (80005ac <MX_TIM1_Init+0x188>)
 80004e0:	f004 fe16 	bl	8005110 <HAL_TIMEx_MasterConfigSynchronization>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80004ea:	f000 fabd 	bl	8000a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ee:	2360      	movs	r3, #96	@ 0x60
 80004f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f6:	2300      	movs	r3, #0
 80004f8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004fa:	2300      	movs	r3, #0
 80004fc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004fe:	2300      	movs	r3, #0
 8000500:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000502:	2300      	movs	r3, #0
 8000504:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000506:	2300      	movs	r3, #0
 8000508:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800050a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800050e:	2200      	movs	r2, #0
 8000510:	4619      	mov	r1, r3
 8000512:	4826      	ldr	r0, [pc, #152]	@ (80005ac <MX_TIM1_Init+0x188>)
 8000514:	f003 ff32 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800051e:	f000 faa3 	bl	8000a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000522:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000526:	2204      	movs	r2, #4
 8000528:	4619      	mov	r1, r3
 800052a:	4820      	ldr	r0, [pc, #128]	@ (80005ac <MX_TIM1_Init+0x188>)
 800052c:	f003 ff26 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000536:	f000 fa97 	bl	8000a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800053a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800053e:	2208      	movs	r2, #8
 8000540:	4619      	mov	r1, r3
 8000542:	481a      	ldr	r0, [pc, #104]	@ (80005ac <MX_TIM1_Init+0x188>)
 8000544:	f003 ff1a 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800054e:	f000 fa8b 	bl	8000a68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000552:	2300      	movs	r3, #0
 8000554:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000566:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800056a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000574:	2300      	movs	r3, #0
 8000576:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000578:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800057c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000582:	2300      	movs	r3, #0
 8000584:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000586:	2300      	movs	r3, #0
 8000588:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	4619      	mov	r1, r3
 800058e:	4807      	ldr	r0, [pc, #28]	@ (80005ac <MX_TIM1_Init+0x188>)
 8000590:	f004 fe54 	bl	800523c <HAL_TIMEx_ConfigBreakDeadTime>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800059a:	f000 fa65 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800059e:	4803      	ldr	r0, [pc, #12]	@ (80005ac <MX_TIM1_Init+0x188>)
 80005a0:	f000 fbb6 	bl	8000d10 <HAL_TIM_MspPostInit>

}
 80005a4:	bf00      	nop
 80005a6:	3770      	adds	r7, #112	@ 0x70
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	200000f4 	.word	0x200000f4
 80005b0:	40012c00 	.word	0x40012c00

080005b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005d2:	4b1e      	ldr	r3, [pc, #120]	@ (800064c <MX_TIM2_Init+0x98>)
 80005d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17000;
 80005da:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <MX_TIM2_Init+0x98>)
 80005dc:	f244 2268 	movw	r2, #17000	@ 0x4268
 80005e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e2:	4b1a      	ldr	r3, [pc, #104]	@ (800064c <MX_TIM2_Init+0x98>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24999;
 80005e8:	4b18      	ldr	r3, [pc, #96]	@ (800064c <MX_TIM2_Init+0x98>)
 80005ea:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 80005ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f0:	4b16      	ldr	r3, [pc, #88]	@ (800064c <MX_TIM2_Init+0x98>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f6:	4b15      	ldr	r3, [pc, #84]	@ (800064c <MX_TIM2_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005fc:	4813      	ldr	r0, [pc, #76]	@ (800064c <MX_TIM2_Init+0x98>)
 80005fe:	f003 fa2d 	bl	8003a5c <HAL_TIM_Base_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000608:	f000 fa2e 	bl	8000a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800060c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000610:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	4619      	mov	r1, r3
 8000618:	480c      	ldr	r0, [pc, #48]	@ (800064c <MX_TIM2_Init+0x98>)
 800061a:	f003 ffc3 	bl	80045a4 <HAL_TIM_ConfigClockSource>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000624:	f000 fa20 	bl	8000a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	@ (800064c <MX_TIM2_Init+0x98>)
 8000636:	f004 fd6b 	bl	8005110 <HAL_TIMEx_MasterConfigSynchronization>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000640:	f000 fa12 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3720      	adds	r7, #32
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000140 	.word	0x20000140

08000650 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08c      	sub	sp, #48	@ 0x30
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2224      	movs	r2, #36	@ 0x24
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f004 fe80 	bl	8005364 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000664:	463b      	mov	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800066e:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <MX_TIM3_Init+0xa4>)
 8000670:	4a21      	ldr	r2, [pc, #132]	@ (80006f8 <MX_TIM3_Init+0xa8>)
 8000672:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000674:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <MX_TIM3_Init+0xa4>)
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067a:	4b1e      	ldr	r3, [pc, #120]	@ (80006f4 <MX_TIM3_Init+0xa4>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2048;
 8000680:	4b1c      	ldr	r3, [pc, #112]	@ (80006f4 <MX_TIM3_Init+0xa4>)
 8000682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000686:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_TIM3_Init+0xa4>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068e:	4b19      	ldr	r3, [pc, #100]	@ (80006f4 <MX_TIM3_Init+0xa4>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000694:	2303      	movs	r3, #3
 8000696:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800069c:	2301      	movs	r3, #1
 800069e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006ac:	2301      	movs	r3, #1
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	4619      	mov	r1, r3
 80006be:	480d      	ldr	r0, [pc, #52]	@ (80006f4 <MX_TIM3_Init+0xa4>)
 80006c0:	f003 fc80 	bl	8003fc4 <HAL_TIM_Encoder_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80006ca:	f000 f9cd 	bl	8000a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ce:	2300      	movs	r3, #0
 80006d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	@ (80006f4 <MX_TIM3_Init+0xa4>)
 80006dc:	f004 fd18 	bl	8005110 <HAL_TIMEx_MasterConfigSynchronization>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80006e6:	f000 f9bf 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	3730      	adds	r7, #48	@ 0x30
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000018c 	.word	0x2000018c
 80006f8:	40000400 	.word	0x40000400

080006fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	@ 0x30
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2224      	movs	r2, #36	@ 0x24
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f004 fe2a 	bl	8005364 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000710:	463b      	mov	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800071a:	4b21      	ldr	r3, [pc, #132]	@ (80007a0 <MX_TIM4_Init+0xa4>)
 800071c:	4a21      	ldr	r2, [pc, #132]	@ (80007a4 <MX_TIM4_Init+0xa8>)
 800071e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000720:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <MX_TIM4_Init+0xa4>)
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000726:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <MX_TIM4_Init+0xa4>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800072c:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <MX_TIM4_Init+0xa4>)
 800072e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000732:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000734:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_TIM4_Init+0xa4>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073a:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <MX_TIM4_Init+0xa4>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000740:	2303      	movs	r3, #3
 8000742:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000748:	2301      	movs	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000758:	2301      	movs	r3, #1
 800075a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	4619      	mov	r1, r3
 800076a:	480d      	ldr	r0, [pc, #52]	@ (80007a0 <MX_TIM4_Init+0xa4>)
 800076c:	f003 fc2a 	bl	8003fc4 <HAL_TIM_Encoder_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000776:	f000 f977 	bl	8000a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	4619      	mov	r1, r3
 8000786:	4806      	ldr	r0, [pc, #24]	@ (80007a0 <MX_TIM4_Init+0xa4>)
 8000788:	f004 fcc2 	bl	8005110 <HAL_TIMEx_MasterConfigSynchronization>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000792:	f000 f969 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	3730      	adds	r7, #48	@ 0x30
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200001d8 	.word	0x200001d8
 80007a4:	40000800 	.word	0x40000800

080007a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007ae:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <MX_DMA_Init+0x50>)
 80007b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007b2:	4a11      	ldr	r2, [pc, #68]	@ (80007f8 <MX_DMA_Init+0x50>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80007ba:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_DMA_Init+0x50>)
 80007bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007c6:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <MX_DMA_Init+0x50>)
 80007c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007ca:	4a0b      	ldr	r2, [pc, #44]	@ (80007f8 <MX_DMA_Init+0x50>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_DMA_Init+0x50>)
 80007d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	200b      	movs	r0, #11
 80007e4:	f001 fda1 	bl	800232a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007e8:	200b      	movs	r0, #11
 80007ea:	f001 fdb8 	bl	800235e <HAL_NVIC_EnableIRQ>

}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	@ 0x28
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b48      	ldr	r3, [pc, #288]	@ (8000934 <MX_GPIO_Init+0x138>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	4a47      	ldr	r2, [pc, #284]	@ (8000934 <MX_GPIO_Init+0x138>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081e:	4b45      	ldr	r3, [pc, #276]	@ (8000934 <MX_GPIO_Init+0x138>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800082a:	4b42      	ldr	r3, [pc, #264]	@ (8000934 <MX_GPIO_Init+0x138>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	4a41      	ldr	r2, [pc, #260]	@ (8000934 <MX_GPIO_Init+0x138>)
 8000830:	f043 0320 	orr.w	r3, r3, #32
 8000834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000836:	4b3f      	ldr	r3, [pc, #252]	@ (8000934 <MX_GPIO_Init+0x138>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	f003 0320 	and.w	r3, r3, #32
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b3c      	ldr	r3, [pc, #240]	@ (8000934 <MX_GPIO_Init+0x138>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	4a3b      	ldr	r2, [pc, #236]	@ (8000934 <MX_GPIO_Init+0x138>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084e:	4b39      	ldr	r3, [pc, #228]	@ (8000934 <MX_GPIO_Init+0x138>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b36      	ldr	r3, [pc, #216]	@ (8000934 <MX_GPIO_Init+0x138>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	4a35      	ldr	r2, [pc, #212]	@ (8000934 <MX_GPIO_Init+0x138>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000866:	4b33      	ldr	r3, [pc, #204]	@ (8000934 <MX_GPIO_Init+0x138>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2120      	movs	r1, #32
 8000876:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800087a:	f002 f8c7 	bl	8002a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR_Driver_1_Pin|Dir_Driver_2_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	21c0      	movs	r1, #192	@ 0xc0
 8000882:	482d      	ldr	r0, [pc, #180]	@ (8000938 <MX_GPIO_Init+0x13c>)
 8000884:	f002 f8c2 	bl	8002a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EMERGENCY_Pin JOY_BUTTON_Pin QEI_1_X_Pin */
  GPIO_InitStruct.Pin = EMERGENCY_Pin|JOY_BUTTON_Pin|QEI_1_X_Pin;
 8000888:	2319      	movs	r3, #25
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4826      	ldr	r0, [pc, #152]	@ (8000938 <MX_GPIO_Init+0x13c>)
 800089e:	f001 ff33 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80008a2:	230c      	movs	r3, #12
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80008b2:	230c      	movs	r3, #12
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c0:	f001 ff22 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008c4:	2320      	movs	r3, #32
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008de:	f001 ff13 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prismatic_right_limit_Pin Prismatic_left_limit_Pin step_one_plotter_Pin step_two_plotter_Pin */
  GPIO_InitStruct.Pin = Prismatic_right_limit_Pin|Prismatic_left_limit_Pin|step_one_plotter_Pin|step_two_plotter_Pin;
 80008e2:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4810      	ldr	r0, [pc, #64]	@ (800093c <MX_GPIO_Init+0x140>)
 80008fa:	f001 ff05 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Driver_1_Pin Dir_Driver_2_Pin */
  GPIO_InitStruct.Pin = DIR_Driver_1_Pin|Dir_Driver_2_Pin;
 80008fe:	23c0      	movs	r3, #192	@ 0xc0
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	4808      	ldr	r0, [pc, #32]	@ (8000938 <MX_GPIO_Init+0x13c>)
 8000916:	f001 fef7 	bl	8002708 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	2028      	movs	r0, #40	@ 0x28
 8000920:	f001 fd03 	bl	800232a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000924:	2028      	movs	r0, #40	@ 0x28
 8000926:	f001 fd1a 	bl	800235e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800092a:	bf00      	nop
 800092c:	3728      	adds	r7, #40	@ 0x28
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000
 8000938:	48000800 	.word	0x48000800
 800093c:	48000400 	.word	0x48000400

08000940 <SetHomePrismatic>:

/* USER CODE BEGIN 4 */

// Set Prismatic to home
void SetHomePrismatic()
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	while (prismatic_left_sw == false)
 8000944:	e003      	b.n	800094e <SetHomePrismatic+0xe>
	{
		PrismaticMotorControl(10, 0);
 8000946:	2100      	movs	r1, #0
 8000948:	200a      	movs	r0, #10
 800094a:	f000 f82b 	bl	80009a4 <PrismaticMotorControl>
	while (prismatic_left_sw == false)
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <SetHomePrismatic+0x50>)
 8000950:	f993 3000 	ldrsb.w	r3, [r3]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d0f6      	beq.n	8000946 <SetHomePrismatic+0x6>
	}
	PrismaticMotorControl(0, 0);
 8000958:	2100      	movs	r1, #0
 800095a:	2000      	movs	r0, #0
 800095c:	f000 f822 	bl	80009a4 <PrismaticMotorControl>

	//reset encoder val
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8000960:	213c      	movs	r1, #60	@ 0x3c
 8000962:	480c      	ldr	r0, [pc, #48]	@ (8000994 <SetHomePrismatic+0x54>)
 8000964:	f003 fc62 	bl	800422c <HAL_TIM_Encoder_Stop>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000968:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <SetHomePrismatic+0x54>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_raw_encoder_val = 0;
 8000970:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <SetHomePrismatic+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
	prismatic_raw_encoder_prev = 0;
 8000976:	4b09      	ldr	r3, [pc, #36]	@ (800099c <SetHomePrismatic+0x5c>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
	prismatic_encoder_val = 0;
 800097c:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <SetHomePrismatic+0x60>)
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000982:	213c      	movs	r1, #60	@ 0x3c
 8000984:	4803      	ldr	r0, [pc, #12]	@ (8000994 <SetHomePrismatic+0x54>)
 8000986:	f003 fbc3 	bl	8004110 <HAL_TIM_Encoder_Start>
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000224 	.word	0x20000224
 8000994:	2000018c 	.word	0x2000018c
 8000998:	20000228 	.word	0x20000228
 800099c:	2000022c 	.word	0x2000022c
 80009a0:	20000230 	.word	0x20000230

080009a4 <PrismaticMotorControl>:

void PrismaticMotorControl(int speed, int dir)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af02      	add	r7, sp, #8
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
	if (dir == 0)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d105      	bne.n	80009c0 <PrismaticMotorControl+0x1c>
	{
		// Set motor2 direction to ___
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2180      	movs	r1, #128	@ 0x80
 80009b8:	480c      	ldr	r0, [pc, #48]	@ (80009ec <PrismaticMotorControl+0x48>)
 80009ba:	f002 f827 	bl	8002a0c <HAL_GPIO_WritePin>
 80009be:	e004      	b.n	80009ca <PrismaticMotorControl+0x26>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2180      	movs	r1, #128	@ 0x80
 80009c4:	4809      	ldr	r0, [pc, #36]	@ (80009ec <PrismaticMotorControl+0x48>)
 80009c6:	f002 f821 	bl	8002a0c <HAL_GPIO_WritePin>
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, map(speed,0,100,0,19999));
 80009ca:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	2300      	movs	r3, #0
 80009d2:	2264      	movs	r2, #100	@ 0x64
 80009d4:	2100      	movs	r1, #0
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f000 f80c 	bl	80009f4 <map>
 80009dc:	4602      	mov	r2, r0
 80009de:	4b04      	ldr	r3, [pc, #16]	@ (80009f0 <PrismaticMotorControl+0x4c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	48000800 	.word	0x48000800
 80009f0:	200000f4 	.word	0x200000f4

080009f4 <map>:
{
	// TODO: code
}

int map(int x, int in_min, int in_max, int out_min, int out_max)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
 8000a00:	603b      	str	r3, [r7, #0]
      return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	69b9      	ldr	r1, [r7, #24]
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	1a8a      	subs	r2, r1, r2
 8000a0e:	fb03 f202 	mul.w	r2, r3, r2
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	1acb      	subs	r3, r1, r3
 8000a18:	fb92 f2f3 	sdiv	r2, r2, r3
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	4413      	add	r3, r2
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <HAL_GPIO_EXTI_Callback>:


// External Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12)
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000a3c:	d103      	bne.n	8000a46 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		prismatic_left_sw = 1;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x34>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
	}
	else if (GPIO_Pin == GPIO_PIN_11)
	{
		prismatic_right_sw = 1;
	}
}
 8000a44:	e006      	b.n	8000a54 <HAL_GPIO_EXTI_Callback+0x28>
	else if (GPIO_Pin == GPIO_PIN_11)
 8000a46:	88fb      	ldrh	r3, [r7, #6]
 8000a48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000a4c:	d102      	bne.n	8000a54 <HAL_GPIO_EXTI_Callback+0x28>
		prismatic_right_sw = 1;
 8000a4e:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x38>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	20000224 	.word	0x20000224
 8000a64:	20000225 	.word	0x20000225

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <Error_Handler+0x8>

08000a74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <HAL_MspInit+0x44>)
 8000a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab8 <HAL_MspInit+0x44>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a86:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <HAL_MspInit+0x44>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <HAL_MspInit+0x44>)
 8000a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a96:	4a08      	ldr	r2, [pc, #32]	@ (8000ab8 <HAL_MspInit+0x44>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_MspInit+0x44>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000aaa:	f002 f883 	bl	8002bb4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000

08000abc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b09e      	sub	sp, #120	@ 0x78
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	2254      	movs	r2, #84	@ 0x54
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 fc41 	bl	8005364 <memset>
  if(hadc->Instance==ADC1)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000aea:	d15e      	bne.n	8000baa <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000aec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000af0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000af2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000af6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	4618      	mov	r0, r3
 8000afe:	f002 fd5f 	bl	80035c0 <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b08:	f7ff ffae 	bl	8000a68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b0c:	4b29      	ldr	r3, [pc, #164]	@ (8000bb4 <HAL_ADC_MspInit+0xf8>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b10:	4a28      	ldr	r2, [pc, #160]	@ (8000bb4 <HAL_ADC_MspInit+0xf8>)
 8000b12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b18:	4b26      	ldr	r3, [pc, #152]	@ (8000bb4 <HAL_ADC_MspInit+0xf8>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b24:	4b23      	ldr	r3, [pc, #140]	@ (8000bb4 <HAL_ADC_MspInit+0xf8>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b28:	4a22      	ldr	r2, [pc, #136]	@ (8000bb4 <HAL_ADC_MspInit+0xf8>)
 8000b2a:	f043 0304 	orr.w	r3, r3, #4
 8000b2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b30:	4b20      	ldr	r3, [pc, #128]	@ (8000bb4 <HAL_ADC_MspInit+0xf8>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b34:	f003 0304 	and.w	r3, r3, #4
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = JOY_X_AXIS_Pin|JOY_Y_AXIS_Pin;
 8000b3c:	2306      	movs	r3, #6
 8000b3e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b40:	2303      	movs	r3, #3
 8000b42:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b48:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	481a      	ldr	r0, [pc, #104]	@ (8000bb8 <HAL_ADC_MspInit+0xfc>)
 8000b50:	f001 fdda 	bl	8002708 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b54:	4b19      	ldr	r3, [pc, #100]	@ (8000bbc <HAL_ADC_MspInit+0x100>)
 8000b56:	4a1a      	ldr	r2, [pc, #104]	@ (8000bc0 <HAL_ADC_MspInit+0x104>)
 8000b58:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b5a:	4b18      	ldr	r3, [pc, #96]	@ (8000bbc <HAL_ADC_MspInit+0x100>)
 8000b5c:	2205      	movs	r2, #5
 8000b5e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b60:	4b16      	ldr	r3, [pc, #88]	@ (8000bbc <HAL_ADC_MspInit+0x100>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <HAL_ADC_MspInit+0x100>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b6c:	4b13      	ldr	r3, [pc, #76]	@ (8000bbc <HAL_ADC_MspInit+0x100>)
 8000b6e:	2280      	movs	r2, #128	@ 0x80
 8000b70:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b72:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <HAL_ADC_MspInit+0x100>)
 8000b74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	@ (8000bbc <HAL_ADC_MspInit+0x100>)
 8000b7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <HAL_ADC_MspInit+0x100>)
 8000b84:	2220      	movs	r2, #32
 8000b86:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <HAL_ADC_MspInit+0x100>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b8e:	480b      	ldr	r0, [pc, #44]	@ (8000bbc <HAL_ADC_MspInit+0x100>)
 8000b90:	f001 fc00 	bl	8002394 <HAL_DMA_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8000b9a:	f7ff ff65 	bl	8000a68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a06      	ldr	r2, [pc, #24]	@ (8000bbc <HAL_ADC_MspInit+0x100>)
 8000ba2:	655a      	str	r2, [r3, #84]	@ 0x54
 8000ba4:	4a05      	ldr	r2, [pc, #20]	@ (8000bbc <HAL_ADC_MspInit+0x100>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000baa:	bf00      	nop
 8000bac:	3778      	adds	r7, #120	@ 0x78
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	48000800 	.word	0x48000800
 8000bbc:	20000094 	.word	0x20000094
 8000bc0:	40020008 	.word	0x40020008

08000bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a13      	ldr	r2, [pc, #76]	@ (8000c20 <HAL_TIM_Base_MspInit+0x5c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d10c      	bne.n	8000bf0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bd6:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <HAL_TIM_Base_MspInit+0x60>)
 8000bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bda:	4a12      	ldr	r2, [pc, #72]	@ (8000c24 <HAL_TIM_Base_MspInit+0x60>)
 8000bdc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000be0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000be2:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <HAL_TIM_Base_MspInit+0x60>)
 8000be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000be6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bee:	e010      	b.n	8000c12 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bf8:	d10b      	bne.n	8000c12 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <HAL_TIM_Base_MspInit+0x60>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfe:	4a09      	ldr	r2, [pc, #36]	@ (8000c24 <HAL_TIM_Base_MspInit+0x60>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c06:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <HAL_TIM_Base_MspInit+0x60>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
}
 8000c12:	bf00      	nop
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40012c00 	.word	0x40012c00
 8000c24:	40021000 	.word	0x40021000

08000c28 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08c      	sub	sp, #48	@ 0x30
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a2e      	ldr	r2, [pc, #184]	@ (8000d00 <HAL_TIM_Encoder_MspInit+0xd8>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d129      	bne.n	8000c9e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8000d04 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c4e:	4a2d      	ldr	r2, [pc, #180]	@ (8000d04 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c56:	4b2b      	ldr	r3, [pc, #172]	@ (8000d04 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	61bb      	str	r3, [r7, #24]
 8000c60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	4b28      	ldr	r3, [pc, #160]	@ (8000d04 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c66:	4a27      	ldr	r2, [pc, #156]	@ (8000d04 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c6e:	4b25      	ldr	r3, [pc, #148]	@ (8000d04 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = QEI_1_A_Pin|QEI_1_B_Pin;
 8000c7a:	23c0      	movs	r3, #192	@ 0xc0
 8000c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c98:	f001 fd36 	bl	8002708 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c9c:	e02c      	b.n	8000cf8 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a19      	ldr	r2, [pc, #100]	@ (8000d08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d127      	bne.n	8000cf8 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ca8:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cac:	4a15      	ldr	r2, [pc, #84]	@ (8000d04 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cb4:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc0:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc4:	4a0f      	ldr	r2, [pc, #60]	@ (8000d04 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000cc6:	f043 0302 	orr.w	r3, r3, #2
 8000cca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = QEI_2_A_Pin|QEI_2_B_Pin;
 8000cd8:	23c0      	movs	r3, #192	@ 0xc0
 8000cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4806      	ldr	r0, [pc, #24]	@ (8000d0c <HAL_TIM_Encoder_MspInit+0xe4>)
 8000cf4:	f001 fd08 	bl	8002708 <HAL_GPIO_Init>
}
 8000cf8:	bf00      	nop
 8000cfa:	3730      	adds	r7, #48	@ 0x30
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40000400 	.word	0x40000400
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40000800 	.word	0x40000800
 8000d0c:	48000400 	.word	0x48000400

08000d10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a12      	ldr	r2, [pc, #72]	@ (8000d78 <HAL_TIM_MspPostInit+0x68>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d11d      	bne.n	8000d6e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <HAL_TIM_MspPostInit+0x6c>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d36:	4a11      	ldr	r2, [pc, #68]	@ (8000d7c <HAL_TIM_MspPostInit+0x6c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <HAL_TIM_MspPostInit+0x6c>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Servo_PWM_Pin|Motor_1_PWM_Pin|Motor_2_PWM_Pin;
 8000d4a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000d4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d5c:	2306      	movs	r3, #6
 8000d5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6a:	f001 fccd 	bl	8002708 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3720      	adds	r7, #32
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40012c00 	.word	0x40012c00
 8000d7c:	40021000 	.word	0x40021000

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <NMI_Handler+0x4>

08000d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <MemManage_Handler+0x4>

08000d98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd6:	f000 f8af 	bl	8000f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000de4:	4802      	ldr	r0, [pc, #8]	@ (8000df0 <DMA1_Channel1_IRQHandler+0x10>)
 8000de6:	f001 fb7d 	bl	80024e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000094 	.word	0x20000094

08000df4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Prismatic_right_limit_Pin);
 8000df8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000dfc:	f001 fe1e 	bl	8002a3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Prismatic_left_limit_Pin);
 8000e00:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000e04:	f001 fe1a 	bl	8002a3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(step_one_plotter_Pin);
 8000e08:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e0c:	f001 fe16 	bl	8002a3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(step_two_plotter_Pin);
 8000e10:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e14:	f001 fe12 	bl	8002a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	@ (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e40:	480d      	ldr	r0, [pc, #52]	@ (8000e78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e44:	f7ff ffea 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e48:	480c      	ldr	r0, [pc, #48]	@ (8000e7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e4a:	490d      	ldr	r1, [pc, #52]	@ (8000e80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e84 <LoopForever+0xe>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e60:	4c0a      	ldr	r4, [pc, #40]	@ (8000e8c <LoopForever+0x16>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f004 fa81 	bl	8005374 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e72:	f7ff f9d1 	bl	8000218 <main>

08000e76 <LoopForever>:

LoopForever:
    b LoopForever
 8000e76:	e7fe      	b.n	8000e76 <LoopForever>
  ldr   r0, =_estack
 8000e78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e84:	080053ec 	.word	0x080053ec
  ldr r2, =_sbss
 8000e88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e8c:	20000238 	.word	0x20000238

08000e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC1_2_IRQHandler>

08000e92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f001 fa39 	bl	8002314 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f000 f80e 	bl	8000ec4 <HAL_InitTick>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d002      	beq.n	8000eb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	e001      	b.n	8000eb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eb4:	f7ff fdde 	bl	8000a74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb8:	79fb      	ldrb	r3, [r7, #7]

}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ed0:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <HAL_InitTick+0x68>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d022      	beq.n	8000f1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ed8:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <HAL_InitTick+0x6c>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <HAL_InitTick+0x68>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fa44 	bl	800237a <HAL_SYSTICK_Config>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d10f      	bne.n	8000f18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b0f      	cmp	r3, #15
 8000efc:	d809      	bhi.n	8000f12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efe:	2200      	movs	r2, #0
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	f04f 30ff 	mov.w	r0, #4294967295
 8000f06:	f001 fa10 	bl	800232a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <HAL_InitTick+0x70>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	e007      	b.n	8000f22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
 8000f16:	e004      	b.n	8000f22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e001      	b.n	8000f22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000004 	.word	0x20000004

08000f38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <HAL_IncTick+0x1c>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <HAL_IncTick+0x20>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a03      	ldr	r2, [pc, #12]	@ (8000f54 <HAL_IncTick+0x1c>)
 8000f48:	6013      	str	r3, [r2, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	20000234 	.word	0x20000234
 8000f58:	20000008 	.word	0x20000008

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	@ (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000234 	.word	0x20000234

08000f74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3360      	adds	r3, #96	@ 0x60
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <LL_ADC_SetOffset+0x44>)
 8000ffe:	4013      	ands	r3, r2
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	430a      	orrs	r2, r1
 800100a:	4313      	orrs	r3, r2
 800100c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001014:	bf00      	nop
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	03fff000 	.word	0x03fff000

08001024 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3360      	adds	r3, #96	@ 0x60
 8001032:	461a      	mov	r2, r3
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001050:	b480      	push	{r7}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3360      	adds	r3, #96	@ 0x60
 8001060:	461a      	mov	r2, r3
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	431a      	orrs	r2, r3
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800107a:	bf00      	nop
 800107c:	371c      	adds	r7, #28
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001086:	b480      	push	{r7}
 8001088:	b087      	sub	sp, #28
 800108a:	af00      	add	r7, sp, #0
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3360      	adds	r3, #96	@ 0x60
 8001096:	461a      	mov	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	431a      	orrs	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80010b0:	bf00      	nop
 80010b2:	371c      	adds	r7, #28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	3360      	adds	r3, #96	@ 0x60
 80010cc:	461a      	mov	r2, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	431a      	orrs	r2, r3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80010e6:	bf00      	nop
 80010e8:	371c      	adds	r7, #28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	431a      	orrs	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	615a      	str	r2, [r3, #20]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001118:	b480      	push	{r7}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3330      	adds	r3, #48	@ 0x30
 8001128:	461a      	mov	r2, r3
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	4413      	add	r3, r2
 8001136:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	f003 031f 	and.w	r3, r3, #31
 8001142:	211f      	movs	r1, #31
 8001144:	fa01 f303 	lsl.w	r3, r1, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	401a      	ands	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	0e9b      	lsrs	r3, r3, #26
 8001150:	f003 011f 	and.w	r1, r3, #31
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	f003 031f 	and.w	r3, r3, #31
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	431a      	orrs	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001164:	bf00      	nop
 8001166:	371c      	adds	r7, #28
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3314      	adds	r3, #20
 8001180:	461a      	mov	r2, r3
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	0e5b      	lsrs	r3, r3, #25
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	4413      	add	r3, r2
 800118e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	0d1b      	lsrs	r3, r3, #20
 8001198:	f003 031f 	and.w	r3, r3, #31
 800119c:	2107      	movs	r1, #7
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	401a      	ands	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	0d1b      	lsrs	r3, r3, #20
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	431a      	orrs	r2, r3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011ba:	bf00      	nop
 80011bc:	371c      	adds	r7, #28
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011e0:	43db      	mvns	r3, r3
 80011e2:	401a      	ands	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0318 	and.w	r3, r3, #24
 80011ea:	4908      	ldr	r1, [pc, #32]	@ (800120c <LL_ADC_SetChannelSingleDiff+0x44>)
 80011ec:	40d9      	lsrs	r1, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	400b      	ands	r3, r1
 80011f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011f6:	431a      	orrs	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011fe:	bf00      	nop
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	0007ffff 	.word	0x0007ffff

08001210 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001220:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	6093      	str	r3, [r2, #8]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001244:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001248:	d101      	bne.n	800124e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800126c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001270:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001294:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001298:	d101      	bne.n	800129e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d101      	bne.n	80012c4 <LL_ADC_IsEnabled+0x18>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <LL_ADC_IsEnabled+0x1a>
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d101      	bne.n	80012ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	2b08      	cmp	r3, #8
 800130a:	d101      	bne.n	8001310 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b089      	sub	sp, #36	@ 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e1a9      	b.n	800168e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001344:	2b00      	cmp	r3, #0
 8001346:	d109      	bne.n	800135c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff fbb7 	bl	8000abc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff67 	bl	8001234 <LL_ADC_IsDeepPowerDownEnabled>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d004      	beq.n	8001376 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff4d 	bl	8001210 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ff82 	bl	8001284 <LL_ADC_IsInternalRegulatorEnabled>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d115      	bne.n	80013b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff66 	bl	800125c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001390:	4b9c      	ldr	r3, [pc, #624]	@ (8001604 <HAL_ADC_Init+0x2e4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	099b      	lsrs	r3, r3, #6
 8001396:	4a9c      	ldr	r2, [pc, #624]	@ (8001608 <HAL_ADC_Init+0x2e8>)
 8001398:	fba2 2303 	umull	r2, r3, r2, r3
 800139c:	099b      	lsrs	r3, r3, #6
 800139e:	3301      	adds	r3, #1
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013a4:	e002      	b.n	80013ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f9      	bne.n	80013a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff64 	bl	8001284 <LL_ADC_IsInternalRegulatorEnabled>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10d      	bne.n	80013de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013c6:	f043 0210 	orr.w	r2, r3, #16
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d2:	f043 0201 	orr.w	r2, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff75 	bl	80012d2 <LL_ADC_REG_IsConversionOngoing>
 80013e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f040 8142 	bne.w	800167c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f040 813e 	bne.w	800167c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001404:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001408:	f043 0202 	orr.w	r2, r3, #2
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff49 	bl	80012ac <LL_ADC_IsEnabled>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d141      	bne.n	80014a4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001428:	d004      	beq.n	8001434 <HAL_ADC_Init+0x114>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a77      	ldr	r2, [pc, #476]	@ (800160c <HAL_ADC_Init+0x2ec>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d10f      	bne.n	8001454 <HAL_ADC_Init+0x134>
 8001434:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001438:	f7ff ff38 	bl	80012ac <LL_ADC_IsEnabled>
 800143c:	4604      	mov	r4, r0
 800143e:	4873      	ldr	r0, [pc, #460]	@ (800160c <HAL_ADC_Init+0x2ec>)
 8001440:	f7ff ff34 	bl	80012ac <LL_ADC_IsEnabled>
 8001444:	4603      	mov	r3, r0
 8001446:	4323      	orrs	r3, r4
 8001448:	2b00      	cmp	r3, #0
 800144a:	bf0c      	ite	eq
 800144c:	2301      	moveq	r3, #1
 800144e:	2300      	movne	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	e012      	b.n	800147a <HAL_ADC_Init+0x15a>
 8001454:	486e      	ldr	r0, [pc, #440]	@ (8001610 <HAL_ADC_Init+0x2f0>)
 8001456:	f7ff ff29 	bl	80012ac <LL_ADC_IsEnabled>
 800145a:	4604      	mov	r4, r0
 800145c:	486d      	ldr	r0, [pc, #436]	@ (8001614 <HAL_ADC_Init+0x2f4>)
 800145e:	f7ff ff25 	bl	80012ac <LL_ADC_IsEnabled>
 8001462:	4603      	mov	r3, r0
 8001464:	431c      	orrs	r4, r3
 8001466:	486c      	ldr	r0, [pc, #432]	@ (8001618 <HAL_ADC_Init+0x2f8>)
 8001468:	f7ff ff20 	bl	80012ac <LL_ADC_IsEnabled>
 800146c:	4603      	mov	r3, r0
 800146e:	4323      	orrs	r3, r4
 8001470:	2b00      	cmp	r3, #0
 8001472:	bf0c      	ite	eq
 8001474:	2301      	moveq	r3, #1
 8001476:	2300      	movne	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d012      	beq.n	80014a4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001486:	d004      	beq.n	8001492 <HAL_ADC_Init+0x172>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a5f      	ldr	r2, [pc, #380]	@ (800160c <HAL_ADC_Init+0x2ec>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_ADC_Init+0x176>
 8001492:	4a62      	ldr	r2, [pc, #392]	@ (800161c <HAL_ADC_Init+0x2fc>)
 8001494:	e000      	b.n	8001498 <HAL_ADC_Init+0x178>
 8001496:	4a62      	ldr	r2, [pc, #392]	@ (8001620 <HAL_ADC_Init+0x300>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4619      	mov	r1, r3
 800149e:	4610      	mov	r0, r2
 80014a0:	f7ff fd68 	bl	8000f74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7f5b      	ldrb	r3, [r3, #29]
 80014a8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014ae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80014b4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80014ba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014c2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d106      	bne.n	80014e0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d6:	3b01      	subs	r3, #1
 80014d8:	045b      	lsls	r3, r3, #17
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d009      	beq.n	80014fc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ec:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68da      	ldr	r2, [r3, #12]
 8001502:	4b48      	ldr	r3, [pc, #288]	@ (8001624 <HAL_ADC_Init+0x304>)
 8001504:	4013      	ands	r3, r2
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	69b9      	ldr	r1, [r7, #24]
 800150c:	430b      	orrs	r3, r1
 800150e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fee4 	bl	80012f8 <LL_ADC_INJ_IsConversionOngoing>
 8001530:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d17f      	bne.n	8001638 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d17c      	bne.n	8001638 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001542:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800154a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800155a:	f023 0302 	bic.w	r3, r3, #2
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	69b9      	ldr	r1, [r7, #24]
 8001564:	430b      	orrs	r3, r1
 8001566:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d017      	beq.n	80015a0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800157e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001588:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800158c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6911      	ldr	r1, [r2, #16]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	430b      	orrs	r3, r1
 800159a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800159e:	e013      	b.n	80015c8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	691a      	ldr	r2, [r3, #16]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80015ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80015c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015c4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d12a      	bne.n	8001628 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80015dc:	f023 0304 	bic.w	r3, r3, #4
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80015e8:	4311      	orrs	r1, r2
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80015ee:	4311      	orrs	r1, r2
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015f4:	430a      	orrs	r2, r1
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0201 	orr.w	r2, r2, #1
 8001600:	611a      	str	r2, [r3, #16]
 8001602:	e019      	b.n	8001638 <HAL_ADC_Init+0x318>
 8001604:	20000000 	.word	0x20000000
 8001608:	053e2d63 	.word	0x053e2d63
 800160c:	50000100 	.word	0x50000100
 8001610:	50000400 	.word	0x50000400
 8001614:	50000500 	.word	0x50000500
 8001618:	50000600 	.word	0x50000600
 800161c:	50000300 	.word	0x50000300
 8001620:	50000700 	.word	0x50000700
 8001624:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0201 	bic.w	r2, r2, #1
 8001636:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d10c      	bne.n	800165a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f023 010f 	bic.w	r1, r3, #15
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	1e5a      	subs	r2, r3, #1
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	631a      	str	r2, [r3, #48]	@ 0x30
 8001658:	e007      	b.n	800166a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 020f 	bic.w	r2, r2, #15
 8001668:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800166e:	f023 0303 	bic.w	r3, r3, #3
 8001672:	f043 0201 	orr.w	r2, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	65da      	str	r2, [r3, #92]	@ 0x5c
 800167a:	e007      	b.n	800168c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001680:	f043 0210 	orr.w	r2, r3, #16
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800168c:	7ffb      	ldrb	r3, [r7, #31]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3724      	adds	r7, #36	@ 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd90      	pop	{r4, r7, pc}
 8001696:	bf00      	nop

08001698 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b0b6      	sub	sp, #216	@ 0xd8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d102      	bne.n	80016bc <HAL_ADC_ConfigChannel+0x24>
 80016b6:	2302      	movs	r3, #2
 80016b8:	f000 bc13 	b.w	8001ee2 <HAL_ADC_ConfigChannel+0x84a>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fe02 	bl	80012d2 <LL_ADC_REG_IsConversionOngoing>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f040 83f3 	bne.w	8001ebc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	6859      	ldr	r1, [r3, #4]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	f7ff fd18 	bl	8001118 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fdf0 	bl	80012d2 <LL_ADC_REG_IsConversionOngoing>
 80016f2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fdfc 	bl	80012f8 <LL_ADC_INJ_IsConversionOngoing>
 8001700:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001704:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001708:	2b00      	cmp	r3, #0
 800170a:	f040 81d9 	bne.w	8001ac0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800170e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001712:	2b00      	cmp	r3, #0
 8001714:	f040 81d4 	bne.w	8001ac0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001720:	d10f      	bne.n	8001742 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6818      	ldr	r0, [r3, #0]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2200      	movs	r2, #0
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff fd1f 	bl	8001170 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fcd9 	bl	80010f2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001740:	e00e      	b.n	8001760 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6818      	ldr	r0, [r3, #0]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	6819      	ldr	r1, [r3, #0]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	461a      	mov	r2, r3
 8001750:	f7ff fd0e 	bl	8001170 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fcc9 	bl	80010f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	695a      	ldr	r2, [r3, #20]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	08db      	lsrs	r3, r3, #3
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	2b04      	cmp	r3, #4
 8001780:	d022      	beq.n	80017c8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	6919      	ldr	r1, [r3, #16]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001792:	f7ff fc23 	bl	8000fdc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	6919      	ldr	r1, [r3, #16]
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	461a      	mov	r2, r3
 80017a4:	f7ff fc6f 	bl	8001086 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6818      	ldr	r0, [r3, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d102      	bne.n	80017be <HAL_ADC_ConfigChannel+0x126>
 80017b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017bc:	e000      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x128>
 80017be:	2300      	movs	r3, #0
 80017c0:	461a      	mov	r2, r3
 80017c2:	f7ff fc7b 	bl	80010bc <LL_ADC_SetOffsetSaturation>
 80017c6:	e17b      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fc28 	bl	8001024 <LL_ADC_GetOffsetChannel>
 80017d4:	4603      	mov	r3, r0
 80017d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10a      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x15c>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fc1d 	bl	8001024 <LL_ADC_GetOffsetChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	0e9b      	lsrs	r3, r3, #26
 80017ee:	f003 021f 	and.w	r2, r3, #31
 80017f2:	e01e      	b.n	8001832 <HAL_ADC_ConfigChannel+0x19a>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fc12 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001806:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800180a:	fa93 f3a3 	rbit	r3, r3
 800180e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001812:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001816:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800181a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001822:	2320      	movs	r3, #32
 8001824:	e004      	b.n	8001830 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001826:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800182a:	fab3 f383 	clz	r3, r3
 800182e:	b2db      	uxtb	r3, r3
 8001830:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800183a:	2b00      	cmp	r3, #0
 800183c:	d105      	bne.n	800184a <HAL_ADC_ConfigChannel+0x1b2>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	0e9b      	lsrs	r3, r3, #26
 8001844:	f003 031f 	and.w	r3, r3, #31
 8001848:	e018      	b.n	800187c <HAL_ADC_ConfigChannel+0x1e4>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001856:	fa93 f3a3 	rbit	r3, r3
 800185a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800185e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001862:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001866:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800186e:	2320      	movs	r3, #32
 8001870:	e004      	b.n	800187c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001872:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001876:	fab3 f383 	clz	r3, r3
 800187a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800187c:	429a      	cmp	r2, r3
 800187e:	d106      	bne.n	800188e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2200      	movs	r2, #0
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fbe1 	bl	8001050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2101      	movs	r1, #1
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fbc5 	bl	8001024 <LL_ADC_GetOffsetChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10a      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x222>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2101      	movs	r1, #1
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fbba 	bl	8001024 <LL_ADC_GetOffsetChannel>
 80018b0:	4603      	mov	r3, r0
 80018b2:	0e9b      	lsrs	r3, r3, #26
 80018b4:	f003 021f 	and.w	r2, r3, #31
 80018b8:	e01e      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x260>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2101      	movs	r1, #1
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fbaf 	bl	8001024 <LL_ADC_GetOffsetChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80018d0:	fa93 f3a3 	rbit	r3, r3
 80018d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80018d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80018e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80018e8:	2320      	movs	r3, #32
 80018ea:	e004      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80018ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001900:	2b00      	cmp	r3, #0
 8001902:	d105      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x278>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	0e9b      	lsrs	r3, r3, #26
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	e018      	b.n	8001942 <HAL_ADC_ConfigChannel+0x2aa>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001924:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001928:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800192c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001934:	2320      	movs	r3, #32
 8001936:	e004      	b.n	8001942 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001938:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001942:	429a      	cmp	r2, r3
 8001944:	d106      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2200      	movs	r2, #0
 800194c:	2101      	movs	r1, #1
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fb7e 	bl	8001050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2102      	movs	r1, #2
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fb62 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10a      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x2e8>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2102      	movs	r1, #2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fb57 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	0e9b      	lsrs	r3, r3, #26
 800197a:	f003 021f 	and.w	r2, r3, #31
 800197e:	e01e      	b.n	80019be <HAL_ADC_ConfigChannel+0x326>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2102      	movs	r1, #2
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fb4c 	bl	8001024 <LL_ADC_GetOffsetChannel>
 800198c:	4603      	mov	r3, r0
 800198e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800199e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80019a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80019ae:	2320      	movs	r3, #32
 80019b0:	e004      	b.n	80019bc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80019b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80019b6:	fab3 f383 	clz	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d105      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x33e>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	0e9b      	lsrs	r3, r3, #26
 80019d0:	f003 031f 	and.w	r3, r3, #31
 80019d4:	e016      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x36c>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80019e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80019ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80019ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80019f6:	2320      	movs	r3, #32
 80019f8:	e004      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80019fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d106      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2102      	movs	r1, #2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fb1d 	bl	8001050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2103      	movs	r1, #3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fb01 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10a      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x3aa>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2103      	movs	r1, #3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff faf6 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	0e9b      	lsrs	r3, r3, #26
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	e017      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x3da>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2103      	movs	r1, #3
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff faeb 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a54:	fa93 f3a3 	rbit	r3, r3
 8001a58:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001a5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a5c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001a5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001a64:	2320      	movs	r3, #32
 8001a66:	e003      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001a68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a6a:	fab3 f383 	clz	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d105      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x3f2>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	0e9b      	lsrs	r3, r3, #26
 8001a84:	f003 031f 	and.w	r3, r3, #31
 8001a88:	e011      	b.n	8001aae <HAL_ADC_ConfigChannel+0x416>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a92:	fa93 f3a3 	rbit	r3, r3
 8001a96:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001a98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001a9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001aa2:	2320      	movs	r3, #32
 8001aa4:	e003      	b.n	8001aae <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001aa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001aa8:	fab3 f383 	clz	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d106      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2103      	movs	r1, #3
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fac8 	bl	8001050 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fbf1 	bl	80012ac <LL_ADC_IsEnabled>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f040 813d 	bne.w	8001d4c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	6819      	ldr	r1, [r3, #0]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f7ff fb72 	bl	80011c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	4aa2      	ldr	r2, [pc, #648]	@ (8001d74 <HAL_ADC_ConfigChannel+0x6dc>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	f040 812e 	bne.w	8001d4c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10b      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x480>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	0e9b      	lsrs	r3, r3, #26
 8001b06:	3301      	adds	r3, #1
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	2b09      	cmp	r3, #9
 8001b0e:	bf94      	ite	ls
 8001b10:	2301      	movls	r3, #1
 8001b12:	2300      	movhi	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	e019      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x4b4>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b20:	fa93 f3a3 	rbit	r3, r3
 8001b24:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001b26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b28:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001b2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001b30:	2320      	movs	r3, #32
 8001b32:	e003      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001b34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b36:	fab3 f383 	clz	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	2b09      	cmp	r3, #9
 8001b44:	bf94      	ite	ls
 8001b46:	2301      	movls	r3, #1
 8001b48:	2300      	movhi	r3, #0
 8001b4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d079      	beq.n	8001c44 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d107      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x4d4>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	0e9b      	lsrs	r3, r3, #26
 8001b62:	3301      	adds	r3, #1
 8001b64:	069b      	lsls	r3, r3, #26
 8001b66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b6a:	e015      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x500>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b74:	fa93 f3a3 	rbit	r3, r3
 8001b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b7c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001b84:	2320      	movs	r3, #32
 8001b86:	e003      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	069b      	lsls	r3, r3, #26
 8001b94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d109      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x520>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	0e9b      	lsrs	r3, r3, #26
 8001baa:	3301      	adds	r3, #1
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	e017      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x550>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bc0:	fa93 f3a3 	rbit	r3, r3
 8001bc4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001bca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001bd0:	2320      	movs	r3, #32
 8001bd2:	e003      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001bd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	3301      	adds	r3, #1
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	2101      	movs	r1, #1
 8001be4:	fa01 f303 	lsl.w	r3, r1, r3
 8001be8:	ea42 0103 	orr.w	r1, r2, r3
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10a      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x576>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	0e9b      	lsrs	r3, r3, #26
 8001bfe:	3301      	adds	r3, #1
 8001c00:	f003 021f 	and.w	r2, r3, #31
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	051b      	lsls	r3, r3, #20
 8001c0c:	e018      	b.n	8001c40 <HAL_ADC_ConfigChannel+0x5a8>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001c26:	2320      	movs	r3, #32
 8001c28:	e003      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c2c:	fab3 f383 	clz	r3, r3
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	f003 021f 	and.w	r2, r3, #31
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c40:	430b      	orrs	r3, r1
 8001c42:	e07e      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d107      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x5c8>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	0e9b      	lsrs	r3, r3, #26
 8001c56:	3301      	adds	r3, #1
 8001c58:	069b      	lsls	r3, r3, #26
 8001c5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c5e:	e015      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x5f4>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c70:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001c78:	2320      	movs	r3, #32
 8001c7a:	e003      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	3301      	adds	r3, #1
 8001c86:	069b      	lsls	r3, r3, #26
 8001c88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x614>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	0e9b      	lsrs	r3, r3, #26
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	e017      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x644>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	61fb      	str	r3, [r7, #28]
  return result;
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001cc4:	2320      	movs	r3, #32
 8001cc6:	e003      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f003 031f 	and.w	r3, r3, #31
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cdc:	ea42 0103 	orr.w	r1, r2, r3
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10d      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x670>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	0e9b      	lsrs	r3, r3, #26
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3b1e      	subs	r3, #30
 8001d00:	051b      	lsls	r3, r3, #20
 8001d02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d06:	e01b      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x6a8>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	fa93 f3a3 	rbit	r3, r3
 8001d14:	613b      	str	r3, [r7, #16]
  return result;
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001d20:	2320      	movs	r3, #32
 8001d22:	e003      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	f003 021f 	and.w	r2, r3, #31
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	3b1e      	subs	r3, #30
 8001d3a:	051b      	lsls	r3, r3, #20
 8001d3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d40:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d46:	4619      	mov	r1, r3
 8001d48:	f7ff fa12 	bl	8001170 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <HAL_ADC_ConfigChannel+0x6e0>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80be 	beq.w	8001ed6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d62:	d004      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0x6d6>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a04      	ldr	r2, [pc, #16]	@ (8001d7c <HAL_ADC_ConfigChannel+0x6e4>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d10a      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x6ec>
 8001d6e:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <HAL_ADC_ConfigChannel+0x6e8>)
 8001d70:	e009      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x6ee>
 8001d72:	bf00      	nop
 8001d74:	407f0000 	.word	0x407f0000
 8001d78:	80080000 	.word	0x80080000
 8001d7c:	50000100 	.word	0x50000100
 8001d80:	50000300 	.word	0x50000300
 8001d84:	4b59      	ldr	r3, [pc, #356]	@ (8001eec <HAL_ADC_ConfigChannel+0x854>)
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f91a 	bl	8000fc0 <LL_ADC_GetCommonPathInternalCh>
 8001d8c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a56      	ldr	r2, [pc, #344]	@ (8001ef0 <HAL_ADC_ConfigChannel+0x858>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d004      	beq.n	8001da4 <HAL_ADC_ConfigChannel+0x70c>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a55      	ldr	r2, [pc, #340]	@ (8001ef4 <HAL_ADC_ConfigChannel+0x85c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d13a      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001da4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001da8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d134      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001db8:	d005      	beq.n	8001dc6 <HAL_ADC_ConfigChannel+0x72e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a4e      	ldr	r2, [pc, #312]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x860>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	f040 8085 	bne.w	8001ed0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dce:	d004      	beq.n	8001dda <HAL_ADC_ConfigChannel+0x742>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a49      	ldr	r2, [pc, #292]	@ (8001efc <HAL_ADC_ConfigChannel+0x864>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x746>
 8001dda:	4a49      	ldr	r2, [pc, #292]	@ (8001f00 <HAL_ADC_ConfigChannel+0x868>)
 8001ddc:	e000      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x748>
 8001dde:	4a43      	ldr	r2, [pc, #268]	@ (8001eec <HAL_ADC_ConfigChannel+0x854>)
 8001de0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001de4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001de8:	4619      	mov	r1, r3
 8001dea:	4610      	mov	r0, r2
 8001dec:	f7ff f8d5 	bl	8000f9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001df0:	4b44      	ldr	r3, [pc, #272]	@ (8001f04 <HAL_ADC_ConfigChannel+0x86c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	099b      	lsrs	r3, r3, #6
 8001df6:	4a44      	ldr	r2, [pc, #272]	@ (8001f08 <HAL_ADC_ConfigChannel+0x870>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	099b      	lsrs	r3, r3, #6
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	4613      	mov	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e0a:	e002      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f9      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e18:	e05a      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a3b      	ldr	r2, [pc, #236]	@ (8001f0c <HAL_ADC_ConfigChannel+0x874>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d125      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d11f      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a31      	ldr	r2, [pc, #196]	@ (8001efc <HAL_ADC_ConfigChannel+0x864>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d104      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x7ac>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a34      	ldr	r2, [pc, #208]	@ (8001f10 <HAL_ADC_ConfigChannel+0x878>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d047      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e4c:	d004      	beq.n	8001e58 <HAL_ADC_ConfigChannel+0x7c0>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a2a      	ldr	r2, [pc, #168]	@ (8001efc <HAL_ADC_ConfigChannel+0x864>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d101      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x7c4>
 8001e58:	4a29      	ldr	r2, [pc, #164]	@ (8001f00 <HAL_ADC_ConfigChannel+0x868>)
 8001e5a:	e000      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x7c6>
 8001e5c:	4a23      	ldr	r2, [pc, #140]	@ (8001eec <HAL_ADC_ConfigChannel+0x854>)
 8001e5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e66:	4619      	mov	r1, r3
 8001e68:	4610      	mov	r0, r2
 8001e6a:	f7ff f896 	bl	8000f9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e6e:	e031      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a27      	ldr	r2, [pc, #156]	@ (8001f14 <HAL_ADC_ConfigChannel+0x87c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d12d      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d127      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001efc <HAL_ADC_ConfigChannel+0x864>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d022      	beq.n	8001ed6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e98:	d004      	beq.n	8001ea4 <HAL_ADC_ConfigChannel+0x80c>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a17      	ldr	r2, [pc, #92]	@ (8001efc <HAL_ADC_ConfigChannel+0x864>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d101      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x810>
 8001ea4:	4a16      	ldr	r2, [pc, #88]	@ (8001f00 <HAL_ADC_ConfigChannel+0x868>)
 8001ea6:	e000      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x812>
 8001ea8:	4a10      	ldr	r2, [pc, #64]	@ (8001eec <HAL_ADC_ConfigChannel+0x854>)
 8001eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001eae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	f7ff f870 	bl	8000f9a <LL_ADC_SetCommonPathInternalCh>
 8001eba:	e00c      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec0:	f043 0220 	orr.w	r2, r3, #32
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001ece:	e002      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ed0:	bf00      	nop
 8001ed2:	e000      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ed4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001ede:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	37d8      	adds	r7, #216	@ 0xd8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	50000700 	.word	0x50000700
 8001ef0:	c3210000 	.word	0xc3210000
 8001ef4:	90c00010 	.word	0x90c00010
 8001ef8:	50000600 	.word	0x50000600
 8001efc:	50000100 	.word	0x50000100
 8001f00:	50000300 	.word	0x50000300
 8001f04:	20000000 	.word	0x20000000
 8001f08:	053e2d63 	.word	0x053e2d63
 8001f0c:	c7520000 	.word	0xc7520000
 8001f10:	50000500 	.word	0x50000500
 8001f14:	cb840000 	.word	0xcb840000

08001f18 <LL_ADC_IsEnabled>:
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d101      	bne.n	8001f30 <LL_ADC_IsEnabled+0x18>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <LL_ADC_IsEnabled+0x1a>
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <LL_ADC_REG_IsConversionOngoing>:
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d101      	bne.n	8001f56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b0a1      	sub	sp, #132	@ 0x84
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e0e7      	b.n	8002152 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001f8e:	2300      	movs	r3, #0
 8001f90:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f9a:	d102      	bne.n	8001fa2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f9c:	4b6f      	ldr	r3, [pc, #444]	@ (800215c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	e009      	b.n	8001fb6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a6e      	ldr	r2, [pc, #440]	@ (8002160 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d102      	bne.n	8001fb2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8001fac:	4b6d      	ldr	r3, [pc, #436]	@ (8002164 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	e001      	b.n	8001fb6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10b      	bne.n	8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc0:	f043 0220 	orr.w	r2, r3, #32
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0be      	b.n	8002152 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ffb1 	bl	8001f3e <LL_ADC_REG_IsConversionOngoing>
 8001fdc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ffab 	bl	8001f3e <LL_ADC_REG_IsConversionOngoing>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f040 80a0 	bne.w	8002130 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001ff0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f040 809c 	bne.w	8002130 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002000:	d004      	beq.n	800200c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a55      	ldr	r2, [pc, #340]	@ (800215c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d101      	bne.n	8002010 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800200c:	4b56      	ldr	r3, [pc, #344]	@ (8002168 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800200e:	e000      	b.n	8002012 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002010:	4b56      	ldr	r3, [pc, #344]	@ (800216c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002012:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d04b      	beq.n	80020b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800201c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800202e:	035b      	lsls	r3, r3, #13
 8002030:	430b      	orrs	r3, r1
 8002032:	431a      	orrs	r2, r3
 8002034:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002036:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002040:	d004      	beq.n	800204c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a45      	ldr	r2, [pc, #276]	@ (800215c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d10f      	bne.n	800206c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800204c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002050:	f7ff ff62 	bl	8001f18 <LL_ADC_IsEnabled>
 8002054:	4604      	mov	r4, r0
 8002056:	4841      	ldr	r0, [pc, #260]	@ (800215c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002058:	f7ff ff5e 	bl	8001f18 <LL_ADC_IsEnabled>
 800205c:	4603      	mov	r3, r0
 800205e:	4323      	orrs	r3, r4
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf0c      	ite	eq
 8002064:	2301      	moveq	r3, #1
 8002066:	2300      	movne	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	e012      	b.n	8002092 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800206c:	483c      	ldr	r0, [pc, #240]	@ (8002160 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800206e:	f7ff ff53 	bl	8001f18 <LL_ADC_IsEnabled>
 8002072:	4604      	mov	r4, r0
 8002074:	483b      	ldr	r0, [pc, #236]	@ (8002164 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002076:	f7ff ff4f 	bl	8001f18 <LL_ADC_IsEnabled>
 800207a:	4603      	mov	r3, r0
 800207c:	431c      	orrs	r4, r3
 800207e:	483c      	ldr	r0, [pc, #240]	@ (8002170 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002080:	f7ff ff4a 	bl	8001f18 <LL_ADC_IsEnabled>
 8002084:	4603      	mov	r3, r0
 8002086:	4323      	orrs	r3, r4
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d056      	beq.n	8002144 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002096:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800209e:	f023 030f 	bic.w	r3, r3, #15
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	6811      	ldr	r1, [r2, #0]
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	6892      	ldr	r2, [r2, #8]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	431a      	orrs	r2, r3
 80020ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020b0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020b2:	e047      	b.n	8002144 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80020b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020c8:	d004      	beq.n	80020d4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a23      	ldr	r2, [pc, #140]	@ (800215c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d10f      	bne.n	80020f4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80020d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020d8:	f7ff ff1e 	bl	8001f18 <LL_ADC_IsEnabled>
 80020dc:	4604      	mov	r4, r0
 80020de:	481f      	ldr	r0, [pc, #124]	@ (800215c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80020e0:	f7ff ff1a 	bl	8001f18 <LL_ADC_IsEnabled>
 80020e4:	4603      	mov	r3, r0
 80020e6:	4323      	orrs	r3, r4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	e012      	b.n	800211a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80020f4:	481a      	ldr	r0, [pc, #104]	@ (8002160 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80020f6:	f7ff ff0f 	bl	8001f18 <LL_ADC_IsEnabled>
 80020fa:	4604      	mov	r4, r0
 80020fc:	4819      	ldr	r0, [pc, #100]	@ (8002164 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80020fe:	f7ff ff0b 	bl	8001f18 <LL_ADC_IsEnabled>
 8002102:	4603      	mov	r3, r0
 8002104:	431c      	orrs	r4, r3
 8002106:	481a      	ldr	r0, [pc, #104]	@ (8002170 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002108:	f7ff ff06 	bl	8001f18 <LL_ADC_IsEnabled>
 800210c:	4603      	mov	r3, r0
 800210e:	4323      	orrs	r3, r4
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf0c      	ite	eq
 8002114:	2301      	moveq	r3, #1
 8002116:	2300      	movne	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d012      	beq.n	8002144 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800211e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002126:	f023 030f 	bic.w	r3, r3, #15
 800212a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800212c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800212e:	e009      	b.n	8002144 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002134:	f043 0220 	orr.w	r2, r3, #32
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002142:	e000      	b.n	8002146 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002144:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800214e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002152:	4618      	mov	r0, r3
 8002154:	3784      	adds	r7, #132	@ 0x84
 8002156:	46bd      	mov	sp, r7
 8002158:	bd90      	pop	{r4, r7, pc}
 800215a:	bf00      	nop
 800215c:	50000100 	.word	0x50000100
 8002160:	50000400 	.word	0x50000400
 8002164:	50000500 	.word	0x50000500
 8002168:	50000300 	.word	0x50000300
 800216c:	50000700 	.word	0x50000700
 8002170:	50000600 	.word	0x50000600

08002174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002184:	4b0c      	ldr	r3, [pc, #48]	@ (80021b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002190:	4013      	ands	r3, r2
 8002192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800219c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a6:	4a04      	ldr	r2, [pc, #16]	@ (80021b8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	60d3      	str	r3, [r2, #12]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c0:	4b04      	ldr	r3, [pc, #16]	@ (80021d4 <__NVIC_GetPriorityGrouping+0x18>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	f003 0307 	and.w	r3, r3, #7
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	db0b      	blt.n	8002202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	f003 021f 	and.w	r2, r3, #31
 80021f0:	4907      	ldr	r1, [pc, #28]	@ (8002210 <__NVIC_EnableIRQ+0x38>)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	2001      	movs	r0, #1
 80021fa:	fa00 f202 	lsl.w	r2, r0, r2
 80021fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000e100 	.word	0xe000e100

08002214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	6039      	str	r1, [r7, #0]
 800221e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002224:	2b00      	cmp	r3, #0
 8002226:	db0a      	blt.n	800223e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	b2da      	uxtb	r2, r3
 800222c:	490c      	ldr	r1, [pc, #48]	@ (8002260 <__NVIC_SetPriority+0x4c>)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	0112      	lsls	r2, r2, #4
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	440b      	add	r3, r1
 8002238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800223c:	e00a      	b.n	8002254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	b2da      	uxtb	r2, r3
 8002242:	4908      	ldr	r1, [pc, #32]	@ (8002264 <__NVIC_SetPriority+0x50>)
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	3b04      	subs	r3, #4
 800224c:	0112      	lsls	r2, r2, #4
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	440b      	add	r3, r1
 8002252:	761a      	strb	r2, [r3, #24]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000e100 	.word	0xe000e100
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	@ 0x24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f1c3 0307 	rsb	r3, r3, #7
 8002282:	2b04      	cmp	r3, #4
 8002284:	bf28      	it	cs
 8002286:	2304      	movcs	r3, #4
 8002288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3304      	adds	r3, #4
 800228e:	2b06      	cmp	r3, #6
 8002290:	d902      	bls.n	8002298 <NVIC_EncodePriority+0x30>
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3b03      	subs	r3, #3
 8002296:	e000      	b.n	800229a <NVIC_EncodePriority+0x32>
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	f04f 32ff 	mov.w	r2, #4294967295
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43da      	mvns	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	401a      	ands	r2, r3
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b0:	f04f 31ff 	mov.w	r1, #4294967295
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	43d9      	mvns	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c0:	4313      	orrs	r3, r2
         );
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3724      	adds	r7, #36	@ 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3b01      	subs	r3, #1
 80022dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022e0:	d301      	bcc.n	80022e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00f      	b.n	8002306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002310 <SysTick_Config+0x40>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ee:	210f      	movs	r1, #15
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	f7ff ff8e 	bl	8002214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f8:	4b05      	ldr	r3, [pc, #20]	@ (8002310 <SysTick_Config+0x40>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fe:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <SysTick_Config+0x40>)
 8002300:	2207      	movs	r2, #7
 8002302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	e000e010 	.word	0xe000e010

08002314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff29 	bl	8002174 <__NVIC_SetPriorityGrouping>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002338:	f7ff ff40 	bl	80021bc <__NVIC_GetPriorityGrouping>
 800233c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	6978      	ldr	r0, [r7, #20]
 8002344:	f7ff ff90 	bl	8002268 <NVIC_EncodePriority>
 8002348:	4602      	mov	r2, r0
 800234a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff5f 	bl	8002214 <__NVIC_SetPriority>
}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff33 	bl	80021d8 <__NVIC_EnableIRQ>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff ffa4 	bl	80022d0 <SysTick_Config>
 8002388:	4603      	mov	r3, r0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e08d      	b.n	80024c2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b47      	ldr	r3, [pc, #284]	@ (80024cc <HAL_DMA_Init+0x138>)
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d80f      	bhi.n	80023d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	4b45      	ldr	r3, [pc, #276]	@ (80024d0 <HAL_DMA_Init+0x13c>)
 80023ba:	4413      	add	r3, r2
 80023bc:	4a45      	ldr	r2, [pc, #276]	@ (80024d4 <HAL_DMA_Init+0x140>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	009a      	lsls	r2, r3, #2
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a42      	ldr	r2, [pc, #264]	@ (80024d8 <HAL_DMA_Init+0x144>)
 80023ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80023d0:	e00e      	b.n	80023f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	4b40      	ldr	r3, [pc, #256]	@ (80024dc <HAL_DMA_Init+0x148>)
 80023da:	4413      	add	r3, r2
 80023dc:	4a3d      	ldr	r2, [pc, #244]	@ (80024d4 <HAL_DMA_Init+0x140>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	091b      	lsrs	r3, r3, #4
 80023e4:	009a      	lsls	r2, r3, #2
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a3c      	ldr	r2, [pc, #240]	@ (80024e0 <HAL_DMA_Init+0x14c>)
 80023ee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800240a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002414:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002420:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800242c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f8fe 	bl	8002644 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002450:	d102      	bne.n	8002458 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800246c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d010      	beq.n	8002498 <HAL_DMA_Init+0x104>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b04      	cmp	r3, #4
 800247c:	d80c      	bhi.n	8002498 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f91e 	bl	80026c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	e008      	b.n	80024aa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40020407 	.word	0x40020407
 80024d0:	bffdfff8 	.word	0xbffdfff8
 80024d4:	cccccccd 	.word	0xcccccccd
 80024d8:	40020000 	.word	0x40020000
 80024dc:	bffdfbf8 	.word	0xbffdfbf8
 80024e0:	40020400 	.word	0x40020400

080024e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	2204      	movs	r2, #4
 8002506:	409a      	lsls	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d026      	beq.n	800255e <HAL_DMA_IRQHandler+0x7a>
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b00      	cmp	r3, #0
 8002518:	d021      	beq.n	800255e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b00      	cmp	r3, #0
 8002526:	d107      	bne.n	8002538 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0204 	bic.w	r2, r2, #4
 8002536:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253c:	f003 021f 	and.w	r2, r3, #31
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	2104      	movs	r1, #4
 8002546:	fa01 f202 	lsl.w	r2, r1, r2
 800254a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002550:	2b00      	cmp	r3, #0
 8002552:	d071      	beq.n	8002638 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800255c:	e06c      	b.n	8002638 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	2202      	movs	r2, #2
 8002568:	409a      	lsls	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d02e      	beq.n	80025d0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d029      	beq.n	80025d0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10b      	bne.n	80025a2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 020a 	bic.w	r2, r2, #10
 8002598:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a6:	f003 021f 	and.w	r2, r3, #31
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	2102      	movs	r1, #2
 80025b0:	fa01 f202 	lsl.w	r2, r1, r2
 80025b4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d038      	beq.n	8002638 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80025ce:	e033      	b.n	8002638 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	2208      	movs	r2, #8
 80025da:	409a      	lsls	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d02a      	beq.n	800263a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d025      	beq.n	800263a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 020e 	bic.w	r2, r2, #14
 80025fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002602:	f003 021f 	and.w	r2, r3, #31
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	2101      	movs	r1, #1
 800260c:	fa01 f202 	lsl.w	r2, r1, r2
 8002610:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800262c:	2b00      	cmp	r3, #0
 800262e:	d004      	beq.n	800263a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002638:	bf00      	nop
 800263a:	bf00      	nop
}
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	4b16      	ldr	r3, [pc, #88]	@ (80026ac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002654:	429a      	cmp	r2, r3
 8002656:	d802      	bhi.n	800265e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002658:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	e001      	b.n	8002662 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800265e:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002660:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	3b08      	subs	r3, #8
 800266e:	4a12      	ldr	r2, [pc, #72]	@ (80026b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	009a      	lsls	r2, r3, #2
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	461a      	mov	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a0b      	ldr	r2, [pc, #44]	@ (80026bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800268e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	2201      	movs	r2, #1
 8002698:	409a      	lsls	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800269e:	bf00      	nop
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40020407 	.word	0x40020407
 80026b0:	40020800 	.word	0x40020800
 80026b4:	40020820 	.word	0x40020820
 80026b8:	cccccccd 	.word	0xcccccccd
 80026bc:	40020880 	.word	0x40020880

080026c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	461a      	mov	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a08      	ldr	r2, [pc, #32]	@ (8002704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80026e2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	2201      	movs	r2, #1
 80026ee:	409a      	lsls	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	1000823f 	.word	0x1000823f
 8002704:	40020940 	.word	0x40020940

08002708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002716:	e15a      	b.n	80029ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	2101      	movs	r1, #1
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	4013      	ands	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 814c 	beq.w	80029c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	2b01      	cmp	r3, #1
 800273a:	d005      	beq.n	8002748 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002744:	2b02      	cmp	r3, #2
 8002746:	d130      	bne.n	80027aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	2203      	movs	r2, #3
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4013      	ands	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800277e:	2201      	movs	r2, #1
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	4013      	ands	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	f003 0201 	and.w	r2, r3, #1
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d017      	beq.n	80027e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	2203      	movs	r2, #3
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d123      	bne.n	800283a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	08da      	lsrs	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3208      	adds	r2, #8
 80027fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	220f      	movs	r2, #15
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	08da      	lsrs	r2, r3, #3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3208      	adds	r2, #8
 8002834:	6939      	ldr	r1, [r7, #16]
 8002836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	2203      	movs	r2, #3
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4013      	ands	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 0203 	and.w	r2, r3, #3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 80a6 	beq.w	80029c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287c:	4b5b      	ldr	r3, [pc, #364]	@ (80029ec <HAL_GPIO_Init+0x2e4>)
 800287e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002880:	4a5a      	ldr	r2, [pc, #360]	@ (80029ec <HAL_GPIO_Init+0x2e4>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6613      	str	r3, [r2, #96]	@ 0x60
 8002888:	4b58      	ldr	r3, [pc, #352]	@ (80029ec <HAL_GPIO_Init+0x2e4>)
 800288a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002894:	4a56      	ldr	r2, [pc, #344]	@ (80029f0 <HAL_GPIO_Init+0x2e8>)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	089b      	lsrs	r3, r3, #2
 800289a:	3302      	adds	r3, #2
 800289c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	220f      	movs	r2, #15
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4013      	ands	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80028be:	d01f      	beq.n	8002900 <HAL_GPIO_Init+0x1f8>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a4c      	ldr	r2, [pc, #304]	@ (80029f4 <HAL_GPIO_Init+0x2ec>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d019      	beq.n	80028fc <HAL_GPIO_Init+0x1f4>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a4b      	ldr	r2, [pc, #300]	@ (80029f8 <HAL_GPIO_Init+0x2f0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d013      	beq.n	80028f8 <HAL_GPIO_Init+0x1f0>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a4a      	ldr	r2, [pc, #296]	@ (80029fc <HAL_GPIO_Init+0x2f4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00d      	beq.n	80028f4 <HAL_GPIO_Init+0x1ec>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a49      	ldr	r2, [pc, #292]	@ (8002a00 <HAL_GPIO_Init+0x2f8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d007      	beq.n	80028f0 <HAL_GPIO_Init+0x1e8>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a48      	ldr	r2, [pc, #288]	@ (8002a04 <HAL_GPIO_Init+0x2fc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_GPIO_Init+0x1e4>
 80028e8:	2305      	movs	r3, #5
 80028ea:	e00a      	b.n	8002902 <HAL_GPIO_Init+0x1fa>
 80028ec:	2306      	movs	r3, #6
 80028ee:	e008      	b.n	8002902 <HAL_GPIO_Init+0x1fa>
 80028f0:	2304      	movs	r3, #4
 80028f2:	e006      	b.n	8002902 <HAL_GPIO_Init+0x1fa>
 80028f4:	2303      	movs	r3, #3
 80028f6:	e004      	b.n	8002902 <HAL_GPIO_Init+0x1fa>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e002      	b.n	8002902 <HAL_GPIO_Init+0x1fa>
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <HAL_GPIO_Init+0x1fa>
 8002900:	2300      	movs	r3, #0
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	f002 0203 	and.w	r2, r2, #3
 8002908:	0092      	lsls	r2, r2, #2
 800290a:	4093      	lsls	r3, r2
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002912:	4937      	ldr	r1, [pc, #220]	@ (80029f0 <HAL_GPIO_Init+0x2e8>)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	089b      	lsrs	r3, r3, #2
 8002918:	3302      	adds	r3, #2
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002920:	4b39      	ldr	r3, [pc, #228]	@ (8002a08 <HAL_GPIO_Init+0x300>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	43db      	mvns	r3, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002944:	4a30      	ldr	r2, [pc, #192]	@ (8002a08 <HAL_GPIO_Init+0x300>)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800294a:	4b2f      	ldr	r3, [pc, #188]	@ (8002a08 <HAL_GPIO_Init+0x300>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	43db      	mvns	r3, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800296e:	4a26      	ldr	r2, [pc, #152]	@ (8002a08 <HAL_GPIO_Init+0x300>)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002974:	4b24      	ldr	r3, [pc, #144]	@ (8002a08 <HAL_GPIO_Init+0x300>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	43db      	mvns	r3, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002998:	4a1b      	ldr	r2, [pc, #108]	@ (8002a08 <HAL_GPIO_Init+0x300>)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800299e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a08 <HAL_GPIO_Init+0x300>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4013      	ands	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029c2:	4a11      	ldr	r2, [pc, #68]	@ (8002a08 <HAL_GPIO_Init+0x300>)
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	3301      	adds	r3, #1
 80029cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f47f ae9d 	bne.w	8002718 <HAL_GPIO_Init+0x10>
  }
}
 80029de:	bf00      	nop
 80029e0:	bf00      	nop
 80029e2:	371c      	adds	r7, #28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40010000 	.word	0x40010000
 80029f4:	48000400 	.word	0x48000400
 80029f8:	48000800 	.word	0x48000800
 80029fc:	48000c00 	.word	0x48000c00
 8002a00:	48001000 	.word	0x48001000
 8002a04:	48001400 	.word	0x48001400
 8002a08:	40010400 	.word	0x40010400

08002a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a1c:	787b      	ldrb	r3, [r7, #1]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a22:	887a      	ldrh	r2, [r7, #2]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a28:	e002      	b.n	8002a30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a2a:	887a      	ldrh	r2, [r7, #2]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a46:	4b08      	ldr	r3, [pc, #32]	@ (8002a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d006      	beq.n	8002a60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a52:	4a05      	ldr	r2, [pc, #20]	@ (8002a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fd ffe6 	bl	8000a2c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40010400 	.word	0x40010400

08002a6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d141      	bne.n	8002afe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a7a:	4b4b      	ldr	r3, [pc, #300]	@ (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a86:	d131      	bne.n	8002aec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a88:	4b47      	ldr	r3, [pc, #284]	@ (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a8e:	4a46      	ldr	r2, [pc, #280]	@ (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a98:	4b43      	ldr	r3, [pc, #268]	@ (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002aa0:	4a41      	ldr	r2, [pc, #260]	@ (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002aa6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002aa8:	4b40      	ldr	r3, [pc, #256]	@ (8002bac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2232      	movs	r2, #50	@ 0x32
 8002aae:	fb02 f303 	mul.w	r3, r2, r3
 8002ab2:	4a3f      	ldr	r2, [pc, #252]	@ (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab8:	0c9b      	lsrs	r3, r3, #18
 8002aba:	3301      	adds	r3, #1
 8002abc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002abe:	e002      	b.n	8002ac6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ac6:	4b38      	ldr	r3, [pc, #224]	@ (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ad2:	d102      	bne.n	8002ada <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f2      	bne.n	8002ac0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ada:	4b33      	ldr	r3, [pc, #204]	@ (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ae6:	d158      	bne.n	8002b9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e057      	b.n	8002b9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aec:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002af2:	4a2d      	ldr	r2, [pc, #180]	@ (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002af8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002afc:	e04d      	b.n	8002b9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b04:	d141      	bne.n	8002b8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b06:	4b28      	ldr	r3, [pc, #160]	@ (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b12:	d131      	bne.n	8002b78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b14:	4b24      	ldr	r3, [pc, #144]	@ (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b1a:	4a23      	ldr	r2, [pc, #140]	@ (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b24:	4b20      	ldr	r3, [pc, #128]	@ (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b2c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b34:	4b1d      	ldr	r3, [pc, #116]	@ (8002bac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2232      	movs	r2, #50	@ 0x32
 8002b3a:	fb02 f303 	mul.w	r3, r2, r3
 8002b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	0c9b      	lsrs	r3, r3, #18
 8002b46:	3301      	adds	r3, #1
 8002b48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b4a:	e002      	b.n	8002b52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b52:	4b15      	ldr	r3, [pc, #84]	@ (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b5e:	d102      	bne.n	8002b66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f2      	bne.n	8002b4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b66:	4b10      	ldr	r3, [pc, #64]	@ (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b72:	d112      	bne.n	8002b9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e011      	b.n	8002b9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b88:	e007      	b.n	8002b9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b8a:	4b07      	ldr	r3, [pc, #28]	@ (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b92:	4a05      	ldr	r2, [pc, #20]	@ (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b98:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	431bde83 	.word	0x431bde83

08002bb4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002bb8:	4b05      	ldr	r3, [pc, #20]	@ (8002bd0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a04      	ldr	r2, [pc, #16]	@ (8002bd0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002bbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bc2:	6093      	str	r3, [r2, #8]
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40007000 	.word	0x40007000

08002bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e2fe      	b.n	80031e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d075      	beq.n	8002cde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bf2:	4b97      	ldr	r3, [pc, #604]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bfc:	4b94      	ldr	r3, [pc, #592]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	2b0c      	cmp	r3, #12
 8002c0a:	d102      	bne.n	8002c12 <HAL_RCC_OscConfig+0x3e>
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d002      	beq.n	8002c18 <HAL_RCC_OscConfig+0x44>
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d10b      	bne.n	8002c30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	4b8d      	ldr	r3, [pc, #564]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d05b      	beq.n	8002cdc <HAL_RCC_OscConfig+0x108>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d157      	bne.n	8002cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e2d9      	b.n	80031e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c38:	d106      	bne.n	8002c48 <HAL_RCC_OscConfig+0x74>
 8002c3a:	4b85      	ldr	r3, [pc, #532]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a84      	ldr	r2, [pc, #528]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e01d      	b.n	8002c84 <HAL_RCC_OscConfig+0xb0>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x98>
 8002c52:	4b7f      	ldr	r3, [pc, #508]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a7e      	ldr	r2, [pc, #504]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002c58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b7c      	ldr	r3, [pc, #496]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a7b      	ldr	r2, [pc, #492]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0xb0>
 8002c6c:	4b78      	ldr	r3, [pc, #480]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a77      	ldr	r2, [pc, #476]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002c72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	4b75      	ldr	r3, [pc, #468]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a74      	ldr	r2, [pc, #464]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002c7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d013      	beq.n	8002cb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe f966 	bl	8000f5c <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c94:	f7fe f962 	bl	8000f5c <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e29e      	b.n	80031e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ca6:	4b6a      	ldr	r3, [pc, #424]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0xc0>
 8002cb2:	e014      	b.n	8002cde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe f952 	bl	8000f5c <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cbc:	f7fe f94e 	bl	8000f5c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	@ 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e28a      	b.n	80031e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cce:	4b60      	ldr	r3, [pc, #384]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0xe8>
 8002cda:	e000      	b.n	8002cde <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d075      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cea:	4b59      	ldr	r3, [pc, #356]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cf4:	4b56      	ldr	r3, [pc, #344]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	2b0c      	cmp	r3, #12
 8002d02:	d102      	bne.n	8002d0a <HAL_RCC_OscConfig+0x136>
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d002      	beq.n	8002d10 <HAL_RCC_OscConfig+0x13c>
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d11f      	bne.n	8002d50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d10:	4b4f      	ldr	r3, [pc, #316]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_OscConfig+0x154>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e25d      	b.n	80031e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d28:	4b49      	ldr	r3, [pc, #292]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	061b      	lsls	r3, r3, #24
 8002d36:	4946      	ldr	r1, [pc, #280]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d3c:	4b45      	ldr	r3, [pc, #276]	@ (8002e54 <HAL_RCC_OscConfig+0x280>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe f8bf 	bl	8000ec4 <HAL_InitTick>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d043      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e249      	b.n	80031e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d023      	beq.n	8002da0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d58:	4b3d      	ldr	r3, [pc, #244]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a3c      	ldr	r2, [pc, #240]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002d5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fe f8fa 	bl	8000f5c <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6c:	f7fe f8f6 	bl	8000f5c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e232      	b.n	80031e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d7e:	4b34      	ldr	r3, [pc, #208]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8a:	4b31      	ldr	r3, [pc, #196]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	061b      	lsls	r3, r3, #24
 8002d98:	492d      	ldr	r1, [pc, #180]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	604b      	str	r3, [r1, #4]
 8002d9e:	e01a      	b.n	8002dd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da0:	4b2b      	ldr	r3, [pc, #172]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a2a      	ldr	r2, [pc, #168]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002da6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dac:	f7fe f8d6 	bl	8000f5c <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db4:	f7fe f8d2 	bl	8000f5c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e20e      	b.n	80031e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dc6:	4b22      	ldr	r3, [pc, #136]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x1e0>
 8002dd2:	e000      	b.n	8002dd6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d041      	beq.n	8002e66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01c      	beq.n	8002e24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dea:	4b19      	ldr	r3, [pc, #100]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002df0:	4a17      	ldr	r2, [pc, #92]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfa:	f7fe f8af 	bl	8000f5c <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e02:	f7fe f8ab 	bl	8000f5c <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e1e7      	b.n	80031e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e14:	4b0e      	ldr	r3, [pc, #56]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0ef      	beq.n	8002e02 <HAL_RCC_OscConfig+0x22e>
 8002e22:	e020      	b.n	8002e66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e24:	4b0a      	ldr	r3, [pc, #40]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e2a:	4a09      	ldr	r2, [pc, #36]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e34:	f7fe f892 	bl	8000f5c <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e3a:	e00d      	b.n	8002e58 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3c:	f7fe f88e 	bl	8000f5c <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d906      	bls.n	8002e58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e1ca      	b.n	80031e4 <HAL_RCC_OscConfig+0x610>
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e58:	4b8c      	ldr	r3, [pc, #560]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1ea      	bne.n	8002e3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 80a6 	beq.w	8002fc0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e74:	2300      	movs	r3, #0
 8002e76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e78:	4b84      	ldr	r3, [pc, #528]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_OscConfig+0x2b4>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <HAL_RCC_OscConfig+0x2b6>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00d      	beq.n	8002eaa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8e:	4b7f      	ldr	r3, [pc, #508]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e92:	4a7e      	ldr	r2, [pc, #504]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002e94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e98:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e9a:	4b7c      	ldr	r3, [pc, #496]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eaa:	4b79      	ldr	r3, [pc, #484]	@ (8003090 <HAL_RCC_OscConfig+0x4bc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d118      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eb6:	4b76      	ldr	r3, [pc, #472]	@ (8003090 <HAL_RCC_OscConfig+0x4bc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a75      	ldr	r2, [pc, #468]	@ (8003090 <HAL_RCC_OscConfig+0x4bc>)
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec2:	f7fe f84b 	bl	8000f5c <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eca:	f7fe f847 	bl	8000f5c <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e183      	b.n	80031e4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002edc:	4b6c      	ldr	r3, [pc, #432]	@ (8003090 <HAL_RCC_OscConfig+0x4bc>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d108      	bne.n	8002f02 <HAL_RCC_OscConfig+0x32e>
 8002ef0:	4b66      	ldr	r3, [pc, #408]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef6:	4a65      	ldr	r2, [pc, #404]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f00:	e024      	b.n	8002f4c <HAL_RCC_OscConfig+0x378>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b05      	cmp	r3, #5
 8002f08:	d110      	bne.n	8002f2c <HAL_RCC_OscConfig+0x358>
 8002f0a:	4b60      	ldr	r3, [pc, #384]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f10:	4a5e      	ldr	r2, [pc, #376]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002f12:	f043 0304 	orr.w	r3, r3, #4
 8002f16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f1a:	4b5c      	ldr	r3, [pc, #368]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f20:	4a5a      	ldr	r2, [pc, #360]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f2a:	e00f      	b.n	8002f4c <HAL_RCC_OscConfig+0x378>
 8002f2c:	4b57      	ldr	r3, [pc, #348]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f32:	4a56      	ldr	r2, [pc, #344]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002f34:	f023 0301 	bic.w	r3, r3, #1
 8002f38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f3c:	4b53      	ldr	r3, [pc, #332]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f42:	4a52      	ldr	r2, [pc, #328]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002f44:	f023 0304 	bic.w	r3, r3, #4
 8002f48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d016      	beq.n	8002f82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7fe f802 	bl	8000f5c <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5c:	f7fd fffe 	bl	8000f5c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e138      	b.n	80031e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f72:	4b46      	ldr	r3, [pc, #280]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0ed      	beq.n	8002f5c <HAL_RCC_OscConfig+0x388>
 8002f80:	e015      	b.n	8002fae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f82:	f7fd ffeb 	bl	8000f5c <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f88:	e00a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7fd ffe7 	bl	8000f5c <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e121      	b.n	80031e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fa0:	4b3a      	ldr	r3, [pc, #232]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1ed      	bne.n	8002f8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fae:	7ffb      	ldrb	r3, [r7, #31]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d105      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb4:	4b35      	ldr	r3, [pc, #212]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb8:	4a34      	ldr	r2, [pc, #208]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002fba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fbe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d03c      	beq.n	8003046 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d01c      	beq.n	800300e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fd4:	4b2d      	ldr	r3, [pc, #180]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fda:	4a2c      	ldr	r2, [pc, #176]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe4:	f7fd ffba 	bl	8000f5c <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fec:	f7fd ffb6 	bl	8000f5c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e0f2      	b.n	80031e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ffe:	4b23      	ldr	r3, [pc, #140]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8003000:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0ef      	beq.n	8002fec <HAL_RCC_OscConfig+0x418>
 800300c:	e01b      	b.n	8003046 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800300e:	4b1f      	ldr	r3, [pc, #124]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8003010:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003014:	4a1d      	ldr	r2, [pc, #116]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301e:	f7fd ff9d 	bl	8000f5c <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003026:	f7fd ff99 	bl	8000f5c <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e0d5      	b.n	80031e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003038:	4b14      	ldr	r3, [pc, #80]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 800303a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1ef      	bne.n	8003026 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 80c9 	beq.w	80031e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003050:	4b0e      	ldr	r3, [pc, #56]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 030c 	and.w	r3, r3, #12
 8003058:	2b0c      	cmp	r3, #12
 800305a:	f000 8083 	beq.w	8003164 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d15e      	bne.n	8003124 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003066:	4b09      	ldr	r3, [pc, #36]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a08      	ldr	r2, [pc, #32]	@ (800308c <HAL_RCC_OscConfig+0x4b8>)
 800306c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7fd ff73 	bl	8000f5c <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003078:	e00c      	b.n	8003094 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307a:	f7fd ff6f 	bl	8000f5c <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d905      	bls.n	8003094 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e0ab      	b.n	80031e4 <HAL_RCC_OscConfig+0x610>
 800308c:	40021000 	.word	0x40021000
 8003090:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003094:	4b55      	ldr	r3, [pc, #340]	@ (80031ec <HAL_RCC_OscConfig+0x618>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1ec      	bne.n	800307a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a0:	4b52      	ldr	r3, [pc, #328]	@ (80031ec <HAL_RCC_OscConfig+0x618>)
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	4b52      	ldr	r3, [pc, #328]	@ (80031f0 <HAL_RCC_OscConfig+0x61c>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6a11      	ldr	r1, [r2, #32]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030b0:	3a01      	subs	r2, #1
 80030b2:	0112      	lsls	r2, r2, #4
 80030b4:	4311      	orrs	r1, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80030ba:	0212      	lsls	r2, r2, #8
 80030bc:	4311      	orrs	r1, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80030c2:	0852      	lsrs	r2, r2, #1
 80030c4:	3a01      	subs	r2, #1
 80030c6:	0552      	lsls	r2, r2, #21
 80030c8:	4311      	orrs	r1, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030ce:	0852      	lsrs	r2, r2, #1
 80030d0:	3a01      	subs	r2, #1
 80030d2:	0652      	lsls	r2, r2, #25
 80030d4:	4311      	orrs	r1, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80030da:	06d2      	lsls	r2, r2, #27
 80030dc:	430a      	orrs	r2, r1
 80030de:	4943      	ldr	r1, [pc, #268]	@ (80031ec <HAL_RCC_OscConfig+0x618>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e4:	4b41      	ldr	r3, [pc, #260]	@ (80031ec <HAL_RCC_OscConfig+0x618>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a40      	ldr	r2, [pc, #256]	@ (80031ec <HAL_RCC_OscConfig+0x618>)
 80030ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030f0:	4b3e      	ldr	r3, [pc, #248]	@ (80031ec <HAL_RCC_OscConfig+0x618>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	4a3d      	ldr	r2, [pc, #244]	@ (80031ec <HAL_RCC_OscConfig+0x618>)
 80030f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fd ff2e 	bl	8000f5c <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003104:	f7fd ff2a 	bl	8000f5c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e066      	b.n	80031e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003116:	4b35      	ldr	r3, [pc, #212]	@ (80031ec <HAL_RCC_OscConfig+0x618>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0x530>
 8003122:	e05e      	b.n	80031e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003124:	4b31      	ldr	r3, [pc, #196]	@ (80031ec <HAL_RCC_OscConfig+0x618>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a30      	ldr	r2, [pc, #192]	@ (80031ec <HAL_RCC_OscConfig+0x618>)
 800312a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800312e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fd ff14 	bl	8000f5c <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003138:	f7fd ff10 	bl	8000f5c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e04c      	b.n	80031e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800314a:	4b28      	ldr	r3, [pc, #160]	@ (80031ec <HAL_RCC_OscConfig+0x618>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003156:	4b25      	ldr	r3, [pc, #148]	@ (80031ec <HAL_RCC_OscConfig+0x618>)
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	4924      	ldr	r1, [pc, #144]	@ (80031ec <HAL_RCC_OscConfig+0x618>)
 800315c:	4b25      	ldr	r3, [pc, #148]	@ (80031f4 <HAL_RCC_OscConfig+0x620>)
 800315e:	4013      	ands	r3, r2
 8003160:	60cb      	str	r3, [r1, #12]
 8003162:	e03e      	b.n	80031e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e039      	b.n	80031e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003170:	4b1e      	ldr	r3, [pc, #120]	@ (80031ec <HAL_RCC_OscConfig+0x618>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f003 0203 	and.w	r2, r3, #3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	429a      	cmp	r2, r3
 8003182:	d12c      	bne.n	80031de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	3b01      	subs	r3, #1
 8003190:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d123      	bne.n	80031de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d11b      	bne.n	80031de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d113      	bne.n	80031de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	3b01      	subs	r3, #1
 80031c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d109      	bne.n	80031de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031d4:	085b      	lsrs	r3, r3, #1
 80031d6:	3b01      	subs	r3, #1
 80031d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d001      	beq.n	80031e2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3720      	adds	r7, #32
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000
 80031f0:	019f800c 	.word	0x019f800c
 80031f4:	feeefffc 	.word	0xfeeefffc

080031f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e11e      	b.n	800344e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003210:	4b91      	ldr	r3, [pc, #580]	@ (8003458 <HAL_RCC_ClockConfig+0x260>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 030f 	and.w	r3, r3, #15
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d910      	bls.n	8003240 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321e:	4b8e      	ldr	r3, [pc, #568]	@ (8003458 <HAL_RCC_ClockConfig+0x260>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 020f 	bic.w	r2, r3, #15
 8003226:	498c      	ldr	r1, [pc, #560]	@ (8003458 <HAL_RCC_ClockConfig+0x260>)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	4313      	orrs	r3, r2
 800322c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800322e:	4b8a      	ldr	r3, [pc, #552]	@ (8003458 <HAL_RCC_ClockConfig+0x260>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d001      	beq.n	8003240 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e106      	b.n	800344e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d073      	beq.n	8003334 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b03      	cmp	r3, #3
 8003252:	d129      	bne.n	80032a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003254:	4b81      	ldr	r3, [pc, #516]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0f4      	b.n	800344e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003264:	f000 f966 	bl	8003534 <RCC_GetSysClockFreqFromPLLSource>
 8003268:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4a7c      	ldr	r2, [pc, #496]	@ (8003460 <HAL_RCC_ClockConfig+0x268>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d93f      	bls.n	80032f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003272:	4b7a      	ldr	r3, [pc, #488]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d009      	beq.n	8003292 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003286:	2b00      	cmp	r3, #0
 8003288:	d033      	beq.n	80032f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800328e:	2b00      	cmp	r3, #0
 8003290:	d12f      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003292:	4b72      	ldr	r3, [pc, #456]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800329a:	4a70      	ldr	r2, [pc, #448]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 800329c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80032a2:	2380      	movs	r3, #128	@ 0x80
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	e024      	b.n	80032f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d107      	bne.n	80032c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b0:	4b6a      	ldr	r3, [pc, #424]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0c6      	b.n	800344e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032c0:	4b66      	ldr	r3, [pc, #408]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0be      	b.n	800344e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80032d0:	f000 f8ce 	bl	8003470 <HAL_RCC_GetSysClockFreq>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4a61      	ldr	r2, [pc, #388]	@ (8003460 <HAL_RCC_ClockConfig+0x268>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d909      	bls.n	80032f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032de:	4b5f      	ldr	r3, [pc, #380]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032e6:	4a5d      	ldr	r2, [pc, #372]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 80032e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80032ee:	2380      	movs	r3, #128	@ 0x80
 80032f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032f2:	4b5a      	ldr	r3, [pc, #360]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f023 0203 	bic.w	r2, r3, #3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	4957      	ldr	r1, [pc, #348]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 8003300:	4313      	orrs	r3, r2
 8003302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003304:	f7fd fe2a 	bl	8000f5c <HAL_GetTick>
 8003308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330a:	e00a      	b.n	8003322 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330c:	f7fd fe26 	bl	8000f5c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e095      	b.n	800344e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003322:	4b4e      	ldr	r3, [pc, #312]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 020c 	and.w	r2, r3, #12
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	429a      	cmp	r2, r3
 8003332:	d1eb      	bne.n	800330c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d023      	beq.n	8003388 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800334c:	4b43      	ldr	r3, [pc, #268]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	4a42      	ldr	r2, [pc, #264]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 8003352:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003356:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b00      	cmp	r3, #0
 8003362:	d007      	beq.n	8003374 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003364:	4b3d      	ldr	r3, [pc, #244]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800336c:	4a3b      	ldr	r2, [pc, #236]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 800336e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003372:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003374:	4b39      	ldr	r3, [pc, #228]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4936      	ldr	r1, [pc, #216]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 8003382:	4313      	orrs	r3, r2
 8003384:	608b      	str	r3, [r1, #8]
 8003386:	e008      	b.n	800339a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2b80      	cmp	r3, #128	@ 0x80
 800338c:	d105      	bne.n	800339a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800338e:	4b33      	ldr	r3, [pc, #204]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	4a32      	ldr	r2, [pc, #200]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 8003394:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003398:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800339a:	4b2f      	ldr	r3, [pc, #188]	@ (8003458 <HAL_RCC_ClockConfig+0x260>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d21d      	bcs.n	80033e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003458 <HAL_RCC_ClockConfig+0x260>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 020f 	bic.w	r2, r3, #15
 80033b0:	4929      	ldr	r1, [pc, #164]	@ (8003458 <HAL_RCC_ClockConfig+0x260>)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033b8:	f7fd fdd0 	bl	8000f5c <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c0:	f7fd fdcc 	bl	8000f5c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e03b      	b.n	800344e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d6:	4b20      	ldr	r3, [pc, #128]	@ (8003458 <HAL_RCC_ClockConfig+0x260>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d1ed      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f0:	4b1a      	ldr	r3, [pc, #104]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4917      	ldr	r1, [pc, #92]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d009      	beq.n	8003422 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800340e:	4b13      	ldr	r3, [pc, #76]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	490f      	ldr	r1, [pc, #60]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 800341e:	4313      	orrs	r3, r2
 8003420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003422:	f000 f825 	bl	8003470 <HAL_RCC_GetSysClockFreq>
 8003426:	4602      	mov	r2, r0
 8003428:	4b0c      	ldr	r3, [pc, #48]	@ (800345c <HAL_RCC_ClockConfig+0x264>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	490c      	ldr	r1, [pc, #48]	@ (8003464 <HAL_RCC_ClockConfig+0x26c>)
 8003434:	5ccb      	ldrb	r3, [r1, r3]
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	fa22 f303 	lsr.w	r3, r2, r3
 800343e:	4a0a      	ldr	r2, [pc, #40]	@ (8003468 <HAL_RCC_ClockConfig+0x270>)
 8003440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003442:	4b0a      	ldr	r3, [pc, #40]	@ (800346c <HAL_RCC_ClockConfig+0x274>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd fd3c 	bl	8000ec4 <HAL_InitTick>
 800344c:	4603      	mov	r3, r0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40022000 	.word	0x40022000
 800345c:	40021000 	.word	0x40021000
 8003460:	04c4b400 	.word	0x04c4b400
 8003464:	080053d4 	.word	0x080053d4
 8003468:	20000000 	.word	0x20000000
 800346c:	20000004 	.word	0x20000004

08003470 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003476:	4b2c      	ldr	r3, [pc, #176]	@ (8003528 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b04      	cmp	r3, #4
 8003480:	d102      	bne.n	8003488 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003482:	4b2a      	ldr	r3, [pc, #168]	@ (800352c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	e047      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003488:	4b27      	ldr	r3, [pc, #156]	@ (8003528 <HAL_RCC_GetSysClockFreq+0xb8>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 030c 	and.w	r3, r3, #12
 8003490:	2b08      	cmp	r3, #8
 8003492:	d102      	bne.n	800349a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003494:	4b26      	ldr	r3, [pc, #152]	@ (8003530 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	e03e      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800349a:	4b23      	ldr	r3, [pc, #140]	@ (8003528 <HAL_RCC_GetSysClockFreq+0xb8>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b0c      	cmp	r3, #12
 80034a4:	d136      	bne.n	8003514 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034a6:	4b20      	ldr	r3, [pc, #128]	@ (8003528 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003528 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	3301      	adds	r3, #1
 80034bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d10c      	bne.n	80034de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003530 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034cc:	4a16      	ldr	r2, [pc, #88]	@ (8003528 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034ce:	68d2      	ldr	r2, [r2, #12]
 80034d0:	0a12      	lsrs	r2, r2, #8
 80034d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	617b      	str	r3, [r7, #20]
      break;
 80034dc:	e00c      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034de:	4a13      	ldr	r2, [pc, #76]	@ (800352c <HAL_RCC_GetSysClockFreq+0xbc>)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e6:	4a10      	ldr	r2, [pc, #64]	@ (8003528 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034e8:	68d2      	ldr	r2, [r2, #12]
 80034ea:	0a12      	lsrs	r2, r2, #8
 80034ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034f0:	fb02 f303 	mul.w	r3, r2, r3
 80034f4:	617b      	str	r3, [r7, #20]
      break;
 80034f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003528 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	0e5b      	lsrs	r3, r3, #25
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	3301      	adds	r3, #1
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	e001      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003518:	693b      	ldr	r3, [r7, #16]
}
 800351a:	4618      	mov	r0, r3
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40021000 	.word	0x40021000
 800352c:	00f42400 	.word	0x00f42400
 8003530:	016e3600 	.word	0x016e3600

08003534 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800353a:	4b1e      	ldr	r3, [pc, #120]	@ (80035b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003544:	4b1b      	ldr	r3, [pc, #108]	@ (80035b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	091b      	lsrs	r3, r3, #4
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	3301      	adds	r3, #1
 8003550:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	2b03      	cmp	r3, #3
 8003556:	d10c      	bne.n	8003572 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003558:	4a17      	ldr	r2, [pc, #92]	@ (80035b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	4a14      	ldr	r2, [pc, #80]	@ (80035b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003562:	68d2      	ldr	r2, [r2, #12]
 8003564:	0a12      	lsrs	r2, r2, #8
 8003566:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	617b      	str	r3, [r7, #20]
    break;
 8003570:	e00c      	b.n	800358c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003572:	4a12      	ldr	r2, [pc, #72]	@ (80035bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	fbb2 f3f3 	udiv	r3, r2, r3
 800357a:	4a0e      	ldr	r2, [pc, #56]	@ (80035b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800357c:	68d2      	ldr	r2, [r2, #12]
 800357e:	0a12      	lsrs	r2, r2, #8
 8003580:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003584:	fb02 f303 	mul.w	r3, r2, r3
 8003588:	617b      	str	r3, [r7, #20]
    break;
 800358a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800358c:	4b09      	ldr	r3, [pc, #36]	@ (80035b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	0e5b      	lsrs	r3, r3, #25
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	3301      	adds	r3, #1
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80035a6:	687b      	ldr	r3, [r7, #4]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	40021000 	.word	0x40021000
 80035b8:	016e3600 	.word	0x016e3600
 80035bc:	00f42400 	.word	0x00f42400

080035c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035c8:	2300      	movs	r3, #0
 80035ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035cc:	2300      	movs	r3, #0
 80035ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 8098 	beq.w	800370e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035de:	2300      	movs	r3, #0
 80035e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e2:	4b43      	ldr	r3, [pc, #268]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10d      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ee:	4b40      	ldr	r3, [pc, #256]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f2:	4a3f      	ldr	r2, [pc, #252]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80035fa:	4b3d      	ldr	r3, [pc, #244]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003606:	2301      	movs	r3, #1
 8003608:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800360a:	4b3a      	ldr	r3, [pc, #232]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a39      	ldr	r2, [pc, #228]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003614:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003616:	f7fd fca1 	bl	8000f5c <HAL_GetTick>
 800361a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800361c:	e009      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361e:	f7fd fc9d 	bl	8000f5c <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d902      	bls.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	74fb      	strb	r3, [r7, #19]
        break;
 8003630:	e005      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003632:	4b30      	ldr	r3, [pc, #192]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0ef      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800363e:	7cfb      	ldrb	r3, [r7, #19]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d159      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003644:	4b2a      	ldr	r3, [pc, #168]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800364e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d01e      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	429a      	cmp	r2, r3
 800365e:	d019      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003660:	4b23      	ldr	r3, [pc, #140]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003666:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800366a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800366c:	4b20      	ldr	r3, [pc, #128]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003672:	4a1f      	ldr	r2, [pc, #124]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800367c:	4b1c      	ldr	r3, [pc, #112]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003682:	4a1b      	ldr	r2, [pc, #108]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003684:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800368c:	4a18      	ldr	r2, [pc, #96]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d016      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369e:	f7fd fc5d 	bl	8000f5c <HAL_GetTick>
 80036a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a4:	e00b      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a6:	f7fd fc59 	bl	8000f5c <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d902      	bls.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	74fb      	strb	r3, [r7, #19]
            break;
 80036bc:	e006      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036be:	4b0c      	ldr	r3, [pc, #48]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0ec      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10b      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036d2:	4b07      	ldr	r3, [pc, #28]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036e0:	4903      	ldr	r1, [pc, #12]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80036e8:	e008      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036ea:	7cfb      	ldrb	r3, [r7, #19]
 80036ec:	74bb      	strb	r3, [r7, #18]
 80036ee:	e005      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036fc:	7c7b      	ldrb	r3, [r7, #17]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d105      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003702:	4ba7      	ldr	r3, [pc, #668]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003706:	4aa6      	ldr	r2, [pc, #664]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003708:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800370c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800371a:	4ba1      	ldr	r3, [pc, #644]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003720:	f023 0203 	bic.w	r2, r3, #3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	499d      	ldr	r1, [pc, #628]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800373c:	4b98      	ldr	r3, [pc, #608]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003742:	f023 020c 	bic.w	r2, r3, #12
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	4995      	ldr	r1, [pc, #596]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800375e:	4b90      	ldr	r3, [pc, #576]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003764:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	498c      	ldr	r1, [pc, #560]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003780:	4b87      	ldr	r3, [pc, #540]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003786:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	4984      	ldr	r1, [pc, #528]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037a2:	4b7f      	ldr	r3, [pc, #508]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	497b      	ldr	r1, [pc, #492]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037c4:	4b76      	ldr	r3, [pc, #472]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	4973      	ldr	r1, [pc, #460]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037e6:	4b6e      	ldr	r3, [pc, #440]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	496a      	ldr	r1, [pc, #424]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003808:	4b65      	ldr	r3, [pc, #404]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	4962      	ldr	r1, [pc, #392]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800382a:	4b5d      	ldr	r3, [pc, #372]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003830:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	4959      	ldr	r1, [pc, #356]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800384c:	4b54      	ldr	r3, [pc, #336]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800384e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003852:	f023 0203 	bic.w	r2, r3, #3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385a:	4951      	ldr	r1, [pc, #324]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800386e:	4b4c      	ldr	r3, [pc, #304]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003874:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387c:	4948      	ldr	r1, [pc, #288]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800388c:	2b00      	cmp	r3, #0
 800388e:	d015      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003890:	4b43      	ldr	r3, [pc, #268]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003896:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	4940      	ldr	r1, [pc, #256]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038ae:	d105      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038b0:	4b3b      	ldr	r3, [pc, #236]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4a3a      	ldr	r2, [pc, #232]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038ba:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d015      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038c8:	4b35      	ldr	r3, [pc, #212]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d6:	4932      	ldr	r1, [pc, #200]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038e6:	d105      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038e8:	4b2d      	ldr	r3, [pc, #180]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4a2c      	ldr	r2, [pc, #176]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038f2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d015      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003900:	4b27      	ldr	r3, [pc, #156]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003906:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390e:	4924      	ldr	r1, [pc, #144]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800391e:	d105      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003920:	4b1f      	ldr	r3, [pc, #124]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4a1e      	ldr	r2, [pc, #120]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003926:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800392a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d015      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003938:	4b19      	ldr	r3, [pc, #100]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003946:	4916      	ldr	r1, [pc, #88]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003952:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003956:	d105      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003958:	4b11      	ldr	r3, [pc, #68]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4a10      	ldr	r2, [pc, #64]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003962:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d019      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003970:	4b0b      	ldr	r3, [pc, #44]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003976:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	4908      	ldr	r1, [pc, #32]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800398e:	d109      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003990:	4b03      	ldr	r3, [pc, #12]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4a02      	ldr	r2, [pc, #8]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003996:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800399a:	60d3      	str	r3, [r2, #12]
 800399c:	e002      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800399e:	bf00      	nop
 80039a0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d015      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039b0:	4b29      	ldr	r3, [pc, #164]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039be:	4926      	ldr	r1, [pc, #152]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039ce:	d105      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039d0:	4b21      	ldr	r3, [pc, #132]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4a20      	ldr	r2, [pc, #128]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039da:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d015      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80039e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039f6:	4918      	ldr	r1, [pc, #96]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a06:	d105      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a08:	4b13      	ldr	r3, [pc, #76]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4a12      	ldr	r2, [pc, #72]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a12:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d015      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a20:	4b0d      	ldr	r3, [pc, #52]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2e:	490a      	ldr	r1, [pc, #40]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a3e:	d105      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a40:	4b05      	ldr	r3, [pc, #20]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4a04      	ldr	r2, [pc, #16]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a4a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003a4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000

08003a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e049      	b.n	8003b02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fd f89e 	bl	8000bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f000 fe98 	bl	80047d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d001      	beq.n	8003b24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e04c      	b.n	8003bbe <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a26      	ldr	r2, [pc, #152]	@ (8003bcc <HAL_TIM_Base_Start+0xc0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d022      	beq.n	8003b7c <HAL_TIM_Base_Start+0x70>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b3e:	d01d      	beq.n	8003b7c <HAL_TIM_Base_Start+0x70>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a22      	ldr	r2, [pc, #136]	@ (8003bd0 <HAL_TIM_Base_Start+0xc4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d018      	beq.n	8003b7c <HAL_TIM_Base_Start+0x70>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a21      	ldr	r2, [pc, #132]	@ (8003bd4 <HAL_TIM_Base_Start+0xc8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d013      	beq.n	8003b7c <HAL_TIM_Base_Start+0x70>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a1f      	ldr	r2, [pc, #124]	@ (8003bd8 <HAL_TIM_Base_Start+0xcc>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00e      	beq.n	8003b7c <HAL_TIM_Base_Start+0x70>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1e      	ldr	r2, [pc, #120]	@ (8003bdc <HAL_TIM_Base_Start+0xd0>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d009      	beq.n	8003b7c <HAL_TIM_Base_Start+0x70>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003be0 <HAL_TIM_Base_Start+0xd4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d004      	beq.n	8003b7c <HAL_TIM_Base_Start+0x70>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a1b      	ldr	r2, [pc, #108]	@ (8003be4 <HAL_TIM_Base_Start+0xd8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d115      	bne.n	8003ba8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	4b19      	ldr	r3, [pc, #100]	@ (8003be8 <HAL_TIM_Base_Start+0xdc>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b06      	cmp	r3, #6
 8003b8c:	d015      	beq.n	8003bba <HAL_TIM_Base_Start+0xae>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b94:	d011      	beq.n	8003bba <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0201 	orr.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba6:	e008      	b.n	8003bba <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	e000      	b.n	8003bbc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40012c00 	.word	0x40012c00
 8003bd0:	40000400 	.word	0x40000400
 8003bd4:	40000800 	.word	0x40000800
 8003bd8:	40000c00 	.word	0x40000c00
 8003bdc:	40013400 	.word	0x40013400
 8003be0:	40014000 	.word	0x40014000
 8003be4:	40015000 	.word	0x40015000
 8003be8:	00010007 	.word	0x00010007

08003bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d001      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e054      	b.n	8003cae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a26      	ldr	r2, [pc, #152]	@ (8003cbc <HAL_TIM_Base_Start_IT+0xd0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d022      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c2e:	d01d      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a22      	ldr	r2, [pc, #136]	@ (8003cc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d018      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a21      	ldr	r2, [pc, #132]	@ (8003cc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d013      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00e      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1e      	ldr	r2, [pc, #120]	@ (8003ccc <HAL_TIM_Base_Start_IT+0xe0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d009      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8003cd0 <HAL_TIM_Base_Start_IT+0xe4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d004      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1b      	ldr	r2, [pc, #108]	@ (8003cd4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d115      	bne.n	8003c98 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	4b19      	ldr	r3, [pc, #100]	@ (8003cd8 <HAL_TIM_Base_Start_IT+0xec>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b06      	cmp	r3, #6
 8003c7c:	d015      	beq.n	8003caa <HAL_TIM_Base_Start_IT+0xbe>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c84:	d011      	beq.n	8003caa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f042 0201 	orr.w	r2, r2, #1
 8003c94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c96:	e008      	b.n	8003caa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	e000      	b.n	8003cac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003caa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40012c00 	.word	0x40012c00
 8003cc0:	40000400 	.word	0x40000400
 8003cc4:	40000800 	.word	0x40000800
 8003cc8:	40000c00 	.word	0x40000c00
 8003ccc:	40013400 	.word	0x40013400
 8003cd0:	40014000 	.word	0x40014000
 8003cd4:	40015000 	.word	0x40015000
 8003cd8:	00010007 	.word	0x00010007

08003cdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e049      	b.n	8003d82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f841 	bl	8003d8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3304      	adds	r3, #4
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	f000 fd58 	bl	80047d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d109      	bne.n	8003dc4 <HAL_TIM_PWM_Start+0x24>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	bf14      	ite	ne
 8003dbc:	2301      	movne	r3, #1
 8003dbe:	2300      	moveq	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	e03c      	b.n	8003e3e <HAL_TIM_PWM_Start+0x9e>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d109      	bne.n	8003dde <HAL_TIM_PWM_Start+0x3e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	bf14      	ite	ne
 8003dd6:	2301      	movne	r3, #1
 8003dd8:	2300      	moveq	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	e02f      	b.n	8003e3e <HAL_TIM_PWM_Start+0x9e>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d109      	bne.n	8003df8 <HAL_TIM_PWM_Start+0x58>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	bf14      	ite	ne
 8003df0:	2301      	movne	r3, #1
 8003df2:	2300      	moveq	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	e022      	b.n	8003e3e <HAL_TIM_PWM_Start+0x9e>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b0c      	cmp	r3, #12
 8003dfc:	d109      	bne.n	8003e12 <HAL_TIM_PWM_Start+0x72>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	bf14      	ite	ne
 8003e0a:	2301      	movne	r3, #1
 8003e0c:	2300      	moveq	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	e015      	b.n	8003e3e <HAL_TIM_PWM_Start+0x9e>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b10      	cmp	r3, #16
 8003e16:	d109      	bne.n	8003e2c <HAL_TIM_PWM_Start+0x8c>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	bf14      	ite	ne
 8003e24:	2301      	movne	r3, #1
 8003e26:	2300      	moveq	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	e008      	b.n	8003e3e <HAL_TIM_PWM_Start+0x9e>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	bf14      	ite	ne
 8003e38:	2301      	movne	r3, #1
 8003e3a:	2300      	moveq	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e0a6      	b.n	8003f94 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d104      	bne.n	8003e56 <HAL_TIM_PWM_Start+0xb6>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e54:	e023      	b.n	8003e9e <HAL_TIM_PWM_Start+0xfe>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d104      	bne.n	8003e66 <HAL_TIM_PWM_Start+0xc6>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e64:	e01b      	b.n	8003e9e <HAL_TIM_PWM_Start+0xfe>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d104      	bne.n	8003e76 <HAL_TIM_PWM_Start+0xd6>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e74:	e013      	b.n	8003e9e <HAL_TIM_PWM_Start+0xfe>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b0c      	cmp	r3, #12
 8003e7a:	d104      	bne.n	8003e86 <HAL_TIM_PWM_Start+0xe6>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e84:	e00b      	b.n	8003e9e <HAL_TIM_PWM_Start+0xfe>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d104      	bne.n	8003e96 <HAL_TIM_PWM_Start+0xf6>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e94:	e003      	b.n	8003e9e <HAL_TIM_PWM_Start+0xfe>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2202      	movs	r2, #2
 8003e9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	6839      	ldr	r1, [r7, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 f90c 	bl	80050c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a3a      	ldr	r2, [pc, #232]	@ (8003f9c <HAL_TIM_PWM_Start+0x1fc>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d018      	beq.n	8003ee8 <HAL_TIM_PWM_Start+0x148>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a39      	ldr	r2, [pc, #228]	@ (8003fa0 <HAL_TIM_PWM_Start+0x200>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d013      	beq.n	8003ee8 <HAL_TIM_PWM_Start+0x148>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a37      	ldr	r2, [pc, #220]	@ (8003fa4 <HAL_TIM_PWM_Start+0x204>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00e      	beq.n	8003ee8 <HAL_TIM_PWM_Start+0x148>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a36      	ldr	r2, [pc, #216]	@ (8003fa8 <HAL_TIM_PWM_Start+0x208>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d009      	beq.n	8003ee8 <HAL_TIM_PWM_Start+0x148>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a34      	ldr	r2, [pc, #208]	@ (8003fac <HAL_TIM_PWM_Start+0x20c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <HAL_TIM_PWM_Start+0x148>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a33      	ldr	r2, [pc, #204]	@ (8003fb0 <HAL_TIM_PWM_Start+0x210>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d101      	bne.n	8003eec <HAL_TIM_PWM_Start+0x14c>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <HAL_TIM_PWM_Start+0x14e>
 8003eec:	2300      	movs	r3, #0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d007      	beq.n	8003f02 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a25      	ldr	r2, [pc, #148]	@ (8003f9c <HAL_TIM_PWM_Start+0x1fc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d022      	beq.n	8003f52 <HAL_TIM_PWM_Start+0x1b2>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f14:	d01d      	beq.n	8003f52 <HAL_TIM_PWM_Start+0x1b2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a26      	ldr	r2, [pc, #152]	@ (8003fb4 <HAL_TIM_PWM_Start+0x214>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d018      	beq.n	8003f52 <HAL_TIM_PWM_Start+0x1b2>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a24      	ldr	r2, [pc, #144]	@ (8003fb8 <HAL_TIM_PWM_Start+0x218>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <HAL_TIM_PWM_Start+0x1b2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a23      	ldr	r2, [pc, #140]	@ (8003fbc <HAL_TIM_PWM_Start+0x21c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00e      	beq.n	8003f52 <HAL_TIM_PWM_Start+0x1b2>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a19      	ldr	r2, [pc, #100]	@ (8003fa0 <HAL_TIM_PWM_Start+0x200>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <HAL_TIM_PWM_Start+0x1b2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a18      	ldr	r2, [pc, #96]	@ (8003fa4 <HAL_TIM_PWM_Start+0x204>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_TIM_PWM_Start+0x1b2>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a18      	ldr	r2, [pc, #96]	@ (8003fb0 <HAL_TIM_PWM_Start+0x210>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d115      	bne.n	8003f7e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	4b19      	ldr	r3, [pc, #100]	@ (8003fc0 <HAL_TIM_PWM_Start+0x220>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b06      	cmp	r3, #6
 8003f62:	d015      	beq.n	8003f90 <HAL_TIM_PWM_Start+0x1f0>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f6a:	d011      	beq.n	8003f90 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f7c:	e008      	b.n	8003f90 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0201 	orr.w	r2, r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e000      	b.n	8003f92 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40012c00 	.word	0x40012c00
 8003fa0:	40013400 	.word	0x40013400
 8003fa4:	40014000 	.word	0x40014000
 8003fa8:	40014400 	.word	0x40014400
 8003fac:	40014800 	.word	0x40014800
 8003fb0:	40015000 	.word	0x40015000
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800
 8003fbc:	40000c00 	.word	0x40000c00
 8003fc0:	00010007 	.word	0x00010007

08003fc4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e097      	b.n	8004108 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d106      	bne.n	8003ff2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7fc fe1b 	bl	8000c28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004008:	f023 0307 	bic.w	r3, r3, #7
 800400c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3304      	adds	r3, #4
 8004016:	4619      	mov	r1, r3
 8004018:	4610      	mov	r0, r2
 800401a:	f000 fbd9 	bl	80047d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004046:	f023 0303 	bic.w	r3, r3, #3
 800404a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	021b      	lsls	r3, r3, #8
 8004056:	4313      	orrs	r3, r2
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004064:	f023 030c 	bic.w	r3, r3, #12
 8004068:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004070:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004074:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	021b      	lsls	r3, r3, #8
 8004080:	4313      	orrs	r3, r2
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	011a      	lsls	r2, r3, #4
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	031b      	lsls	r3, r3, #12
 8004094:	4313      	orrs	r3, r2
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80040a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80040aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	4313      	orrs	r3, r2
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004120:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004128:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004130:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004138:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d110      	bne.n	8004162 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d102      	bne.n	800414c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004146:	7b7b      	ldrb	r3, [r7, #13]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d001      	beq.n	8004150 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e069      	b.n	8004224 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004160:	e031      	b.n	80041c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b04      	cmp	r3, #4
 8004166:	d110      	bne.n	800418a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004168:	7bbb      	ldrb	r3, [r7, #14]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d102      	bne.n	8004174 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800416e:	7b3b      	ldrb	r3, [r7, #12]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d001      	beq.n	8004178 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e055      	b.n	8004224 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004188:	e01d      	b.n	80041c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800418a:	7bfb      	ldrb	r3, [r7, #15]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d108      	bne.n	80041a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004190:	7bbb      	ldrb	r3, [r7, #14]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d105      	bne.n	80041a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004196:	7b7b      	ldrb	r3, [r7, #13]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d102      	bne.n	80041a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800419c:	7b3b      	ldrb	r3, [r7, #12]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d001      	beq.n	80041a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e03e      	b.n	8004224 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2202      	movs	r2, #2
 80041aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2202      	movs	r2, #2
 80041b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2202      	movs	r2, #2
 80041ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2202      	movs	r2, #2
 80041c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <HAL_TIM_Encoder_Start+0xc4>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d008      	beq.n	80041e4 <HAL_TIM_Encoder_Start+0xd4>
 80041d2:	e00f      	b.n	80041f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2201      	movs	r2, #1
 80041da:	2100      	movs	r1, #0
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 ff71 	bl	80050c4 <TIM_CCxChannelCmd>
      break;
 80041e2:	e016      	b.n	8004212 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2201      	movs	r2, #1
 80041ea:	2104      	movs	r1, #4
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 ff69 	bl	80050c4 <TIM_CCxChannelCmd>
      break;
 80041f2:	e00e      	b.n	8004212 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2201      	movs	r2, #1
 80041fa:	2100      	movs	r1, #0
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 ff61 	bl	80050c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2201      	movs	r2, #1
 8004208:	2104      	movs	r1, #4
 800420a:	4618      	mov	r0, r3
 800420c:	f000 ff5a 	bl	80050c4 <TIM_CCxChannelCmd>
      break;
 8004210:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0201 	orr.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_TIM_Encoder_Stop+0x18>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b04      	cmp	r3, #4
 8004240:	d008      	beq.n	8004254 <HAL_TIM_Encoder_Stop+0x28>
 8004242:	e00f      	b.n	8004264 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2200      	movs	r2, #0
 800424a:	2100      	movs	r1, #0
 800424c:	4618      	mov	r0, r3
 800424e:	f000 ff39 	bl	80050c4 <TIM_CCxChannelCmd>
      break;
 8004252:	e016      	b.n	8004282 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2200      	movs	r2, #0
 800425a:	2104      	movs	r1, #4
 800425c:	4618      	mov	r0, r3
 800425e:	f000 ff31 	bl	80050c4 <TIM_CCxChannelCmd>
      break;
 8004262:	e00e      	b.n	8004282 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2200      	movs	r2, #0
 800426a:	2100      	movs	r1, #0
 800426c:	4618      	mov	r0, r3
 800426e:	f000 ff29 	bl	80050c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2200      	movs	r2, #0
 8004278:	2104      	movs	r1, #4
 800427a:	4618      	mov	r0, r3
 800427c:	f000 ff22 	bl	80050c4 <TIM_CCxChannelCmd>
      break;
 8004280:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6a1a      	ldr	r2, [r3, #32]
 8004288:	f241 1311 	movw	r3, #4369	@ 0x1111
 800428c:	4013      	ands	r3, r2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10f      	bne.n	80042b2 <HAL_TIM_Encoder_Stop+0x86>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6a1a      	ldr	r2, [r3, #32]
 8004298:	f244 4344 	movw	r3, #17476	@ 0x4444
 800429c:	4013      	ands	r3, r2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d107      	bne.n	80042b2 <HAL_TIM_Encoder_Stop+0x86>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0201 	bic.w	r2, r2, #1
 80042b0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_TIM_Encoder_Stop+0x92>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d148      	bne.n	8004350 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d104      	bne.n	80042ce <HAL_TIM_Encoder_Stop+0xa2>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042cc:	e023      	b.n	8004316 <HAL_TIM_Encoder_Stop+0xea>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d104      	bne.n	80042de <HAL_TIM_Encoder_Stop+0xb2>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042dc:	e01b      	b.n	8004316 <HAL_TIM_Encoder_Stop+0xea>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d104      	bne.n	80042ee <HAL_TIM_Encoder_Stop+0xc2>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042ec:	e013      	b.n	8004316 <HAL_TIM_Encoder_Stop+0xea>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b0c      	cmp	r3, #12
 80042f2:	d104      	bne.n	80042fe <HAL_TIM_Encoder_Stop+0xd2>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042fc:	e00b      	b.n	8004316 <HAL_TIM_Encoder_Stop+0xea>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b10      	cmp	r3, #16
 8004302:	d104      	bne.n	800430e <HAL_TIM_Encoder_Stop+0xe2>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800430c:	e003      	b.n	8004316 <HAL_TIM_Encoder_Stop+0xea>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d104      	bne.n	8004326 <HAL_TIM_Encoder_Stop+0xfa>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004324:	e024      	b.n	8004370 <HAL_TIM_Encoder_Stop+0x144>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b04      	cmp	r3, #4
 800432a:	d104      	bne.n	8004336 <HAL_TIM_Encoder_Stop+0x10a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004334:	e01c      	b.n	8004370 <HAL_TIM_Encoder_Stop+0x144>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b08      	cmp	r3, #8
 800433a:	d104      	bne.n	8004346 <HAL_TIM_Encoder_Stop+0x11a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004344:	e014      	b.n	8004370 <HAL_TIM_Encoder_Stop+0x144>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 800434e:	e00f      	b.n	8004370 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004396:	2302      	movs	r3, #2
 8004398:	e0ff      	b.n	800459a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b14      	cmp	r3, #20
 80043a6:	f200 80f0 	bhi.w	800458a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80043aa:	a201      	add	r2, pc, #4	@ (adr r2, 80043b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b0:	08004405 	.word	0x08004405
 80043b4:	0800458b 	.word	0x0800458b
 80043b8:	0800458b 	.word	0x0800458b
 80043bc:	0800458b 	.word	0x0800458b
 80043c0:	08004445 	.word	0x08004445
 80043c4:	0800458b 	.word	0x0800458b
 80043c8:	0800458b 	.word	0x0800458b
 80043cc:	0800458b 	.word	0x0800458b
 80043d0:	08004487 	.word	0x08004487
 80043d4:	0800458b 	.word	0x0800458b
 80043d8:	0800458b 	.word	0x0800458b
 80043dc:	0800458b 	.word	0x0800458b
 80043e0:	080044c7 	.word	0x080044c7
 80043e4:	0800458b 	.word	0x0800458b
 80043e8:	0800458b 	.word	0x0800458b
 80043ec:	0800458b 	.word	0x0800458b
 80043f0:	08004509 	.word	0x08004509
 80043f4:	0800458b 	.word	0x0800458b
 80043f8:	0800458b 	.word	0x0800458b
 80043fc:	0800458b 	.word	0x0800458b
 8004400:	08004549 	.word	0x08004549
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fa94 	bl	8004938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0208 	orr.w	r2, r2, #8
 800441e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0204 	bic.w	r2, r2, #4
 800442e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6999      	ldr	r1, [r3, #24]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	619a      	str	r2, [r3, #24]
      break;
 8004442:	e0a5      	b.n	8004590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fb0e 	bl	8004a6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699a      	ldr	r2, [r3, #24]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800445e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800446e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6999      	ldr	r1, [r3, #24]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	021a      	lsls	r2, r3, #8
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	619a      	str	r2, [r3, #24]
      break;
 8004484:	e084      	b.n	8004590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fb81 	bl	8004b94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69da      	ldr	r2, [r3, #28]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 0208 	orr.w	r2, r2, #8
 80044a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69da      	ldr	r2, [r3, #28]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0204 	bic.w	r2, r2, #4
 80044b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69d9      	ldr	r1, [r3, #28]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	691a      	ldr	r2, [r3, #16]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	61da      	str	r2, [r3, #28]
      break;
 80044c4:	e064      	b.n	8004590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68b9      	ldr	r1, [r7, #8]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fbf3 	bl	8004cb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69da      	ldr	r2, [r3, #28]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69da      	ldr	r2, [r3, #28]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69d9      	ldr	r1, [r3, #28]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	021a      	lsls	r2, r3, #8
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	61da      	str	r2, [r3, #28]
      break;
 8004506:	e043      	b.n	8004590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fc66 	bl	8004de0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0208 	orr.w	r2, r2, #8
 8004522:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0204 	bic.w	r2, r2, #4
 8004532:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004546:	e023      	b.n	8004590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fcb0 	bl	8004eb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004562:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004572:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	021a      	lsls	r2, r3, #8
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004588:	e002      	b.n	8004590 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	75fb      	strb	r3, [r7, #23]
      break;
 800458e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004598:	7dfb      	ldrb	r3, [r7, #23]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop

080045a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_TIM_ConfigClockSource+0x1c>
 80045bc:	2302      	movs	r3, #2
 80045be:	e0f6      	b.n	80047ae <HAL_TIM_ConfigClockSource+0x20a>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80045de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80045e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a6f      	ldr	r2, [pc, #444]	@ (80047b8 <HAL_TIM_ConfigClockSource+0x214>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	f000 80c1 	beq.w	8004782 <HAL_TIM_ConfigClockSource+0x1de>
 8004600:	4a6d      	ldr	r2, [pc, #436]	@ (80047b8 <HAL_TIM_ConfigClockSource+0x214>)
 8004602:	4293      	cmp	r3, r2
 8004604:	f200 80c6 	bhi.w	8004794 <HAL_TIM_ConfigClockSource+0x1f0>
 8004608:	4a6c      	ldr	r2, [pc, #432]	@ (80047bc <HAL_TIM_ConfigClockSource+0x218>)
 800460a:	4293      	cmp	r3, r2
 800460c:	f000 80b9 	beq.w	8004782 <HAL_TIM_ConfigClockSource+0x1de>
 8004610:	4a6a      	ldr	r2, [pc, #424]	@ (80047bc <HAL_TIM_ConfigClockSource+0x218>)
 8004612:	4293      	cmp	r3, r2
 8004614:	f200 80be 	bhi.w	8004794 <HAL_TIM_ConfigClockSource+0x1f0>
 8004618:	4a69      	ldr	r2, [pc, #420]	@ (80047c0 <HAL_TIM_ConfigClockSource+0x21c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	f000 80b1 	beq.w	8004782 <HAL_TIM_ConfigClockSource+0x1de>
 8004620:	4a67      	ldr	r2, [pc, #412]	@ (80047c0 <HAL_TIM_ConfigClockSource+0x21c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	f200 80b6 	bhi.w	8004794 <HAL_TIM_ConfigClockSource+0x1f0>
 8004628:	4a66      	ldr	r2, [pc, #408]	@ (80047c4 <HAL_TIM_ConfigClockSource+0x220>)
 800462a:	4293      	cmp	r3, r2
 800462c:	f000 80a9 	beq.w	8004782 <HAL_TIM_ConfigClockSource+0x1de>
 8004630:	4a64      	ldr	r2, [pc, #400]	@ (80047c4 <HAL_TIM_ConfigClockSource+0x220>)
 8004632:	4293      	cmp	r3, r2
 8004634:	f200 80ae 	bhi.w	8004794 <HAL_TIM_ConfigClockSource+0x1f0>
 8004638:	4a63      	ldr	r2, [pc, #396]	@ (80047c8 <HAL_TIM_ConfigClockSource+0x224>)
 800463a:	4293      	cmp	r3, r2
 800463c:	f000 80a1 	beq.w	8004782 <HAL_TIM_ConfigClockSource+0x1de>
 8004640:	4a61      	ldr	r2, [pc, #388]	@ (80047c8 <HAL_TIM_ConfigClockSource+0x224>)
 8004642:	4293      	cmp	r3, r2
 8004644:	f200 80a6 	bhi.w	8004794 <HAL_TIM_ConfigClockSource+0x1f0>
 8004648:	4a60      	ldr	r2, [pc, #384]	@ (80047cc <HAL_TIM_ConfigClockSource+0x228>)
 800464a:	4293      	cmp	r3, r2
 800464c:	f000 8099 	beq.w	8004782 <HAL_TIM_ConfigClockSource+0x1de>
 8004650:	4a5e      	ldr	r2, [pc, #376]	@ (80047cc <HAL_TIM_ConfigClockSource+0x228>)
 8004652:	4293      	cmp	r3, r2
 8004654:	f200 809e 	bhi.w	8004794 <HAL_TIM_ConfigClockSource+0x1f0>
 8004658:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800465c:	f000 8091 	beq.w	8004782 <HAL_TIM_ConfigClockSource+0x1de>
 8004660:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004664:	f200 8096 	bhi.w	8004794 <HAL_TIM_ConfigClockSource+0x1f0>
 8004668:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800466c:	f000 8089 	beq.w	8004782 <HAL_TIM_ConfigClockSource+0x1de>
 8004670:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004674:	f200 808e 	bhi.w	8004794 <HAL_TIM_ConfigClockSource+0x1f0>
 8004678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800467c:	d03e      	beq.n	80046fc <HAL_TIM_ConfigClockSource+0x158>
 800467e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004682:	f200 8087 	bhi.w	8004794 <HAL_TIM_ConfigClockSource+0x1f0>
 8004686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800468a:	f000 8086 	beq.w	800479a <HAL_TIM_ConfigClockSource+0x1f6>
 800468e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004692:	d87f      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x1f0>
 8004694:	2b70      	cmp	r3, #112	@ 0x70
 8004696:	d01a      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0x12a>
 8004698:	2b70      	cmp	r3, #112	@ 0x70
 800469a:	d87b      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x1f0>
 800469c:	2b60      	cmp	r3, #96	@ 0x60
 800469e:	d050      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x19e>
 80046a0:	2b60      	cmp	r3, #96	@ 0x60
 80046a2:	d877      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x1f0>
 80046a4:	2b50      	cmp	r3, #80	@ 0x50
 80046a6:	d03c      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0x17e>
 80046a8:	2b50      	cmp	r3, #80	@ 0x50
 80046aa:	d873      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x1f0>
 80046ac:	2b40      	cmp	r3, #64	@ 0x40
 80046ae:	d058      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x1be>
 80046b0:	2b40      	cmp	r3, #64	@ 0x40
 80046b2:	d86f      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x1f0>
 80046b4:	2b30      	cmp	r3, #48	@ 0x30
 80046b6:	d064      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x1de>
 80046b8:	2b30      	cmp	r3, #48	@ 0x30
 80046ba:	d86b      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x1f0>
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d060      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x1de>
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d867      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x1f0>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d05c      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x1de>
 80046c8:	2b10      	cmp	r3, #16
 80046ca:	d05a      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x1de>
 80046cc:	e062      	b.n	8004794 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046de:	f000 fcd1 	bl	8005084 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	609a      	str	r2, [r3, #8]
      break;
 80046fa:	e04f      	b.n	800479c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800470c:	f000 fcba 	bl	8005084 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800471e:	609a      	str	r2, [r3, #8]
      break;
 8004720:	e03c      	b.n	800479c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800472e:	461a      	mov	r2, r3
 8004730:	f000 fc2c 	bl	8004f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2150      	movs	r1, #80	@ 0x50
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fc85 	bl	800504a <TIM_ITRx_SetConfig>
      break;
 8004740:	e02c      	b.n	800479c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800474e:	461a      	mov	r2, r3
 8004750:	f000 fc4b 	bl	8004fea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2160      	movs	r1, #96	@ 0x60
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fc75 	bl	800504a <TIM_ITRx_SetConfig>
      break;
 8004760:	e01c      	b.n	800479c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800476e:	461a      	mov	r2, r3
 8004770:	f000 fc0c 	bl	8004f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2140      	movs	r1, #64	@ 0x40
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fc65 	bl	800504a <TIM_ITRx_SetConfig>
      break;
 8004780:	e00c      	b.n	800479c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4619      	mov	r1, r3
 800478c:	4610      	mov	r0, r2
 800478e:	f000 fc5c 	bl	800504a <TIM_ITRx_SetConfig>
      break;
 8004792:	e003      	b.n	800479c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
      break;
 8004798:	e000      	b.n	800479c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800479a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	00100070 	.word	0x00100070
 80047bc:	00100060 	.word	0x00100060
 80047c0:	00100050 	.word	0x00100050
 80047c4:	00100040 	.word	0x00100040
 80047c8:	00100030 	.word	0x00100030
 80047cc:	00100020 	.word	0x00100020

080047d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a4c      	ldr	r2, [pc, #304]	@ (8004914 <TIM_Base_SetConfig+0x144>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d017      	beq.n	8004818 <TIM_Base_SetConfig+0x48>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047ee:	d013      	beq.n	8004818 <TIM_Base_SetConfig+0x48>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a49      	ldr	r2, [pc, #292]	@ (8004918 <TIM_Base_SetConfig+0x148>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00f      	beq.n	8004818 <TIM_Base_SetConfig+0x48>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a48      	ldr	r2, [pc, #288]	@ (800491c <TIM_Base_SetConfig+0x14c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d00b      	beq.n	8004818 <TIM_Base_SetConfig+0x48>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a47      	ldr	r2, [pc, #284]	@ (8004920 <TIM_Base_SetConfig+0x150>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d007      	beq.n	8004818 <TIM_Base_SetConfig+0x48>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a46      	ldr	r2, [pc, #280]	@ (8004924 <TIM_Base_SetConfig+0x154>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d003      	beq.n	8004818 <TIM_Base_SetConfig+0x48>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a45      	ldr	r2, [pc, #276]	@ (8004928 <TIM_Base_SetConfig+0x158>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d108      	bne.n	800482a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800481e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a39      	ldr	r2, [pc, #228]	@ (8004914 <TIM_Base_SetConfig+0x144>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d023      	beq.n	800487a <TIM_Base_SetConfig+0xaa>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004838:	d01f      	beq.n	800487a <TIM_Base_SetConfig+0xaa>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a36      	ldr	r2, [pc, #216]	@ (8004918 <TIM_Base_SetConfig+0x148>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d01b      	beq.n	800487a <TIM_Base_SetConfig+0xaa>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a35      	ldr	r2, [pc, #212]	@ (800491c <TIM_Base_SetConfig+0x14c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d017      	beq.n	800487a <TIM_Base_SetConfig+0xaa>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a34      	ldr	r2, [pc, #208]	@ (8004920 <TIM_Base_SetConfig+0x150>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d013      	beq.n	800487a <TIM_Base_SetConfig+0xaa>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a33      	ldr	r2, [pc, #204]	@ (8004924 <TIM_Base_SetConfig+0x154>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00f      	beq.n	800487a <TIM_Base_SetConfig+0xaa>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a33      	ldr	r2, [pc, #204]	@ (800492c <TIM_Base_SetConfig+0x15c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00b      	beq.n	800487a <TIM_Base_SetConfig+0xaa>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a32      	ldr	r2, [pc, #200]	@ (8004930 <TIM_Base_SetConfig+0x160>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d007      	beq.n	800487a <TIM_Base_SetConfig+0xaa>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a31      	ldr	r2, [pc, #196]	@ (8004934 <TIM_Base_SetConfig+0x164>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d003      	beq.n	800487a <TIM_Base_SetConfig+0xaa>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a2c      	ldr	r2, [pc, #176]	@ (8004928 <TIM_Base_SetConfig+0x158>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d108      	bne.n	800488c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4313      	orrs	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a18      	ldr	r2, [pc, #96]	@ (8004914 <TIM_Base_SetConfig+0x144>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d013      	beq.n	80048e0 <TIM_Base_SetConfig+0x110>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004924 <TIM_Base_SetConfig+0x154>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00f      	beq.n	80048e0 <TIM_Base_SetConfig+0x110>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a1a      	ldr	r2, [pc, #104]	@ (800492c <TIM_Base_SetConfig+0x15c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00b      	beq.n	80048e0 <TIM_Base_SetConfig+0x110>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a19      	ldr	r2, [pc, #100]	@ (8004930 <TIM_Base_SetConfig+0x160>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d007      	beq.n	80048e0 <TIM_Base_SetConfig+0x110>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a18      	ldr	r2, [pc, #96]	@ (8004934 <TIM_Base_SetConfig+0x164>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d003      	beq.n	80048e0 <TIM_Base_SetConfig+0x110>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a13      	ldr	r2, [pc, #76]	@ (8004928 <TIM_Base_SetConfig+0x158>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d103      	bne.n	80048e8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d105      	bne.n	8004906 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f023 0201 	bic.w	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	611a      	str	r2, [r3, #16]
  }
}
 8004906:	bf00      	nop
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40012c00 	.word	0x40012c00
 8004918:	40000400 	.word	0x40000400
 800491c:	40000800 	.word	0x40000800
 8004920:	40000c00 	.word	0x40000c00
 8004924:	40013400 	.word	0x40013400
 8004928:	40015000 	.word	0x40015000
 800492c:	40014000 	.word	0x40014000
 8004930:	40014400 	.word	0x40014400
 8004934:	40014800 	.word	0x40014800

08004938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	f023 0201 	bic.w	r2, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800496a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0303 	bic.w	r3, r3, #3
 8004972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f023 0302 	bic.w	r3, r3, #2
 8004984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a30      	ldr	r2, [pc, #192]	@ (8004a54 <TIM_OC1_SetConfig+0x11c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d013      	beq.n	80049c0 <TIM_OC1_SetConfig+0x88>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a2f      	ldr	r2, [pc, #188]	@ (8004a58 <TIM_OC1_SetConfig+0x120>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00f      	beq.n	80049c0 <TIM_OC1_SetConfig+0x88>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a2e      	ldr	r2, [pc, #184]	@ (8004a5c <TIM_OC1_SetConfig+0x124>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00b      	beq.n	80049c0 <TIM_OC1_SetConfig+0x88>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a2d      	ldr	r2, [pc, #180]	@ (8004a60 <TIM_OC1_SetConfig+0x128>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d007      	beq.n	80049c0 <TIM_OC1_SetConfig+0x88>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004a64 <TIM_OC1_SetConfig+0x12c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d003      	beq.n	80049c0 <TIM_OC1_SetConfig+0x88>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a2b      	ldr	r2, [pc, #172]	@ (8004a68 <TIM_OC1_SetConfig+0x130>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d10c      	bne.n	80049da <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f023 0308 	bic.w	r3, r3, #8
 80049c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f023 0304 	bic.w	r3, r3, #4
 80049d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a54 <TIM_OC1_SetConfig+0x11c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <TIM_OC1_SetConfig+0xd2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a58 <TIM_OC1_SetConfig+0x120>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00f      	beq.n	8004a0a <TIM_OC1_SetConfig+0xd2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a1b      	ldr	r2, [pc, #108]	@ (8004a5c <TIM_OC1_SetConfig+0x124>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00b      	beq.n	8004a0a <TIM_OC1_SetConfig+0xd2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004a60 <TIM_OC1_SetConfig+0x128>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d007      	beq.n	8004a0a <TIM_OC1_SetConfig+0xd2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a19      	ldr	r2, [pc, #100]	@ (8004a64 <TIM_OC1_SetConfig+0x12c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d003      	beq.n	8004a0a <TIM_OC1_SetConfig+0xd2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a18      	ldr	r2, [pc, #96]	@ (8004a68 <TIM_OC1_SetConfig+0x130>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d111      	bne.n	8004a2e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	621a      	str	r2, [r3, #32]
}
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	40012c00 	.word	0x40012c00
 8004a58:	40013400 	.word	0x40013400
 8004a5c:	40014000 	.word	0x40014000
 8004a60:	40014400 	.word	0x40014400
 8004a64:	40014800 	.word	0x40014800
 8004a68:	40015000 	.word	0x40015000

08004a6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	f023 0210 	bic.w	r2, r3, #16
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f023 0320 	bic.w	r3, r3, #32
 8004aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a2c      	ldr	r2, [pc, #176]	@ (8004b7c <TIM_OC2_SetConfig+0x110>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d007      	beq.n	8004ae0 <TIM_OC2_SetConfig+0x74>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a2b      	ldr	r2, [pc, #172]	@ (8004b80 <TIM_OC2_SetConfig+0x114>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d003      	beq.n	8004ae0 <TIM_OC2_SetConfig+0x74>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a2a      	ldr	r2, [pc, #168]	@ (8004b84 <TIM_OC2_SetConfig+0x118>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d10d      	bne.n	8004afc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004afa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a1f      	ldr	r2, [pc, #124]	@ (8004b7c <TIM_OC2_SetConfig+0x110>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d013      	beq.n	8004b2c <TIM_OC2_SetConfig+0xc0>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a1e      	ldr	r2, [pc, #120]	@ (8004b80 <TIM_OC2_SetConfig+0x114>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00f      	beq.n	8004b2c <TIM_OC2_SetConfig+0xc0>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8004b88 <TIM_OC2_SetConfig+0x11c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00b      	beq.n	8004b2c <TIM_OC2_SetConfig+0xc0>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a1d      	ldr	r2, [pc, #116]	@ (8004b8c <TIM_OC2_SetConfig+0x120>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d007      	beq.n	8004b2c <TIM_OC2_SetConfig+0xc0>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8004b90 <TIM_OC2_SetConfig+0x124>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d003      	beq.n	8004b2c <TIM_OC2_SetConfig+0xc0>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a17      	ldr	r2, [pc, #92]	@ (8004b84 <TIM_OC2_SetConfig+0x118>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d113      	bne.n	8004b54 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	621a      	str	r2, [r3, #32]
}
 8004b6e:	bf00      	nop
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	40012c00 	.word	0x40012c00
 8004b80:	40013400 	.word	0x40013400
 8004b84:	40015000 	.word	0x40015000
 8004b88:	40014000 	.word	0x40014000
 8004b8c:	40014400 	.word	0x40014400
 8004b90:	40014800 	.word	0x40014800

08004b94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0303 	bic.w	r3, r3, #3
 8004bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	021b      	lsls	r3, r3, #8
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8004ca0 <TIM_OC3_SetConfig+0x10c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d007      	beq.n	8004c06 <TIM_OC3_SetConfig+0x72>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a2a      	ldr	r2, [pc, #168]	@ (8004ca4 <TIM_OC3_SetConfig+0x110>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d003      	beq.n	8004c06 <TIM_OC3_SetConfig+0x72>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a29      	ldr	r2, [pc, #164]	@ (8004ca8 <TIM_OC3_SetConfig+0x114>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d10d      	bne.n	8004c22 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a1e      	ldr	r2, [pc, #120]	@ (8004ca0 <TIM_OC3_SetConfig+0x10c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d013      	beq.n	8004c52 <TIM_OC3_SetConfig+0xbe>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ca4 <TIM_OC3_SetConfig+0x110>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d00f      	beq.n	8004c52 <TIM_OC3_SetConfig+0xbe>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a1d      	ldr	r2, [pc, #116]	@ (8004cac <TIM_OC3_SetConfig+0x118>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00b      	beq.n	8004c52 <TIM_OC3_SetConfig+0xbe>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8004cb0 <TIM_OC3_SetConfig+0x11c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d007      	beq.n	8004c52 <TIM_OC3_SetConfig+0xbe>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a1b      	ldr	r2, [pc, #108]	@ (8004cb4 <TIM_OC3_SetConfig+0x120>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d003      	beq.n	8004c52 <TIM_OC3_SetConfig+0xbe>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a16      	ldr	r2, [pc, #88]	@ (8004ca8 <TIM_OC3_SetConfig+0x114>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d113      	bne.n	8004c7a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	621a      	str	r2, [r3, #32]
}
 8004c94:	bf00      	nop
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	40012c00 	.word	0x40012c00
 8004ca4:	40013400 	.word	0x40013400
 8004ca8:	40015000 	.word	0x40015000
 8004cac:	40014000 	.word	0x40014000
 8004cb0:	40014400 	.word	0x40014400
 8004cb4:	40014800 	.word	0x40014800

08004cb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	021b      	lsls	r3, r3, #8
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	031b      	lsls	r3, r3, #12
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a2c      	ldr	r2, [pc, #176]	@ (8004dc8 <TIM_OC4_SetConfig+0x110>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d007      	beq.n	8004d2c <TIM_OC4_SetConfig+0x74>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a2b      	ldr	r2, [pc, #172]	@ (8004dcc <TIM_OC4_SetConfig+0x114>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d003      	beq.n	8004d2c <TIM_OC4_SetConfig+0x74>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a2a      	ldr	r2, [pc, #168]	@ (8004dd0 <TIM_OC4_SetConfig+0x118>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d10d      	bne.n	8004d48 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	031b      	lsls	r3, r3, #12
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8004dc8 <TIM_OC4_SetConfig+0x110>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <TIM_OC4_SetConfig+0xc0>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a1e      	ldr	r2, [pc, #120]	@ (8004dcc <TIM_OC4_SetConfig+0x114>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d00f      	beq.n	8004d78 <TIM_OC4_SetConfig+0xc0>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004dd4 <TIM_OC4_SetConfig+0x11c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00b      	beq.n	8004d78 <TIM_OC4_SetConfig+0xc0>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a1d      	ldr	r2, [pc, #116]	@ (8004dd8 <TIM_OC4_SetConfig+0x120>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d007      	beq.n	8004d78 <TIM_OC4_SetConfig+0xc0>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8004ddc <TIM_OC4_SetConfig+0x124>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d003      	beq.n	8004d78 <TIM_OC4_SetConfig+0xc0>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a17      	ldr	r2, [pc, #92]	@ (8004dd0 <TIM_OC4_SetConfig+0x118>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d113      	bne.n	8004da0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d7e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004d86:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	019b      	lsls	r3, r3, #6
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	019b      	lsls	r3, r3, #6
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	621a      	str	r2, [r3, #32]
}
 8004dba:	bf00      	nop
 8004dbc:	371c      	adds	r7, #28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40012c00 	.word	0x40012c00
 8004dcc:	40013400 	.word	0x40013400
 8004dd0:	40015000 	.word	0x40015000
 8004dd4:	40014000 	.word	0x40014000
 8004dd8:	40014400 	.word	0x40014400
 8004ddc:	40014800 	.word	0x40014800

08004de0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004e24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	041b      	lsls	r3, r3, #16
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a19      	ldr	r2, [pc, #100]	@ (8004e9c <TIM_OC5_SetConfig+0xbc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d013      	beq.n	8004e62 <TIM_OC5_SetConfig+0x82>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a18      	ldr	r2, [pc, #96]	@ (8004ea0 <TIM_OC5_SetConfig+0xc0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00f      	beq.n	8004e62 <TIM_OC5_SetConfig+0x82>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a17      	ldr	r2, [pc, #92]	@ (8004ea4 <TIM_OC5_SetConfig+0xc4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00b      	beq.n	8004e62 <TIM_OC5_SetConfig+0x82>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a16      	ldr	r2, [pc, #88]	@ (8004ea8 <TIM_OC5_SetConfig+0xc8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d007      	beq.n	8004e62 <TIM_OC5_SetConfig+0x82>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a15      	ldr	r2, [pc, #84]	@ (8004eac <TIM_OC5_SetConfig+0xcc>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d003      	beq.n	8004e62 <TIM_OC5_SetConfig+0x82>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a14      	ldr	r2, [pc, #80]	@ (8004eb0 <TIM_OC5_SetConfig+0xd0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d109      	bne.n	8004e76 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	021b      	lsls	r3, r3, #8
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	621a      	str	r2, [r3, #32]
}
 8004e90:	bf00      	nop
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	40012c00 	.word	0x40012c00
 8004ea0:	40013400 	.word	0x40013400
 8004ea4:	40014000 	.word	0x40014000
 8004ea8:	40014400 	.word	0x40014400
 8004eac:	40014800 	.word	0x40014800
 8004eb0:	40015000 	.word	0x40015000

08004eb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ee2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	021b      	lsls	r3, r3, #8
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004efa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	051b      	lsls	r3, r3, #20
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a1a      	ldr	r2, [pc, #104]	@ (8004f74 <TIM_OC6_SetConfig+0xc0>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d013      	beq.n	8004f38 <TIM_OC6_SetConfig+0x84>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a19      	ldr	r2, [pc, #100]	@ (8004f78 <TIM_OC6_SetConfig+0xc4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00f      	beq.n	8004f38 <TIM_OC6_SetConfig+0x84>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a18      	ldr	r2, [pc, #96]	@ (8004f7c <TIM_OC6_SetConfig+0xc8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00b      	beq.n	8004f38 <TIM_OC6_SetConfig+0x84>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a17      	ldr	r2, [pc, #92]	@ (8004f80 <TIM_OC6_SetConfig+0xcc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d007      	beq.n	8004f38 <TIM_OC6_SetConfig+0x84>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a16      	ldr	r2, [pc, #88]	@ (8004f84 <TIM_OC6_SetConfig+0xd0>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d003      	beq.n	8004f38 <TIM_OC6_SetConfig+0x84>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a15      	ldr	r2, [pc, #84]	@ (8004f88 <TIM_OC6_SetConfig+0xd4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d109      	bne.n	8004f4c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	029b      	lsls	r3, r3, #10
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	621a      	str	r2, [r3, #32]
}
 8004f66:	bf00      	nop
 8004f68:	371c      	adds	r7, #28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	40012c00 	.word	0x40012c00
 8004f78:	40013400 	.word	0x40013400
 8004f7c:	40014000 	.word	0x40014000
 8004f80:	40014400 	.word	0x40014400
 8004f84:	40014800 	.word	0x40014800
 8004f88:	40015000 	.word	0x40015000

08004f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	f023 0201 	bic.w	r2, r3, #1
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f023 030a 	bic.w	r3, r3, #10
 8004fc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	621a      	str	r2, [r3, #32]
}
 8004fde:	bf00      	nop
 8004fe0:	371c      	adds	r7, #28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b087      	sub	sp, #28
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	f023 0210 	bic.w	r2, r3, #16
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005014:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	031b      	lsls	r3, r3, #12
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005026:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800504a:	b480      	push	{r7}
 800504c:	b085      	sub	sp, #20
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005064:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4313      	orrs	r3, r2
 800506c:	f043 0307 	orr.w	r3, r3, #7
 8005070:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	609a      	str	r2, [r3, #8]
}
 8005078:	bf00      	nop
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800509e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	021a      	lsls	r2, r3, #8
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	609a      	str	r2, [r3, #8]
}
 80050b8:	bf00      	nop
 80050ba:	371c      	adds	r7, #28
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f003 031f 	and.w	r3, r3, #31
 80050d6:	2201      	movs	r2, #1
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1a      	ldr	r2, [r3, #32]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	43db      	mvns	r3, r3
 80050e6:	401a      	ands	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a1a      	ldr	r2, [r3, #32]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f003 031f 	and.w	r3, r3, #31
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	fa01 f303 	lsl.w	r3, r1, r3
 80050fc:	431a      	orrs	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	621a      	str	r2, [r3, #32]
}
 8005102:	bf00      	nop
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
	...

08005110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005124:	2302      	movs	r3, #2
 8005126:	e074      	b.n	8005212 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a34      	ldr	r2, [pc, #208]	@ (8005220 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d009      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a33      	ldr	r2, [pc, #204]	@ (8005224 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d004      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a31      	ldr	r2, [pc, #196]	@ (8005228 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d108      	bne.n	8005178 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800516c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800517e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005182:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a21      	ldr	r2, [pc, #132]	@ (8005220 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d022      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051a8:	d01d      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a1f      	ldr	r2, [pc, #124]	@ (800522c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d018      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005230 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d013      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005234 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00e      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a15      	ldr	r2, [pc, #84]	@ (8005224 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d009      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a18      	ldr	r2, [pc, #96]	@ (8005238 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d004      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a11      	ldr	r2, [pc, #68]	@ (8005228 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d10c      	bne.n	8005200 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40012c00 	.word	0x40012c00
 8005224:	40013400 	.word	0x40013400
 8005228:	40015000 	.word	0x40015000
 800522c:	40000400 	.word	0x40000400
 8005230:	40000800 	.word	0x40000800
 8005234:	40000c00 	.word	0x40000c00
 8005238:	40014000 	.word	0x40014000

0800523c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005246:	2300      	movs	r3, #0
 8005248:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005254:	2302      	movs	r3, #2
 8005256:	e078      	b.n	800534a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	041b      	lsls	r3, r3, #16
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005358 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d009      	beq.n	80052fe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a1b      	ldr	r2, [pc, #108]	@ (800535c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d004      	beq.n	80052fe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a19      	ldr	r2, [pc, #100]	@ (8005360 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d11c      	bne.n	8005338 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005308:	051b      	lsls	r3, r3, #20
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40012c00 	.word	0x40012c00
 800535c:	40013400 	.word	0x40013400
 8005360:	40015000 	.word	0x40015000

08005364 <memset>:
 8005364:	4402      	add	r2, r0
 8005366:	4603      	mov	r3, r0
 8005368:	4293      	cmp	r3, r2
 800536a:	d100      	bne.n	800536e <memset+0xa>
 800536c:	4770      	bx	lr
 800536e:	f803 1b01 	strb.w	r1, [r3], #1
 8005372:	e7f9      	b.n	8005368 <memset+0x4>

08005374 <__libc_init_array>:
 8005374:	b570      	push	{r4, r5, r6, lr}
 8005376:	4d0d      	ldr	r5, [pc, #52]	@ (80053ac <__libc_init_array+0x38>)
 8005378:	4c0d      	ldr	r4, [pc, #52]	@ (80053b0 <__libc_init_array+0x3c>)
 800537a:	1b64      	subs	r4, r4, r5
 800537c:	10a4      	asrs	r4, r4, #2
 800537e:	2600      	movs	r6, #0
 8005380:	42a6      	cmp	r6, r4
 8005382:	d109      	bne.n	8005398 <__libc_init_array+0x24>
 8005384:	4d0b      	ldr	r5, [pc, #44]	@ (80053b4 <__libc_init_array+0x40>)
 8005386:	4c0c      	ldr	r4, [pc, #48]	@ (80053b8 <__libc_init_array+0x44>)
 8005388:	f000 f818 	bl	80053bc <_init>
 800538c:	1b64      	subs	r4, r4, r5
 800538e:	10a4      	asrs	r4, r4, #2
 8005390:	2600      	movs	r6, #0
 8005392:	42a6      	cmp	r6, r4
 8005394:	d105      	bne.n	80053a2 <__libc_init_array+0x2e>
 8005396:	bd70      	pop	{r4, r5, r6, pc}
 8005398:	f855 3b04 	ldr.w	r3, [r5], #4
 800539c:	4798      	blx	r3
 800539e:	3601      	adds	r6, #1
 80053a0:	e7ee      	b.n	8005380 <__libc_init_array+0xc>
 80053a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a6:	4798      	blx	r3
 80053a8:	3601      	adds	r6, #1
 80053aa:	e7f2      	b.n	8005392 <__libc_init_array+0x1e>
 80053ac:	080053e4 	.word	0x080053e4
 80053b0:	080053e4 	.word	0x080053e4
 80053b4:	080053e4 	.word	0x080053e4
 80053b8:	080053e8 	.word	0x080053e8

080053bc <_init>:
 80053bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053be:	bf00      	nop
 80053c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c2:	bc08      	pop	{r3}
 80053c4:	469e      	mov	lr, r3
 80053c6:	4770      	bx	lr

080053c8 <_fini>:
 80053c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ca:	bf00      	nop
 80053cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ce:	bc08      	pop	{r3}
 80053d0:	469e      	mov	lr, r3
 80053d2:	4770      	bx	lr
