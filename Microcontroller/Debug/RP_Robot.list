
RP_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006620  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080067f8  080067f8  000077f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006808  08006808  00008014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006808  08006808  00008014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006808  08006808  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006808  08006808  00007808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800680c  0800680c  0000780c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006810  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000018  08006824  00008018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08006824  0000831c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122bd  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002701  00000000  00000000  0001a301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  0001ca08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e21  00000000  00000000  0001dc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283b4  00000000  00000000  0001ea79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a0d  00000000  00000000  00046e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e99d  00000000  00000000  0005a83a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001691d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005080  00000000  00000000  0016921c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0016e29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080067e0 	.word	0x080067e0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	080067e0 	.word	0x080067e0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb8:	f001 f973 	bl	8001ea2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bbc:	f000 f876 	bl	8000cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc0:	f000 fb84 	bl	80012cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000bc4:	f000 fb58 	bl	8001278 <MX_DMA_Init>
  MX_TIM1_Init();
 8000bc8:	f000 f944 	bl	8000e54 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000bcc:	f000 fa58 	bl	8001080 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000bd0:	f000 faac 	bl	800112c <MX_TIM4_Init>
  MX_ADC1_Init();
 8000bd4:	f000 f8b6 	bl	8000d44 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000bd8:	f000 fa04 	bl	8000fe4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000bdc:	f000 fafc 	bl	80011d8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

	// Setup PWM Generator
	HAL_TIM_Base_Start(&htim1);
 8000be0:	4827      	ldr	r0, [pc, #156]	@ (8000c80 <main+0xcc>)
 8000be2:	f003 ffb3 	bl	8004b4c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000be6:	2100      	movs	r1, #0
 8000be8:	4825      	ldr	r0, [pc, #148]	@ (8000c80 <main+0xcc>)
 8000bea:	f004 f8f9 	bl	8004de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000bee:	2104      	movs	r1, #4
 8000bf0:	4823      	ldr	r0, [pc, #140]	@ (8000c80 <main+0xcc>)
 8000bf2:	f004 f8f5 	bl	8004de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000bf6:	2108      	movs	r1, #8
 8000bf8:	4821      	ldr	r0, [pc, #132]	@ (8000c80 <main+0xcc>)
 8000bfa:	f004 f8f1 	bl	8004de0 <HAL_TIM_PWM_Start>

	// Setup Encoder
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000bfe:	213c      	movs	r1, #60	@ 0x3c
 8000c00:	4820      	ldr	r0, [pc, #128]	@ (8000c84 <main+0xd0>)
 8000c02:	f004 faa5 	bl	8005150 <HAL_TIM_Encoder_Start>
	prismatic_raw_encoder_val = __HAL_TIM_GET_COUNTER(&htim4);
 8000c06:	4b1f      	ldr	r3, [pc, #124]	@ (8000c84 <main+0xd0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c88 <main+0xd4>)
 8000c10:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000c12:	213c      	movs	r1, #60	@ 0x3c
 8000c14:	481d      	ldr	r0, [pc, #116]	@ (8000c8c <main+0xd8>)
 8000c16:	f004 fa9b 	bl	8005150 <HAL_TIM_Encoder_Start>
	revolute_raw_encoder_val = __HAL_TIM_GET_COUNTER(&htim3);
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c8c <main+0xd8>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b1b      	ldr	r3, [pc, #108]	@ (8000c90 <main+0xdc>)
 8000c24:	601a      	str	r2, [r3, #0]

	// Setup Timer 2 for sensor reading
	HAL_TIM_Base_Start_IT(&htim2);
 8000c26:	481b      	ldr	r0, [pc, #108]	@ (8000c94 <main+0xe0>)
 8000c28:	f004 f800 	bl	8004c2c <HAL_TIM_Base_Start_IT>

	// Setup Timer 5 for Main Process
	HAL_TIM_Base_Start_IT(&htim5);
 8000c2c:	481a      	ldr	r0, [pc, #104]	@ (8000c98 <main+0xe4>)
 8000c2e:	f003 fffd 	bl	8004c2c <HAL_TIM_Base_Start_IT>

	//PID
	PID.Kp = prismatic_Kp;
 8000c32:	4b1a      	ldr	r3, [pc, #104]	@ (8000c9c <main+0xe8>)
 8000c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c38:	4610      	mov	r0, r2
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f7ff ff6a 	bl	8000b14 <__aeabi_d2f>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4a17      	ldr	r2, [pc, #92]	@ (8000ca0 <main+0xec>)
 8000c44:	6193      	str	r3, [r2, #24]
	PID.Ki = prismatic_Ki;
 8000c46:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <main+0xf0>)
 8000c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4c:	4610      	mov	r0, r2
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f7ff ff60 	bl	8000b14 <__aeabi_d2f>
 8000c54:	4603      	mov	r3, r0
 8000c56:	4a12      	ldr	r2, [pc, #72]	@ (8000ca0 <main+0xec>)
 8000c58:	61d3      	str	r3, [r2, #28]
	PID.Kd = prismatic_Kd;
 8000c5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <main+0xf4>)
 8000c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c60:	4610      	mov	r0, r2
 8000c62:	4619      	mov	r1, r3
 8000c64:	f7ff ff56 	bl	8000b14 <__aeabi_d2f>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca0 <main+0xec>)
 8000c6c:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 0);
 8000c6e:	2100      	movs	r1, #0
 8000c70:	480b      	ldr	r0, [pc, #44]	@ (8000ca0 <main+0xec>)
 8000c72:	f005 fd53 	bl	800671c <arm_pid_init_f32>

	SetHomePrismatic();
 8000c76:	f000 fbd9 	bl	800142c <SetHomePrismatic>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000c7a:	bf00      	nop
 8000c7c:	e7fd      	b.n	8000c7a <main+0xc6>
 8000c7e:	bf00      	nop
 8000c80:	20000100 	.word	0x20000100
 8000c84:	200001e4 	.word	0x200001e4
 8000c88:	20000280 	.word	0x20000280
 8000c8c:	20000198 	.word	0x20000198
 8000c90:	200002e8 	.word	0x200002e8
 8000c94:	2000014c 	.word	0x2000014c
 8000c98:	20000230 	.word	0x20000230
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	200002a8 	.word	0x200002a8
 8000ca4:	200002d8 	.word	0x200002d8
 8000ca8:	200002e0 	.word	0x200002e0

08000cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b094      	sub	sp, #80	@ 0x50
 8000cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb2:	f107 0318 	add.w	r3, r7, #24
 8000cb6:	2238      	movs	r2, #56	@ 0x38
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f005 fd64 	bl	8006788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f002 feec 	bl	8003aac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cde:	2340      	movs	r3, #64	@ 0x40
 8000ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000cea:	2304      	movs	r3, #4
 8000cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000cee:	2355      	movs	r3, #85	@ 0x55
 8000cf0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfe:	f107 0318 	add.w	r3, r7, #24
 8000d02:	4618      	mov	r0, r3
 8000d04:	f002 ff86 	bl	8003c14 <HAL_RCC_OscConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d0e:	f000 fe59 	bl	80019c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d12:	230f      	movs	r3, #15
 8000d14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d16:	2303      	movs	r3, #3
 8000d18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2104      	movs	r1, #4
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f003 fa84 	bl	8004238 <HAL_RCC_ClockConfig>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d36:	f000 fe45 	bl	80019c4 <Error_Handler>
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	3750      	adds	r7, #80	@ 0x50
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08c      	sub	sp, #48	@ 0x30
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2220      	movs	r2, #32
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f005 fd13 	bl	8006788 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d62:	4b39      	ldr	r3, [pc, #228]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000d64:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d6a:	4b37      	ldr	r3, [pc, #220]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000d6c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000d70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d72:	4b35      	ldr	r3, [pc, #212]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d78:	4b33      	ldr	r3, [pc, #204]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d7e:	4b32      	ldr	r3, [pc, #200]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d84:	4b30      	ldr	r3, [pc, #192]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000d8c:	2204      	movs	r2, #4
 8000d8e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d90:	4b2d      	ldr	r3, [pc, #180]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d96:	4b2c      	ldr	r3, [pc, #176]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000d9e:	2202      	movs	r2, #2
 8000da0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da2:	4b29      	ldr	r3, [pc, #164]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000daa:	4b27      	ldr	r3, [pc, #156]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db0:	4b25      	ldr	r3, [pc, #148]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000db6:	4b24      	ldr	r3, [pc, #144]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dbe:	4b22      	ldr	r3, [pc, #136]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000dc4:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dcc:	481e      	ldr	r0, [pc, #120]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000dce:	f001 faaf 	bl	8002330 <HAL_ADC_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000dd8:	f000 fdf4 	bl	80019c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000de0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	4818      	ldr	r0, [pc, #96]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000de8:	f002 f8c4 	bl	8002f74 <HAL_ADCEx_MultiModeConfigChannel>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000df2:	f000 fde7 	bl	80019c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <MX_ADC1_Init+0x108>)
 8000df8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dfa:	2306      	movs	r3, #6
 8000dfc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000dfe:	2307      	movs	r3, #7
 8000e00:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e02:	237f      	movs	r3, #127	@ 0x7f
 8000e04:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e06:	2304      	movs	r3, #4
 8000e08:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	4619      	mov	r1, r3
 8000e12:	480d      	ldr	r0, [pc, #52]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000e14:	f001 fc48 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000e1e:	f000 fdd1 	bl	80019c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <MX_ADC1_Init+0x10c>)
 8000e24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e26:	230c      	movs	r3, #12
 8000e28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4806      	ldr	r0, [pc, #24]	@ (8000e48 <MX_ADC1_Init+0x104>)
 8000e30:	f001 fc3a 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000e3a:	f000 fdc3 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	3730      	adds	r7, #48	@ 0x30
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000034 	.word	0x20000034
 8000e4c:	1d500080 	.word	0x1d500080
 8000e50:	21800100 	.word	0x21800100

08000e54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b09c      	sub	sp, #112	@ 0x70
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e74:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
 8000e84:	615a      	str	r2, [r3, #20]
 8000e86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	2234      	movs	r2, #52	@ 0x34
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f005 fc7a 	bl	8006788 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e94:	4b51      	ldr	r3, [pc, #324]	@ (8000fdc <MX_TIM1_Init+0x188>)
 8000e96:	4a52      	ldr	r2, [pc, #328]	@ (8000fe0 <MX_TIM1_Init+0x18c>)
 8000e98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000e9a:	4b50      	ldr	r3, [pc, #320]	@ (8000fdc <MX_TIM1_Init+0x188>)
 8000e9c:	22a9      	movs	r2, #169	@ 0xa9
 8000e9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea0:	4b4e      	ldr	r3, [pc, #312]	@ (8000fdc <MX_TIM1_Init+0x188>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000ea6:	4b4d      	ldr	r3, [pc, #308]	@ (8000fdc <MX_TIM1_Init+0x188>)
 8000ea8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000eac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eae:	4b4b      	ldr	r3, [pc, #300]	@ (8000fdc <MX_TIM1_Init+0x188>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eb4:	4b49      	ldr	r3, [pc, #292]	@ (8000fdc <MX_TIM1_Init+0x188>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eba:	4b48      	ldr	r3, [pc, #288]	@ (8000fdc <MX_TIM1_Init+0x188>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ec0:	4846      	ldr	r0, [pc, #280]	@ (8000fdc <MX_TIM1_Init+0x188>)
 8000ec2:	f003 fdeb 	bl	8004a9c <HAL_TIM_Base_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ecc:	f000 fd7a 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ed6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000eda:	4619      	mov	r1, r3
 8000edc:	483f      	ldr	r0, [pc, #252]	@ (8000fdc <MX_TIM1_Init+0x188>)
 8000ede:	f004 fccf 	bl	8005880 <HAL_TIM_ConfigClockSource>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ee8:	f000 fd6c 	bl	80019c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eec:	483b      	ldr	r0, [pc, #236]	@ (8000fdc <MX_TIM1_Init+0x188>)
 8000eee:	f003 ff15 	bl	8004d1c <HAL_TIM_PWM_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ef8:	f000 fd64 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f00:	2300      	movs	r3, #0
 8000f02:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4833      	ldr	r0, [pc, #204]	@ (8000fdc <MX_TIM1_Init+0x188>)
 8000f10:	f005 fa94 	bl	800643c <HAL_TIMEx_MasterConfigSynchronization>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000f1a:	f000 fd53 	bl	80019c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f1e:	2360      	movs	r3, #96	@ 0x60
 8000f20:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f26:	2300      	movs	r3, #0
 8000f28:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f36:	2300      	movs	r3, #0
 8000f38:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f3a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f3e:	2200      	movs	r2, #0
 8000f40:	4619      	mov	r1, r3
 8000f42:	4826      	ldr	r0, [pc, #152]	@ (8000fdc <MX_TIM1_Init+0x188>)
 8000f44:	f004 fb88 	bl	8005658 <HAL_TIM_PWM_ConfigChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000f4e:	f000 fd39 	bl	80019c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f52:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f56:	2204      	movs	r2, #4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4820      	ldr	r0, [pc, #128]	@ (8000fdc <MX_TIM1_Init+0x188>)
 8000f5c:	f004 fb7c 	bl	8005658 <HAL_TIM_PWM_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000f66:	f000 fd2d 	bl	80019c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f6a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f6e:	2208      	movs	r2, #8
 8000f70:	4619      	mov	r1, r3
 8000f72:	481a      	ldr	r0, [pc, #104]	@ (8000fdc <MX_TIM1_Init+0x188>)
 8000f74:	f004 fb70 	bl	8005658 <HAL_TIM_PWM_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000f7e:	f000 fd21 	bl	80019c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f9a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fa8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4807      	ldr	r0, [pc, #28]	@ (8000fdc <MX_TIM1_Init+0x188>)
 8000fc0:	f005 fad2 	bl	8006568 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000fca:	f000 fcfb 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fce:	4803      	ldr	r0, [pc, #12]	@ (8000fdc <MX_TIM1_Init+0x188>)
 8000fd0:	f000 fe7e 	bl	8001cd0 <HAL_TIM_MspPostInit>

}
 8000fd4:	bf00      	nop
 8000fd6:	3770      	adds	r7, #112	@ 0x70
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000100 	.word	0x20000100
 8000fe0:	40012c00 	.word	0x40012c00

08000fe4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001002:	4b1e      	ldr	r3, [pc, #120]	@ (800107c <MX_TIM2_Init+0x98>)
 8001004:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001008:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800100a:	4b1c      	ldr	r3, [pc, #112]	@ (800107c <MX_TIM2_Init+0x98>)
 800100c:	22a9      	movs	r2, #169	@ 0xa9
 800100e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001010:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <MX_TIM2_Init+0x98>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <MX_TIM2_Init+0x98>)
 8001018:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800101c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101e:	4b17      	ldr	r3, [pc, #92]	@ (800107c <MX_TIM2_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001024:	4b15      	ldr	r3, [pc, #84]	@ (800107c <MX_TIM2_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800102a:	4814      	ldr	r0, [pc, #80]	@ (800107c <MX_TIM2_Init+0x98>)
 800102c:	f003 fd36 	bl	8004a9c <HAL_TIM_Base_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001036:	f000 fcc5 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800103e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	4619      	mov	r1, r3
 8001046:	480d      	ldr	r0, [pc, #52]	@ (800107c <MX_TIM2_Init+0x98>)
 8001048:	f004 fc1a 	bl	8005880 <HAL_TIM_ConfigClockSource>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001052:	f000 fcb7 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	4619      	mov	r1, r3
 8001062:	4806      	ldr	r0, [pc, #24]	@ (800107c <MX_TIM2_Init+0x98>)
 8001064:	f005 f9ea 	bl	800643c <HAL_TIMEx_MasterConfigSynchronization>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800106e:	f000 fca9 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	3720      	adds	r7, #32
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2000014c 	.word	0x2000014c

08001080 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	@ 0x30
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	2224      	movs	r2, #36	@ 0x24
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f005 fb7a 	bl	8006788 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001094:	463b      	mov	r3, r7
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800109e:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <MX_TIM3_Init+0xa4>)
 80010a0:	4a21      	ldr	r2, [pc, #132]	@ (8001128 <MX_TIM3_Init+0xa8>)
 80010a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <MX_TIM3_Init+0xa4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001124 <MX_TIM3_Init+0xa4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <MX_TIM3_Init+0xa4>)
 80010b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <MX_TIM3_Init+0xa4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <MX_TIM3_Init+0xa4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010c4:	2303      	movs	r3, #3
 80010c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010cc:	2301      	movs	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010dc:	2301      	movs	r3, #1
 80010de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	4619      	mov	r1, r3
 80010ee:	480d      	ldr	r0, [pc, #52]	@ (8001124 <MX_TIM3_Init+0xa4>)
 80010f0:	f003 ff88 	bl	8005004 <HAL_TIM_Encoder_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80010fa:	f000 fc63 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	@ (8001124 <MX_TIM3_Init+0xa4>)
 800110c:	f005 f996 	bl	800643c <HAL_TIMEx_MasterConfigSynchronization>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001116:	f000 fc55 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	3730      	adds	r7, #48	@ 0x30
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000198 	.word	0x20000198
 8001128:	40000400 	.word	0x40000400

0800112c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08c      	sub	sp, #48	@ 0x30
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	2224      	movs	r2, #36	@ 0x24
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f005 fb24 	bl	8006788 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800114a:	4b21      	ldr	r3, [pc, #132]	@ (80011d0 <MX_TIM4_Init+0xa4>)
 800114c:	4a21      	ldr	r2, [pc, #132]	@ (80011d4 <MX_TIM4_Init+0xa8>)
 800114e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001150:	4b1f      	ldr	r3, [pc, #124]	@ (80011d0 <MX_TIM4_Init+0xa4>)
 8001152:	2200      	movs	r2, #0
 8001154:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	4b1e      	ldr	r3, [pc, #120]	@ (80011d0 <MX_TIM4_Init+0xa4>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800115c:	4b1c      	ldr	r3, [pc, #112]	@ (80011d0 <MX_TIM4_Init+0xa4>)
 800115e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001162:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001164:	4b1a      	ldr	r3, [pc, #104]	@ (80011d0 <MX_TIM4_Init+0xa4>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116a:	4b19      	ldr	r3, [pc, #100]	@ (80011d0 <MX_TIM4_Init+0xa4>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001170:	2303      	movs	r3, #3
 8001172:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001178:	2301      	movs	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001188:	2301      	movs	r3, #1
 800118a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	4619      	mov	r1, r3
 800119a:	480d      	ldr	r0, [pc, #52]	@ (80011d0 <MX_TIM4_Init+0xa4>)
 800119c:	f003 ff32 	bl	8005004 <HAL_TIM_Encoder_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80011a6:	f000 fc0d 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	@ (80011d0 <MX_TIM4_Init+0xa4>)
 80011b8:	f005 f940 	bl	800643c <HAL_TIMEx_MasterConfigSynchronization>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80011c2:	f000 fbff 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3730      	adds	r7, #48	@ 0x30
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200001e4 	.word	0x200001e4
 80011d4:	40000800 	.word	0x40000800

080011d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001270 <MX_TIM5_Init+0x98>)
 80011f8:	4a1e      	ldr	r2, [pc, #120]	@ (8001274 <MX_TIM5_Init+0x9c>)
 80011fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1699;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001270 <MX_TIM5_Init+0x98>)
 80011fe:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001202:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001204:	4b1a      	ldr	r3, [pc, #104]	@ (8001270 <MX_TIM5_Init+0x98>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800120a:	4b19      	ldr	r3, [pc, #100]	@ (8001270 <MX_TIM5_Init+0x98>)
 800120c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001210:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001212:	4b17      	ldr	r3, [pc, #92]	@ (8001270 <MX_TIM5_Init+0x98>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001218:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <MX_TIM5_Init+0x98>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800121e:	4814      	ldr	r0, [pc, #80]	@ (8001270 <MX_TIM5_Init+0x98>)
 8001220:	f003 fc3c 	bl	8004a9c <HAL_TIM_Base_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800122a:	f000 fbcb 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001232:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	4619      	mov	r1, r3
 800123a:	480d      	ldr	r0, [pc, #52]	@ (8001270 <MX_TIM5_Init+0x98>)
 800123c:	f004 fb20 	bl	8005880 <HAL_TIM_ConfigClockSource>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001246:	f000 fbbd 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	4619      	mov	r1, r3
 8001256:	4806      	ldr	r0, [pc, #24]	@ (8001270 <MX_TIM5_Init+0x98>)
 8001258:	f005 f8f0 	bl	800643c <HAL_TIMEx_MasterConfigSynchronization>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001262:	f000 fbaf 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	3720      	adds	r7, #32
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000230 	.word	0x20000230
 8001274:	40000c00 	.word	0x40000c00

08001278 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800127e:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <MX_DMA_Init+0x50>)
 8001280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001282:	4a11      	ldr	r2, [pc, #68]	@ (80012c8 <MX_DMA_Init+0x50>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	6493      	str	r3, [r2, #72]	@ 0x48
 800128a:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <MX_DMA_Init+0x50>)
 800128c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001296:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <MX_DMA_Init+0x50>)
 8001298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800129a:	4a0b      	ldr	r2, [pc, #44]	@ (80012c8 <MX_DMA_Init+0x50>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80012a2:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <MX_DMA_Init+0x50>)
 80012a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	200b      	movs	r0, #11
 80012b4:	f002 f841 	bl	800333a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012b8:	200b      	movs	r0, #11
 80012ba:	f002 f858 	bl	800336e <HAL_NVIC_EnableIRQ>

}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000

080012cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	@ 0x28
 80012d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001420 <MX_GPIO_Init+0x154>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e6:	4a4e      	ldr	r2, [pc, #312]	@ (8001420 <MX_GPIO_Init+0x154>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001420 <MX_GPIO_Init+0x154>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012fa:	4b49      	ldr	r3, [pc, #292]	@ (8001420 <MX_GPIO_Init+0x154>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	4a48      	ldr	r2, [pc, #288]	@ (8001420 <MX_GPIO_Init+0x154>)
 8001300:	f043 0320 	orr.w	r3, r3, #32
 8001304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001306:	4b46      	ldr	r3, [pc, #280]	@ (8001420 <MX_GPIO_Init+0x154>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	f003 0320 	and.w	r3, r3, #32
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	4b43      	ldr	r3, [pc, #268]	@ (8001420 <MX_GPIO_Init+0x154>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	4a42      	ldr	r2, [pc, #264]	@ (8001420 <MX_GPIO_Init+0x154>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131e:	4b40      	ldr	r3, [pc, #256]	@ (8001420 <MX_GPIO_Init+0x154>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	4b3d      	ldr	r3, [pc, #244]	@ (8001420 <MX_GPIO_Init+0x154>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132e:	4a3c      	ldr	r2, [pc, #240]	@ (8001420 <MX_GPIO_Init+0x154>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001336:	4b3a      	ldr	r3, [pc, #232]	@ (8001420 <MX_GPIO_Init+0x154>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	2120      	movs	r1, #32
 8001346:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800134a:	f002 fb7f 	bl	8003a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR_Driver_1_Pin|Dir_Driver_2_Pin, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	21c0      	movs	r1, #192	@ 0xc0
 8001352:	4834      	ldr	r0, [pc, #208]	@ (8001424 <MX_GPIO_Init+0x158>)
 8001354:	f002 fb7a 	bl	8003a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EMERGENCY_Pin JOY_BUTTON_Pin QEI_1_X_Pin */
  GPIO_InitStruct.Pin = EMERGENCY_Pin|JOY_BUTTON_Pin|QEI_1_X_Pin;
 8001358:	2319      	movs	r3, #25
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800135c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	482d      	ldr	r0, [pc, #180]	@ (8001424 <MX_GPIO_Init+0x158>)
 800136e:	f002 f9d3 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001372:	230c      	movs	r3, #12
 8001374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001382:	230c      	movs	r3, #12
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001390:	f002 f9c2 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001394:	2320      	movs	r3, #32
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	2301      	movs	r3, #1
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ae:	f002 f9b3 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prismatic_right_limit_Pin Prismatic_left_limit_Pin */
  GPIO_InitStruct.Pin = Prismatic_right_limit_Pin|Prismatic_left_limit_Pin;
 80013b2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013b8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80013bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	4817      	ldr	r0, [pc, #92]	@ (8001428 <MX_GPIO_Init+0x15c>)
 80013ca:	f002 f9a5 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pins : step_one_plotter_Pin step_two_plotter_Pin */
  GPIO_InitStruct.Pin = step_one_plotter_Pin|step_two_plotter_Pin;
 80013ce:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80013d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	4810      	ldr	r0, [pc, #64]	@ (8001428 <MX_GPIO_Init+0x15c>)
 80013e6:	f002 f997 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Driver_1_Pin Dir_Driver_2_Pin */
  GPIO_InitStruct.Pin = DIR_Driver_1_Pin|Dir_Driver_2_Pin;
 80013ea:	23c0      	movs	r3, #192	@ 0xc0
 80013ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ee:	2301      	movs	r3, #1
 80013f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4619      	mov	r1, r3
 8001400:	4808      	ldr	r0, [pc, #32]	@ (8001424 <MX_GPIO_Init+0x158>)
 8001402:	f002 f989 	bl	8003718 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2100      	movs	r1, #0
 800140a:	2028      	movs	r0, #40	@ 0x28
 800140c:	f001 ff95 	bl	800333a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001410:	2028      	movs	r0, #40	@ 0x28
 8001412:	f001 ffac 	bl	800336e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001416:	bf00      	nop
 8001418:	3728      	adds	r7, #40	@ 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000
 8001424:	48000800 	.word	0x48000800
 8001428:	48000400 	.word	0x48000400

0800142c <SetHomePrismatic>:

/* USER CODE BEGIN 4 */

// Set Prismatic to home
void SetHomePrismatic() {
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	while (prismatic_left_sw == false) {
 8001430:	e003      	b.n	800143a <SetHomePrismatic+0xe>
		PrismaticMotorControl(30, 1);
 8001432:	2101      	movs	r1, #1
 8001434:	201e      	movs	r0, #30
 8001436:	f000 f82b 	bl	8001490 <PrismaticMotorControl>
	while (prismatic_left_sw == false) {
 800143a:	4b10      	ldr	r3, [pc, #64]	@ (800147c <SetHomePrismatic+0x50>)
 800143c:	f993 3000 	ldrsb.w	r3, [r3]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f6      	beq.n	8001432 <SetHomePrismatic+0x6>
	}
	PrismaticMotorControl(0, 0);
 8001444:	2100      	movs	r1, #0
 8001446:	2000      	movs	r0, #0
 8001448:	f000 f822 	bl	8001490 <PrismaticMotorControl>

	//reset encoder val
	HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_ALL);
 800144c:	213c      	movs	r1, #60	@ 0x3c
 800144e:	480c      	ldr	r0, [pc, #48]	@ (8001480 <SetHomePrismatic+0x54>)
 8001450:	f003 ff0c 	bl	800526c <HAL_TIM_Encoder_Stop>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001454:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <SetHomePrismatic+0x54>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_raw_encoder_val = 0;
 800145c:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <SetHomePrismatic+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
	prismatic_raw_encoder_prev = 0;
 8001462:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <SetHomePrismatic+0x5c>)
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
	prismatic_encoder_val = 0;
 8001468:	4b08      	ldr	r3, [pc, #32]	@ (800148c <SetHomePrismatic+0x60>)
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800146e:	213c      	movs	r1, #60	@ 0x3c
 8001470:	4803      	ldr	r0, [pc, #12]	@ (8001480 <SetHomePrismatic+0x54>)
 8001472:	f003 fe6d 	bl	8005150 <HAL_TIM_Encoder_Start>
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000027c 	.word	0x2000027c
 8001480:	200001e4 	.word	0x200001e4
 8001484:	20000280 	.word	0x20000280
 8001488:	20000284 	.word	0x20000284
 800148c:	20000288 	.word	0x20000288

08001490 <PrismaticMotorControl>:

void PrismaticMotorControl(int speed, int dir) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af02      	add	r7, sp, #8
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
	// Saturation
	speed = (speed > 100) ? 100 : speed;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b64      	cmp	r3, #100	@ 0x64
 800149e:	bfa8      	it	ge
 80014a0:	2364      	movge	r3, #100	@ 0x64
 80014a2:	607b      	str	r3, [r7, #4]

	if (dir == 0) {
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d105      	bne.n	80014b6 <PrismaticMotorControl+0x26>
		// Set motor2 direction to ___
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2180      	movs	r1, #128	@ 0x80
 80014ae:	480d      	ldr	r0, [pc, #52]	@ (80014e4 <PrismaticMotorControl+0x54>)
 80014b0:	f002 facc 	bl	8003a4c <HAL_GPIO_WritePin>
 80014b4:	e004      	b.n	80014c0 <PrismaticMotorControl+0x30>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80014b6:	2201      	movs	r2, #1
 80014b8:	2180      	movs	r1, #128	@ 0x80
 80014ba:	480a      	ldr	r0, [pc, #40]	@ (80014e4 <PrismaticMotorControl+0x54>)
 80014bc:	f002 fac6 	bl	8003a4c <HAL_GPIO_WritePin>
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, map(speed, 0, 100, 0, 19999));
 80014c0:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	2300      	movs	r3, #0
 80014c8:	2264      	movs	r2, #100	@ 0x64
 80014ca:	2100      	movs	r1, #0
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f97b 	bl	80017c8 <map>
 80014d2:	4602      	mov	r2, r0
 80014d4:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <PrismaticMotorControl+0x58>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	48000800 	.word	0x48000800
 80014e8:	20000100 	.word	0x20000100

080014ec <PrismaticPIDControl>:

void PrismaticPIDControl(double set_point) {
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b08b      	sub	sp, #44	@ 0x2c
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	ed87 0b00 	vstr	d0, [r7]
	double position = (prismatic_encoder_val * 16.00) / 8192.00;
 80014f6:	4b47      	ldr	r3, [pc, #284]	@ (8001614 <PrismaticPIDControl+0x128>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe ffde 	bl	80004bc <__aeabi_i2d>
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	4b44      	ldr	r3, [pc, #272]	@ (8001618 <PrismaticPIDControl+0x12c>)
 8001506:	f7ff f843 	bl	8000590 <__aeabi_dmul>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	4b41      	ldr	r3, [pc, #260]	@ (800161c <PrismaticPIDControl+0x130>)
 8001518:	f7ff f964 	bl	80007e4 <__aeabi_ddiv>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double speed = arm_pid_f32(&PID, set_point - position);
 8001524:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001528:	e9d7 0100 	ldrd	r0, r1, [r7]
 800152c:	f7fe fe78 	bl	8000220 <__aeabi_dsub>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff faec 	bl	8000b14 <__aeabi_d2f>
 800153c:	4603      	mov	r3, r0
 800153e:	4a38      	ldr	r2, [pc, #224]	@ (8001620 <PrismaticPIDControl+0x134>)
 8001540:	613a      	str	r2, [r7, #16]
 8001542:	60fb      	str	r3, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	ed93 7a00 	vldr	s14, [r3]
 800154a:	edd7 7a03 	vldr	s15, [r7, #12]
 800154e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	edd3 6a01 	vldr	s13, [r3, #4]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	edd3 7a03 	vldr	s15, [r3, #12]
 800155e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001562:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	edd3 6a02 	vldr	s13, [r3, #8]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001576:	ee37 7a27 	vadd.f32	s14, s14, s15
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001584:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe ff9e 	bl	80004e0 <__aeabi_f2d>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	prismatic_error = set_point - position;
 80015ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015b4:	f7fe fe34 	bl	8000220 <__aeabi_dsub>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4919      	ldr	r1, [pc, #100]	@ (8001624 <PrismaticPIDControl+0x138>)
 80015be:	e9c1 2300 	strd	r2, r3, [r1]
	prismatic_feedback = speed;
 80015c2:	4919      	ldr	r1, [pc, #100]	@ (8001628 <PrismaticPIDControl+0x13c>)
 80015c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015c8:	e9c1 2300 	strd	r2, r3, [r1]
	int dir = (speed > 0) ? 0 : 1;
 80015cc:	2301      	movs	r3, #1
 80015ce:	461c      	mov	r4, r3
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015dc:	f7ff fa68 	bl	8000ab0 <__aeabi_dcmpgt>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <PrismaticPIDControl+0xfe>
 80015e6:	2300      	movs	r3, #0
 80015e8:	461c      	mov	r4, r3
 80015ea:	b2e3      	uxtb	r3, r4
 80015ec:	f083 0301 	eor.w	r3, r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	617b      	str	r3, [r7, #20]
	PrismaticMotorControl(abs(speed), dir);
 80015f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015f8:	f7ff fa64 	bl	8000ac4 <__aeabi_d2iz>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bfb8      	it	lt
 8001602:	425b      	neglt	r3, r3
 8001604:	6979      	ldr	r1, [r7, #20]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff42 	bl	8001490 <PrismaticMotorControl>
}
 800160c:	bf00      	nop
 800160e:	372c      	adds	r7, #44	@ 0x2c
 8001610:	46bd      	mov	sp, r7
 8001612:	bd90      	pop	{r4, r7, pc}
 8001614:	20000288 	.word	0x20000288
 8001618:	40300000 	.word	0x40300000
 800161c:	40c00000 	.word	0x40c00000
 8001620:	200002a8 	.word	0x200002a8
 8001624:	20000298 	.word	0x20000298
 8001628:	200002a0 	.word	0x200002a0

0800162c <RevoluteMotorControl>:

void SetHomeRevolute() {

}

void RevoluteMotorControl(int speed, int dir) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af02      	add	r7, sp, #8
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
	// Saturation
	speed = (speed > 100) ? 100 : speed;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b64      	cmp	r3, #100	@ 0x64
 800163a:	bfa8      	it	ge
 800163c:	2364      	movge	r3, #100	@ 0x64
 800163e:	607b      	str	r3, [r7, #4]

	if (dir == 0) {
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d105      	bne.n	8001652 <RevoluteMotorControl+0x26>
		// Set motor2 direction to ___
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	2140      	movs	r1, #64	@ 0x40
 800164a:	480d      	ldr	r0, [pc, #52]	@ (8001680 <RevoluteMotorControl+0x54>)
 800164c:	f002 f9fe 	bl	8003a4c <HAL_GPIO_WritePin>
 8001650:	e004      	b.n	800165c <RevoluteMotorControl+0x30>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001652:	2201      	movs	r2, #1
 8001654:	2140      	movs	r1, #64	@ 0x40
 8001656:	480a      	ldr	r0, [pc, #40]	@ (8001680 <RevoluteMotorControl+0x54>)
 8001658:	f002 f9f8 	bl	8003a4c <HAL_GPIO_WritePin>
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, map(speed, 0, 100, 0, 19999));
 800165c:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2300      	movs	r3, #0
 8001664:	2264      	movs	r2, #100	@ 0x64
 8001666:	2100      	movs	r1, #0
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f8ad 	bl	80017c8 <map>
 800166e:	4602      	mov	r2, r0
 8001670:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <RevoluteMotorControl+0x58>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	48000800 	.word	0x48000800
 8001684:	20000100 	.word	0x20000100

08001688 <RevolutePIDControl>:

void RevolutePIDControl(double set_point) {
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b08b      	sub	sp, #44	@ 0x2c
 800168c:	af00      	add	r7, sp, #0
 800168e:	ed87 0b00 	vstr	d0, [r7]
	double position = (revolute_encoder_val * 16.00) / 8192.00;
 8001692:	4b47      	ldr	r3, [pc, #284]	@ (80017b0 <RevolutePIDControl+0x128>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe ff10 	bl	80004bc <__aeabi_i2d>
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	4b44      	ldr	r3, [pc, #272]	@ (80017b4 <RevolutePIDControl+0x12c>)
 80016a2:	f7fe ff75 	bl	8000590 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b41      	ldr	r3, [pc, #260]	@ (80017b8 <RevolutePIDControl+0x130>)
 80016b4:	f7ff f896 	bl	80007e4 <__aeabi_ddiv>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double speed = arm_pid_f32(&PID, set_point - position);
 80016c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016c8:	f7fe fdaa 	bl	8000220 <__aeabi_dsub>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	f7ff fa1e 	bl	8000b14 <__aeabi_d2f>
 80016d8:	4603      	mov	r3, r0
 80016da:	4a38      	ldr	r2, [pc, #224]	@ (80017bc <RevolutePIDControl+0x134>)
 80016dc:	613a      	str	r2, [r7, #16]
 80016de:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	ed93 7a00 	vldr	s14, [r3]
 80016e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ea:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80016fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80016fe:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	edd3 6a02 	vldr	s13, [r3, #8]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	edd3 7a04 	vldr	s15, [r3, #16]
 800170e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001712:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800171c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001720:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	615a      	str	r2, [r3, #20]
    return (out);
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe fed0 	bl	80004e0 <__aeabi_f2d>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	e9c7 2306 	strd	r2, r3, [r7, #24]
	revolute_error = set_point - position;
 8001748:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800174c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001750:	f7fe fd66 	bl	8000220 <__aeabi_dsub>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4919      	ldr	r1, [pc, #100]	@ (80017c0 <RevolutePIDControl+0x138>)
 800175a:	e9c1 2300 	strd	r2, r3, [r1]
	revolute_feedback = speed;
 800175e:	4919      	ldr	r1, [pc, #100]	@ (80017c4 <RevolutePIDControl+0x13c>)
 8001760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001764:	e9c1 2300 	strd	r2, r3, [r1]
	int dir = (speed > 0) ? 0 : 1;
 8001768:	2301      	movs	r3, #1
 800176a:	461c      	mov	r4, r3
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001778:	f7ff f99a 	bl	8000ab0 <__aeabi_dcmpgt>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <RevolutePIDControl+0xfe>
 8001782:	2300      	movs	r3, #0
 8001784:	461c      	mov	r4, r3
 8001786:	b2e3      	uxtb	r3, r4
 8001788:	f083 0301 	eor.w	r3, r3, #1
 800178c:	b2db      	uxtb	r3, r3
 800178e:	617b      	str	r3, [r7, #20]
	RevoluteMotorControl(abs(speed), dir);
 8001790:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001794:	f7ff f996 	bl	8000ac4 <__aeabi_d2iz>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	bfb8      	it	lt
 800179e:	425b      	neglt	r3, r3
 80017a0:	6979      	ldr	r1, [r7, #20]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ff42 	bl	800162c <RevoluteMotorControl>
}
 80017a8:	bf00      	nop
 80017aa:	372c      	adds	r7, #44	@ 0x2c
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd90      	pop	{r4, r7, pc}
 80017b0:	200002f0 	.word	0x200002f0
 80017b4:	40300000 	.word	0x40300000
 80017b8:	40c00000 	.word	0x40c00000
 80017bc:	200002a8 	.word	0x200002a8
 80017c0:	20000300 	.word	0x20000300
 80017c4:	20000308 	.word	0x20000308

080017c8 <map>:

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	69b9      	ldr	r1, [r7, #24]
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	1a8a      	subs	r2, r1, r2
 80017e2:	fb03 f202 	mul.w	r2, r3, r2
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	1acb      	subs	r3, r1, r3
 80017ec:	fb92 f2f3 	sdiv	r2, r2, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	4413      	add	r3, r2
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_GPIO_EXTI_Callback>:

// External Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_12) {
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001810:	d109      	bne.n	8001826 <HAL_GPIO_EXTI_Callback+0x26>
		prismatic_left_sw = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8001812:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001816:	480c      	ldr	r0, [pc, #48]	@ (8001848 <HAL_GPIO_EXTI_Callback+0x48>)
 8001818:	f002 f900 	bl	8003a1c <HAL_GPIO_ReadPin>
 800181c:	4603      	mov	r3, r0
 800181e:	b25a      	sxtb	r2, r3
 8001820:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001822:	701a      	strb	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_11) {
		prismatic_right_sw = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
	}
}
 8001824:	e00c      	b.n	8001840 <HAL_GPIO_EXTI_Callback+0x40>
	} else if (GPIO_Pin == GPIO_PIN_11) {
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800182c:	d108      	bne.n	8001840 <HAL_GPIO_EXTI_Callback+0x40>
		prismatic_right_sw = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 800182e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001832:	4805      	ldr	r0, [pc, #20]	@ (8001848 <HAL_GPIO_EXTI_Callback+0x48>)
 8001834:	f002 f8f2 	bl	8003a1c <HAL_GPIO_ReadPin>
 8001838:	4603      	mov	r3, r0
 800183a:	b25a      	sxtb	r2, r3
 800183c:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x50>)
 800183e:	701a      	strb	r2, [r3, #0]
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	48000400 	.word	0x48000400
 800184c:	2000027c 	.word	0x2000027c
 8001850:	2000027d 	.word	0x2000027d

08001854 <HAL_TIM_PeriodElapsedCallback>:

// Timer loop (Read sensor data and calculate here)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a49      	ldr	r2, [pc, #292]	@ (8001984 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d175      	bne.n	8001950 <HAL_TIM_PeriodElapsedCallback+0xfc>

		//-------------------------Read QEI Prismatic-------------------------
		prismatic_raw_encoder_val = __HAL_TIM_GET_COUNTER(&htim4);
 8001864:	4b48      	ldr	r3, [pc, #288]	@ (8001988 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186a:	461a      	mov	r2, r3
 800186c:	4b47      	ldr	r3, [pc, #284]	@ (800198c <HAL_TIM_PeriodElapsedCallback+0x138>)
 800186e:	601a      	str	r2, [r3, #0]
		int16_t delta1 = prismatic_raw_encoder_val - prismatic_raw_encoder_prev;
 8001870:	4b46      	ldr	r3, [pc, #280]	@ (800198c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	b29a      	uxth	r2, r3
 8001876:	4b46      	ldr	r3, [pc, #280]	@ (8001990 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	b29b      	uxth	r3, r3
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	b29b      	uxth	r3, r3
 8001880:	81fb      	strh	r3, [r7, #14]

		if (delta1 > 65535 / 2) {
			delta1 -= 65535;
		} else if (delta1 < -65535 / 2) {
 8001882:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001886:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800188a:	d103      	bne.n	8001894 <HAL_TIM_PeriodElapsedCallback+0x40>
			delta1 += 65535;
 800188c:	89fb      	ldrh	r3, [r7, #14]
 800188e:	3b01      	subs	r3, #1
 8001890:	b29b      	uxth	r3, r3
 8001892:	81fb      	strh	r3, [r7, #14]
		}

		prismatic_encoder_val += delta1;
 8001894:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001898:	4b3e      	ldr	r3, [pc, #248]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4413      	add	r3, r2
 800189e:	4a3d      	ldr	r2, [pc, #244]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80018a0:	6013      	str	r3, [r2, #0]
		prismatic_position = (prismatic_encoder_val * 16.00) / 8192.00;
 80018a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fe08 	bl	80004bc <__aeabi_i2d>
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	4b39      	ldr	r3, [pc, #228]	@ (8001998 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80018b2:	f7fe fe6d 	bl	8000590 <__aeabi_dmul>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	4b36      	ldr	r3, [pc, #216]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80018c4:	f7fe ff8e 	bl	80007e4 <__aeabi_ddiv>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4934      	ldr	r1, [pc, #208]	@ (80019a0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80018ce:	e9c1 2300 	strd	r2, r3, [r1]
		prismatic_raw_encoder_prev = prismatic_raw_encoder_val;
 80018d2:	4b2e      	ldr	r3, [pc, #184]	@ (800198c <HAL_TIM_PeriodElapsedCallback+0x138>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a2e      	ldr	r2, [pc, #184]	@ (8001990 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80018d8:	6013      	str	r3, [r2, #0]
		//------------------------------------------------------------------------

		//-------------------------Read QEI Revolute-------------------------
		revolute_raw_encoder_val = __HAL_TIM_GET_COUNTER(&htim3);
 80018da:	4b32      	ldr	r3, [pc, #200]	@ (80019a4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b31      	ldr	r3, [pc, #196]	@ (80019a8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80018e4:	601a      	str	r2, [r3, #0]
		int16_t delta2 = revolute_raw_encoder_val - revolute_raw_encoder_prev;
 80018e6:	4b30      	ldr	r3, [pc, #192]	@ (80019a8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	4b2f      	ldr	r3, [pc, #188]	@ (80019ac <HAL_TIM_PeriodElapsedCallback+0x158>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	81bb      	strh	r3, [r7, #12]

		if (delta2 > 65535 / 2) {
			delta2 -= 65535;
		} else if (delta2 < -65535 / 2) {
 80018f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018fc:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001900:	d103      	bne.n	800190a <HAL_TIM_PeriodElapsedCallback+0xb6>
			delta2 += 65535;
 8001902:	89bb      	ldrh	r3, [r7, #12]
 8001904:	3b01      	subs	r3, #1
 8001906:	b29b      	uxth	r3, r3
 8001908:	81bb      	strh	r3, [r7, #12]
		}

		revolute_encoder_val += delta2;
 800190a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800190e:	4b28      	ldr	r3, [pc, #160]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4413      	add	r3, r2
 8001914:	4a26      	ldr	r2, [pc, #152]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001916:	6013      	str	r3, [r2, #0]
		revolute_position = (revolute_encoder_val * 16.00) / 8192.00;
 8001918:	4b25      	ldr	r3, [pc, #148]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fdcd 	bl	80004bc <__aeabi_i2d>
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	4b1c      	ldr	r3, [pc, #112]	@ (8001998 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001928:	f7fe fe32 	bl	8000590 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	4b18      	ldr	r3, [pc, #96]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x148>)
 800193a:	f7fe ff53 	bl	80007e4 <__aeabi_ddiv>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	491c      	ldr	r1, [pc, #112]	@ (80019b4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001944:	e9c1 2300 	strd	r2, r3, [r1]
		revolute_raw_encoder_prev = revolute_raw_encoder_val;
 8001948:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a17      	ldr	r2, [pc, #92]	@ (80019ac <HAL_TIM_PeriodElapsedCallback+0x158>)
 800194e:	6013      	str	r3, [r2, #0]
		//------------------------------------------------------------------------
	}

	if(htim == &htim5){
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a19      	ldr	r2, [pc, #100]	@ (80019b8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d111      	bne.n	800197c <HAL_TIM_PeriodElapsedCallback+0x128>
		PrismaticPIDControl(prismatic_setposition);
 8001958:	4b18      	ldr	r3, [pc, #96]	@ (80019bc <HAL_TIM_PeriodElapsedCallback+0x168>)
 800195a:	ed93 7b00 	vldr	d7, [r3]
 800195e:	eeb0 0a47 	vmov.f32	s0, s14
 8001962:	eef0 0a67 	vmov.f32	s1, s15
 8001966:	f7ff fdc1 	bl	80014ec <PrismaticPIDControl>
		RevolutePIDControl(revolute_position_setposition);
 800196a:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800196c:	ed93 7b00 	vldr	d7, [r3]
 8001970:	eeb0 0a47 	vmov.f32	s0, s14
 8001974:	eef0 0a67 	vmov.f32	s1, s15
 8001978:	f7ff fe86 	bl	8001688 <RevolutePIDControl>
	}
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	2000014c 	.word	0x2000014c
 8001988:	200001e4 	.word	0x200001e4
 800198c:	20000280 	.word	0x20000280
 8001990:	20000284 	.word	0x20000284
 8001994:	20000288 	.word	0x20000288
 8001998:	40300000 	.word	0x40300000
 800199c:	40c00000 	.word	0x40c00000
 80019a0:	20000290 	.word	0x20000290
 80019a4:	20000198 	.word	0x20000198
 80019a8:	200002e8 	.word	0x200002e8
 80019ac:	200002ec 	.word	0x200002ec
 80019b0:	200002f0 	.word	0x200002f0
 80019b4:	200002f8 	.word	0x200002f8
 80019b8:	20000230 	.word	0x20000230
 80019bc:	200002d0 	.word	0x200002d0
 80019c0:	20000310 	.word	0x20000310

080019c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c8:	b672      	cpsid	i
}
 80019ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <Error_Handler+0x8>

080019d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a14 <HAL_MspInit+0x44>)
 80019d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019da:	4a0e      	ldr	r2, [pc, #56]	@ (8001a14 <HAL_MspInit+0x44>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80019e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <HAL_MspInit+0x44>)
 80019e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <HAL_MspInit+0x44>)
 80019f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f2:	4a08      	ldr	r2, [pc, #32]	@ (8001a14 <HAL_MspInit+0x44>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019fa:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <HAL_MspInit+0x44>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a06:	f002 f8f5 	bl	8003bf4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40021000 	.word	0x40021000

08001a18 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b09e      	sub	sp, #120	@ 0x78
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	2254      	movs	r2, #84	@ 0x54
 8001a36:	2100      	movs	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f004 fea5 	bl	8006788 <memset>
  if(hadc->Instance==ADC1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a46:	d15e      	bne.n	8001b06 <HAL_ADC_MspInit+0xee>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001a48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a4c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001a4e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a52:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f002 fdd1 	bl	8004600 <HAL_RCCEx_PeriphCLKConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001a64:	f7ff ffae 	bl	80019c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001a68:	4b29      	ldr	r3, [pc, #164]	@ (8001b10 <HAL_ADC_MspInit+0xf8>)
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6c:	4a28      	ldr	r2, [pc, #160]	@ (8001b10 <HAL_ADC_MspInit+0xf8>)
 8001a6e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a74:	4b26      	ldr	r3, [pc, #152]	@ (8001b10 <HAL_ADC_MspInit+0xf8>)
 8001a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a80:	4b23      	ldr	r3, [pc, #140]	@ (8001b10 <HAL_ADC_MspInit+0xf8>)
 8001a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a84:	4a22      	ldr	r2, [pc, #136]	@ (8001b10 <HAL_ADC_MspInit+0xf8>)
 8001a86:	f043 0304 	orr.w	r3, r3, #4
 8001a8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8c:	4b20      	ldr	r3, [pc, #128]	@ (8001b10 <HAL_ADC_MspInit+0xf8>)
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = JOY_X_AXIS_Pin|JOY_Y_AXIS_Pin;
 8001a98:	2306      	movs	r3, #6
 8001a9a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	481a      	ldr	r0, [pc, #104]	@ (8001b14 <HAL_ADC_MspInit+0xfc>)
 8001aac:	f001 fe34 	bl	8003718 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ab0:	4b19      	ldr	r3, [pc, #100]	@ (8001b18 <HAL_ADC_MspInit+0x100>)
 8001ab2:	4a1a      	ldr	r2, [pc, #104]	@ (8001b1c <HAL_ADC_MspInit+0x104>)
 8001ab4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ab6:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <HAL_ADC_MspInit+0x100>)
 8001ab8:	2205      	movs	r2, #5
 8001aba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001abc:	4b16      	ldr	r3, [pc, #88]	@ (8001b18 <HAL_ADC_MspInit+0x100>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac2:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <HAL_ADC_MspInit+0x100>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ac8:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <HAL_ADC_MspInit+0x100>)
 8001aca:	2280      	movs	r2, #128	@ 0x80
 8001acc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ace:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <HAL_ADC_MspInit+0x100>)
 8001ad0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ad4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ad6:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <HAL_ADC_MspInit+0x100>)
 8001ad8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001adc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <HAL_ADC_MspInit+0x100>)
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <HAL_ADC_MspInit+0x100>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001aea:	480b      	ldr	r0, [pc, #44]	@ (8001b18 <HAL_ADC_MspInit+0x100>)
 8001aec:	f001 fc5a 	bl	80033a4 <HAL_DMA_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8001af6:	f7ff ff65 	bl	80019c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a06      	ldr	r2, [pc, #24]	@ (8001b18 <HAL_ADC_MspInit+0x100>)
 8001afe:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b00:	4a05      	ldr	r2, [pc, #20]	@ (8001b18 <HAL_ADC_MspInit+0x100>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b06:	bf00      	nop
 8001b08:	3778      	adds	r7, #120	@ 0x78
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000
 8001b14:	48000800 	.word	0x48000800
 8001b18:	200000a0 	.word	0x200000a0
 8001b1c:	40020008 	.word	0x40020008

08001b20 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a23      	ldr	r2, [pc, #140]	@ (8001bbc <HAL_TIM_Base_MspInit+0x9c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d10c      	bne.n	8001b4c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b32:	4b23      	ldr	r3, [pc, #140]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xa0>)
 8001b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b36:	4a22      	ldr	r2, [pc, #136]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xa0>)
 8001b38:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b3e:	4b20      	ldr	r3, [pc, #128]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xa0>)
 8001b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001b4a:	e032      	b.n	8001bb2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b54:	d114      	bne.n	8001b80 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b56:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xa0>)
 8001b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5a:	4a19      	ldr	r2, [pc, #100]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xa0>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b62:	4b17      	ldr	r3, [pc, #92]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xa0>)
 8001b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	201c      	movs	r0, #28
 8001b74:	f001 fbe1 	bl	800333a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b78:	201c      	movs	r0, #28
 8001b7a:	f001 fbf8 	bl	800336e <HAL_NVIC_EnableIRQ>
}
 8001b7e:	e018      	b.n	8001bb2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM5)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc4 <HAL_TIM_Base_MspInit+0xa4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d113      	bne.n	8001bb2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xa0>)
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xa0>)
 8001b90:	f043 0308 	orr.w	r3, r3, #8
 8001b94:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b96:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xa0>)
 8001b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2032      	movs	r0, #50	@ 0x32
 8001ba8:	f001 fbc7 	bl	800333a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001bac:	2032      	movs	r0, #50	@ 0x32
 8001bae:	f001 fbde 	bl	800336e <HAL_NVIC_EnableIRQ>
}
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40012c00 	.word	0x40012c00
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40000c00 	.word	0x40000c00

08001bc8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08c      	sub	sp, #48	@ 0x30
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a36      	ldr	r2, [pc, #216]	@ (8001cc0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d131      	bne.n	8001c4e <HAL_TIM_Encoder_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bea:	4b36      	ldr	r3, [pc, #216]	@ (8001cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bee:	4a35      	ldr	r2, [pc, #212]	@ (8001cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bf6:	4b33      	ldr	r3, [pc, #204]	@ (8001cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	61bb      	str	r3, [r7, #24]
 8001c00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	4b30      	ldr	r3, [pc, #192]	@ (8001cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c06:	4a2f      	ldr	r2, [pc, #188]	@ (8001cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = QEI_1_A_Pin|QEI_1_B_Pin;
 8001c1a:	23c0      	movs	r3, #192	@ 0xc0
 8001c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2e:	f107 031c 	add.w	r3, r7, #28
 8001c32:	4619      	mov	r1, r3
 8001c34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c38:	f001 fd6e 	bl	8003718 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2100      	movs	r1, #0
 8001c40:	201d      	movs	r0, #29
 8001c42:	f001 fb7a 	bl	800333a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c46:	201d      	movs	r0, #29
 8001c48:	f001 fb91 	bl	800336e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c4c:	e034      	b.n	8001cb8 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(htim_encoder->Instance==TIM4)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1d      	ldr	r2, [pc, #116]	@ (8001cc8 <HAL_TIM_Encoder_MspInit+0x100>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d12f      	bne.n	8001cb8 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c58:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5c:	4a19      	ldr	r2, [pc, #100]	@ (8001cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001c5e:	f043 0304 	orr.w	r3, r3, #4
 8001c62:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c64:	4b17      	ldr	r3, [pc, #92]	@ (8001cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c70:	4b14      	ldr	r3, [pc, #80]	@ (8001cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c74:	4a13      	ldr	r2, [pc, #76]	@ (8001cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001c76:	f043 0302 	orr.w	r3, r3, #2
 8001c7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = QEI_2_A_Pin|QEI_2_B_Pin;
 8001c88:	23c0      	movs	r3, #192	@ 0xc0
 8001c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	480a      	ldr	r0, [pc, #40]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x104>)
 8001ca4:	f001 fd38 	bl	8003718 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	201e      	movs	r0, #30
 8001cae:	f001 fb44 	bl	800333a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cb2:	201e      	movs	r0, #30
 8001cb4:	f001 fb5b 	bl	800336e <HAL_NVIC_EnableIRQ>
}
 8001cb8:	bf00      	nop
 8001cba:	3730      	adds	r7, #48	@ 0x30
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40000400 	.word	0x40000400
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40000800 	.word	0x40000800
 8001ccc:	48000400 	.word	0x48000400

08001cd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a12      	ldr	r2, [pc, #72]	@ (8001d38 <HAL_TIM_MspPostInit+0x68>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d11d      	bne.n	8001d2e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf2:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <HAL_TIM_MspPostInit+0x6c>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf6:	4a11      	ldr	r2, [pc, #68]	@ (8001d3c <HAL_TIM_MspPostInit+0x6c>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001d3c <HAL_TIM_MspPostInit+0x6c>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Servo_PWM_Pin|Motor_1_PWM_Pin|Motor_2_PWM_Pin;
 8001d0a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001d0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d1c:	2306      	movs	r3, #6
 8001d1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	4619      	mov	r1, r3
 8001d26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d2a:	f001 fcf5 	bl	8003718 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d2e:	bf00      	nop
 8001d30:	3720      	adds	r7, #32
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40012c00 	.word	0x40012c00
 8001d3c:	40021000 	.word	0x40021000

08001d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <NMI_Handler+0x4>

08001d48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <HardFault_Handler+0x4>

08001d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <MemManage_Handler+0x4>

08001d58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <BusFault_Handler+0x4>

08001d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <UsageFault_Handler+0x4>

08001d68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d96:	f000 f8d7 	bl	8001f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001da4:	4802      	ldr	r0, [pc, #8]	@ (8001db0 <DMA1_Channel1_IRQHandler+0x10>)
 8001da6:	f001 fba5 	bl	80034f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200000a0 	.word	0x200000a0

08001db4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001db8:	4802      	ldr	r0, [pc, #8]	@ (8001dc4 <TIM2_IRQHandler+0x10>)
 8001dba:	f003 fafe 	bl	80053ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000014c 	.word	0x2000014c

08001dc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dcc:	4802      	ldr	r0, [pc, #8]	@ (8001dd8 <TIM3_IRQHandler+0x10>)
 8001dce:	f003 faf4 	bl	80053ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000198 	.word	0x20000198

08001ddc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001de0:	4802      	ldr	r0, [pc, #8]	@ (8001dec <TIM4_IRQHandler+0x10>)
 8001de2:	f003 faea 	bl	80053ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200001e4 	.word	0x200001e4

08001df0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Prismatic_right_limit_Pin);
 8001df4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001df8:	f001 fe40 	bl	8003a7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Prismatic_left_limit_Pin);
 8001dfc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001e00:	f001 fe3c 	bl	8003a7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(step_one_plotter_Pin);
 8001e04:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e08:	f001 fe38 	bl	8003a7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(step_two_plotter_Pin);
 8001e0c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001e10:	f001 fe34 	bl	8003a7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e1c:	4802      	ldr	r0, [pc, #8]	@ (8001e28 <TIM5_IRQHandler+0x10>)
 8001e1e:	f003 facc 	bl	80053ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000230 	.word	0x20000230

08001e2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e30:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <SystemInit+0x20>)
 8001e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e36:	4a05      	ldr	r2, [pc, #20]	@ (8001e4c <SystemInit+0x20>)
 8001e38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e50:	480d      	ldr	r0, [pc, #52]	@ (8001e88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e54:	f7ff ffea 	bl	8001e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e58:	480c      	ldr	r0, [pc, #48]	@ (8001e8c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e5a:	490d      	ldr	r1, [pc, #52]	@ (8001e90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e94 <LoopForever+0xe>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e60:	e002      	b.n	8001e68 <LoopCopyDataInit>

08001e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e66:	3304      	adds	r3, #4

08001e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e6c:	d3f9      	bcc.n	8001e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e70:	4c0a      	ldr	r4, [pc, #40]	@ (8001e9c <LoopForever+0x16>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e74:	e001      	b.n	8001e7a <LoopFillZerobss>

08001e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e78:	3204      	adds	r2, #4

08001e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e7c:	d3fb      	bcc.n	8001e76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e7e:	f004 fc8b 	bl	8006798 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e82:	f7fe fe97 	bl	8000bb4 <main>

08001e86 <LoopForever>:

LoopForever:
    b LoopForever
 8001e86:	e7fe      	b.n	8001e86 <LoopForever>
  ldr   r0, =_estack
 8001e88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e90:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001e94:	08006810 	.word	0x08006810
  ldr r2, =_sbss
 8001e98:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001e9c:	2000031c 	.word	0x2000031c

08001ea0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ea0:	e7fe      	b.n	8001ea0 <ADC1_2_IRQHandler>

08001ea2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eac:	2003      	movs	r0, #3
 8001eae:	f001 fa39 	bl	8003324 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f000 f80e 	bl	8001ed4 <HAL_InitTick>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d002      	beq.n	8001ec4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	71fb      	strb	r3, [r7, #7]
 8001ec2:	e001      	b.n	8001ec8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ec4:	f7ff fd84 	bl	80019d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ec8:	79fb      	ldrb	r3, [r7, #7]

}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ee0:	4b16      	ldr	r3, [pc, #88]	@ (8001f3c <HAL_InitTick+0x68>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d022      	beq.n	8001f2e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ee8:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <HAL_InitTick+0x6c>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b13      	ldr	r3, [pc, #76]	@ (8001f3c <HAL_InitTick+0x68>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ef4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efc:	4618      	mov	r0, r3
 8001efe:	f001 fa44 	bl	800338a <HAL_SYSTICK_Config>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10f      	bne.n	8001f28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b0f      	cmp	r3, #15
 8001f0c:	d809      	bhi.n	8001f22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	f04f 30ff 	mov.w	r0, #4294967295
 8001f16:	f001 fa10 	bl	800333a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <HAL_InitTick+0x70>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	e007      	b.n	8001f32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	73fb      	strb	r3, [r7, #15]
 8001f26:	e004      	b.n	8001f32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
 8001f2c:	e001      	b.n	8001f32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000010 	.word	0x20000010
 8001f40:	20000008 	.word	0x20000008
 8001f44:	2000000c 	.word	0x2000000c

08001f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <HAL_IncTick+0x1c>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <HAL_IncTick+0x20>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4413      	add	r3, r2
 8001f56:	4a03      	ldr	r2, [pc, #12]	@ (8001f64 <HAL_IncTick+0x1c>)
 8001f58:	6013      	str	r3, [r2, #0]
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	20000318 	.word	0x20000318
 8001f68:	20000010 	.word	0x20000010

08001f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f70:	4b03      	ldr	r3, [pc, #12]	@ (8001f80 <HAL_GetTick+0x14>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000318 	.word	0x20000318

08001f84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3360      	adds	r3, #96	@ 0x60
 8001ffe:	461a      	mov	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b08      	ldr	r3, [pc, #32]	@ (8002030 <LL_ADC_SetOffset+0x44>)
 800200e:	4013      	ands	r3, r2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	4313      	orrs	r3, r2
 800201c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002024:	bf00      	nop
 8002026:	371c      	adds	r7, #28
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	03fff000 	.word	0x03fff000

08002034 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3360      	adds	r3, #96	@ 0x60
 8002042:	461a      	mov	r2, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	3360      	adds	r3, #96	@ 0x60
 8002070:	461a      	mov	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	431a      	orrs	r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800208a:	bf00      	nop
 800208c:	371c      	adds	r7, #28
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002096:	b480      	push	{r7}
 8002098:	b087      	sub	sp, #28
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3360      	adds	r3, #96	@ 0x60
 80020a6:	461a      	mov	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80020c0:	bf00      	nop
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3360      	adds	r3, #96	@ 0x60
 80020dc:	461a      	mov	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	615a      	str	r2, [r3, #20]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3330      	adds	r3, #48	@ 0x30
 8002138:	461a      	mov	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	4413      	add	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	211f      	movs	r1, #31
 8002154:	fa01 f303 	lsl.w	r3, r1, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	401a      	ands	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	0e9b      	lsrs	r3, r3, #26
 8002160:	f003 011f 	and.w	r1, r3, #31
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f003 031f 	and.w	r3, r3, #31
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	431a      	orrs	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002174:	bf00      	nop
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3314      	adds	r3, #20
 8002190:	461a      	mov	r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	0e5b      	lsrs	r3, r3, #25
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	4413      	add	r3, r2
 800219e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	0d1b      	lsrs	r3, r3, #20
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	2107      	movs	r1, #7
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	401a      	ands	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	0d1b      	lsrs	r3, r3, #20
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	431a      	orrs	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021ca:	bf00      	nop
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f0:	43db      	mvns	r3, r3
 80021f2:	401a      	ands	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f003 0318 	and.w	r3, r3, #24
 80021fa:	4908      	ldr	r1, [pc, #32]	@ (800221c <LL_ADC_SetChannelSingleDiff+0x44>)
 80021fc:	40d9      	lsrs	r1, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	400b      	ands	r3, r1
 8002202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002206:	431a      	orrs	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	0007ffff 	.word	0x0007ffff

08002220 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002230:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6093      	str	r3, [r2, #8]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002254:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002258:	d101      	bne.n	800225e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800227c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002280:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022a8:	d101      	bne.n	80022ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <LL_ADC_IsEnabled+0x18>
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <LL_ADC_IsEnabled+0x1a>
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d101      	bne.n	80022fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b08      	cmp	r3, #8
 800231a:	d101      	bne.n	8002320 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002330:	b590      	push	{r4, r7, lr}
 8002332:	b089      	sub	sp, #36	@ 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e1a9      	b.n	800269e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002354:	2b00      	cmp	r3, #0
 8002356:	d109      	bne.n	800236c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff fb5d 	bl	8001a18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff67 	bl	8002244 <LL_ADC_IsDeepPowerDownEnabled>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d004      	beq.n	8002386 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff4d 	bl	8002220 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ff82 	bl	8002294 <LL_ADC_IsInternalRegulatorEnabled>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d115      	bne.n	80023c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff ff66 	bl	800226c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023a0:	4b9c      	ldr	r3, [pc, #624]	@ (8002614 <HAL_ADC_Init+0x2e4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	099b      	lsrs	r3, r3, #6
 80023a6:	4a9c      	ldr	r2, [pc, #624]	@ (8002618 <HAL_ADC_Init+0x2e8>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	099b      	lsrs	r3, r3, #6
 80023ae:	3301      	adds	r3, #1
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023b4:	e002      	b.n	80023bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f9      	bne.n	80023b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff64 	bl	8002294 <LL_ADC_IsInternalRegulatorEnabled>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10d      	bne.n	80023ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d6:	f043 0210 	orr.w	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e2:	f043 0201 	orr.w	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ff75 	bl	80022e2 <LL_ADC_REG_IsConversionOngoing>
 80023f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	2b00      	cmp	r3, #0
 8002404:	f040 8142 	bne.w	800268c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 813e 	bne.w	800268c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002414:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002418:	f043 0202 	orr.w	r2, r3, #2
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff49 	bl	80022bc <LL_ADC_IsEnabled>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d141      	bne.n	80024b4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002438:	d004      	beq.n	8002444 <HAL_ADC_Init+0x114>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a77      	ldr	r2, [pc, #476]	@ (800261c <HAL_ADC_Init+0x2ec>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d10f      	bne.n	8002464 <HAL_ADC_Init+0x134>
 8002444:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002448:	f7ff ff38 	bl	80022bc <LL_ADC_IsEnabled>
 800244c:	4604      	mov	r4, r0
 800244e:	4873      	ldr	r0, [pc, #460]	@ (800261c <HAL_ADC_Init+0x2ec>)
 8002450:	f7ff ff34 	bl	80022bc <LL_ADC_IsEnabled>
 8002454:	4603      	mov	r3, r0
 8002456:	4323      	orrs	r3, r4
 8002458:	2b00      	cmp	r3, #0
 800245a:	bf0c      	ite	eq
 800245c:	2301      	moveq	r3, #1
 800245e:	2300      	movne	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	e012      	b.n	800248a <HAL_ADC_Init+0x15a>
 8002464:	486e      	ldr	r0, [pc, #440]	@ (8002620 <HAL_ADC_Init+0x2f0>)
 8002466:	f7ff ff29 	bl	80022bc <LL_ADC_IsEnabled>
 800246a:	4604      	mov	r4, r0
 800246c:	486d      	ldr	r0, [pc, #436]	@ (8002624 <HAL_ADC_Init+0x2f4>)
 800246e:	f7ff ff25 	bl	80022bc <LL_ADC_IsEnabled>
 8002472:	4603      	mov	r3, r0
 8002474:	431c      	orrs	r4, r3
 8002476:	486c      	ldr	r0, [pc, #432]	@ (8002628 <HAL_ADC_Init+0x2f8>)
 8002478:	f7ff ff20 	bl	80022bc <LL_ADC_IsEnabled>
 800247c:	4603      	mov	r3, r0
 800247e:	4323      	orrs	r3, r4
 8002480:	2b00      	cmp	r3, #0
 8002482:	bf0c      	ite	eq
 8002484:	2301      	moveq	r3, #1
 8002486:	2300      	movne	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d012      	beq.n	80024b4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002496:	d004      	beq.n	80024a2 <HAL_ADC_Init+0x172>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a5f      	ldr	r2, [pc, #380]	@ (800261c <HAL_ADC_Init+0x2ec>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_Init+0x176>
 80024a2:	4a62      	ldr	r2, [pc, #392]	@ (800262c <HAL_ADC_Init+0x2fc>)
 80024a4:	e000      	b.n	80024a8 <HAL_ADC_Init+0x178>
 80024a6:	4a62      	ldr	r2, [pc, #392]	@ (8002630 <HAL_ADC_Init+0x300>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4619      	mov	r1, r3
 80024ae:	4610      	mov	r0, r2
 80024b0:	f7ff fd68 	bl	8001f84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	7f5b      	ldrb	r3, [r3, #29]
 80024b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80024c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80024ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d106      	bne.n	80024f0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e6:	3b01      	subs	r3, #1
 80024e8:	045b      	lsls	r3, r3, #17
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d009      	beq.n	800250c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002504:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	4b48      	ldr	r3, [pc, #288]	@ (8002634 <HAL_ADC_Init+0x304>)
 8002514:	4013      	ands	r3, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	69b9      	ldr	r1, [r7, #24]
 800251c:	430b      	orrs	r3, r1
 800251e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fee4 	bl	8002308 <LL_ADC_INJ_IsConversionOngoing>
 8002540:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d17f      	bne.n	8002648 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d17c      	bne.n	8002648 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002552:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800255a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800256a:	f023 0302 	bic.w	r3, r3, #2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	69b9      	ldr	r1, [r7, #24]
 8002574:	430b      	orrs	r3, r1
 8002576:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d017      	beq.n	80025b0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800258e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002598:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800259c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6911      	ldr	r1, [r2, #16]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	430b      	orrs	r3, r1
 80025aa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80025ae:	e013      	b.n	80025d8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80025be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025d4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d12a      	bne.n	8002638 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025ec:	f023 0304 	bic.w	r3, r3, #4
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025f8:	4311      	orrs	r1, r2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80025fe:	4311      	orrs	r1, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002604:	430a      	orrs	r2, r1
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	611a      	str	r2, [r3, #16]
 8002612:	e019      	b.n	8002648 <HAL_ADC_Init+0x318>
 8002614:	20000008 	.word	0x20000008
 8002618:	053e2d63 	.word	0x053e2d63
 800261c:	50000100 	.word	0x50000100
 8002620:	50000400 	.word	0x50000400
 8002624:	50000500 	.word	0x50000500
 8002628:	50000600 	.word	0x50000600
 800262c:	50000300 	.word	0x50000300
 8002630:	50000700 	.word	0x50000700
 8002634:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0201 	bic.w	r2, r2, #1
 8002646:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d10c      	bne.n	800266a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	f023 010f 	bic.w	r1, r3, #15
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	1e5a      	subs	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	631a      	str	r2, [r3, #48]	@ 0x30
 8002668:	e007      	b.n	800267a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 020f 	bic.w	r2, r2, #15
 8002678:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267e:	f023 0303 	bic.w	r3, r3, #3
 8002682:	f043 0201 	orr.w	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	65da      	str	r2, [r3, #92]	@ 0x5c
 800268a:	e007      	b.n	800269c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002690:	f043 0210 	orr.w	r2, r3, #16
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800269c:	7ffb      	ldrb	r3, [r7, #31]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3724      	adds	r7, #36	@ 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd90      	pop	{r4, r7, pc}
 80026a6:	bf00      	nop

080026a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b0b6      	sub	sp, #216	@ 0xd8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d102      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x24>
 80026c6:	2302      	movs	r3, #2
 80026c8:	f000 bc13 	b.w	8002ef2 <HAL_ADC_ConfigChannel+0x84a>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff fe02 	bl	80022e2 <LL_ADC_REG_IsConversionOngoing>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f040 83f3 	bne.w	8002ecc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6859      	ldr	r1, [r3, #4]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	f7ff fd18 	bl	8002128 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fdf0 	bl	80022e2 <LL_ADC_REG_IsConversionOngoing>
 8002702:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fdfc 	bl	8002308 <LL_ADC_INJ_IsConversionOngoing>
 8002710:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002714:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002718:	2b00      	cmp	r3, #0
 800271a:	f040 81d9 	bne.w	8002ad0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800271e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002722:	2b00      	cmp	r3, #0
 8002724:	f040 81d4 	bne.w	8002ad0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002730:	d10f      	bne.n	8002752 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2200      	movs	r2, #0
 800273c:	4619      	mov	r1, r3
 800273e:	f7ff fd1f 	bl	8002180 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fcd9 	bl	8002102 <LL_ADC_SetSamplingTimeCommonConfig>
 8002750:	e00e      	b.n	8002770 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	461a      	mov	r2, r3
 8002760:	f7ff fd0e 	bl	8002180 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fcc9 	bl	8002102 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	08db      	lsrs	r3, r3, #3
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b04      	cmp	r3, #4
 8002790:	d022      	beq.n	80027d8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6919      	ldr	r1, [r3, #16]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027a2:	f7ff fc23 	bl	8001fec <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	6919      	ldr	r1, [r3, #16]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	461a      	mov	r2, r3
 80027b4:	f7ff fc6f 	bl	8002096 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d102      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x126>
 80027c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027cc:	e000      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x128>
 80027ce:	2300      	movs	r3, #0
 80027d0:	461a      	mov	r2, r3
 80027d2:	f7ff fc7b 	bl	80020cc <LL_ADC_SetOffsetSaturation>
 80027d6:	e17b      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fc28 	bl	8002034 <LL_ADC_GetOffsetChannel>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10a      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x15c>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2100      	movs	r1, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fc1d 	bl	8002034 <LL_ADC_GetOffsetChannel>
 80027fa:	4603      	mov	r3, r0
 80027fc:	0e9b      	lsrs	r3, r3, #26
 80027fe:	f003 021f 	and.w	r2, r3, #31
 8002802:	e01e      	b.n	8002842 <HAL_ADC_ConfigChannel+0x19a>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fc12 	bl	8002034 <LL_ADC_GetOffsetChannel>
 8002810:	4603      	mov	r3, r0
 8002812:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002822:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002826:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800282a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002832:	2320      	movs	r3, #32
 8002834:	e004      	b.n	8002840 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284a:	2b00      	cmp	r3, #0
 800284c:	d105      	bne.n	800285a <HAL_ADC_ConfigChannel+0x1b2>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	0e9b      	lsrs	r3, r3, #26
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	e018      	b.n	800288c <HAL_ADC_ConfigChannel+0x1e4>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800286e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002872:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002876:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800287e:	2320      	movs	r3, #32
 8002880:	e004      	b.n	800288c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002882:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800288c:	429a      	cmp	r2, r3
 800288e:	d106      	bne.n	800289e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2200      	movs	r2, #0
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fbe1 	bl	8002060 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2101      	movs	r1, #1
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fbc5 	bl	8002034 <LL_ADC_GetOffsetChannel>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10a      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x222>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2101      	movs	r1, #1
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fbba 	bl	8002034 <LL_ADC_GetOffsetChannel>
 80028c0:	4603      	mov	r3, r0
 80028c2:	0e9b      	lsrs	r3, r3, #26
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	e01e      	b.n	8002908 <HAL_ADC_ConfigChannel+0x260>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2101      	movs	r1, #1
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fbaf 	bl	8002034 <LL_ADC_GetOffsetChannel>
 80028d6:	4603      	mov	r3, r0
 80028d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80028e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80028f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80028f8:	2320      	movs	r3, #32
 80028fa:	e004      	b.n	8002906 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80028fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002900:	fab3 f383 	clz	r3, r3
 8002904:	b2db      	uxtb	r3, r3
 8002906:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002910:	2b00      	cmp	r3, #0
 8002912:	d105      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x278>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	0e9b      	lsrs	r3, r3, #26
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	e018      	b.n	8002952 <HAL_ADC_ConfigChannel+0x2aa>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002934:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002938:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800293c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002944:	2320      	movs	r3, #32
 8002946:	e004      	b.n	8002952 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002948:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800294c:	fab3 f383 	clz	r3, r3
 8002950:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002952:	429a      	cmp	r2, r3
 8002954:	d106      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2200      	movs	r2, #0
 800295c:	2101      	movs	r1, #1
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fb7e 	bl	8002060 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2102      	movs	r1, #2
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fb62 	bl	8002034 <LL_ADC_GetOffsetChannel>
 8002970:	4603      	mov	r3, r0
 8002972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10a      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x2e8>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2102      	movs	r1, #2
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fb57 	bl	8002034 <LL_ADC_GetOffsetChannel>
 8002986:	4603      	mov	r3, r0
 8002988:	0e9b      	lsrs	r3, r3, #26
 800298a:	f003 021f 	and.w	r2, r3, #31
 800298e:	e01e      	b.n	80029ce <HAL_ADC_ConfigChannel+0x326>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2102      	movs	r1, #2
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fb4c 	bl	8002034 <LL_ADC_GetOffsetChannel>
 800299c:	4603      	mov	r3, r0
 800299e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80029ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80029b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80029be:	2320      	movs	r3, #32
 80029c0:	e004      	b.n	80029cc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80029c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d105      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x33e>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	0e9b      	lsrs	r3, r3, #26
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	e016      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x36c>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80029f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80029fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002a06:	2320      	movs	r3, #32
 8002a08:	e004      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d106      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2102      	movs	r1, #2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fb1d 	bl	8002060 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2103      	movs	r1, #3
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fb01 	bl	8002034 <LL_ADC_GetOffsetChannel>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10a      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x3aa>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2103      	movs	r1, #3
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff faf6 	bl	8002034 <LL_ADC_GetOffsetChannel>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	0e9b      	lsrs	r3, r3, #26
 8002a4c:	f003 021f 	and.w	r2, r3, #31
 8002a50:	e017      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x3da>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2103      	movs	r1, #3
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff faeb 	bl	8002034 <LL_ADC_GetOffsetChannel>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002a6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a6c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002a6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002a74:	2320      	movs	r3, #32
 8002a76:	e003      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002a78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d105      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x3f2>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	0e9b      	lsrs	r3, r3, #26
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	e011      	b.n	8002abe <HAL_ADC_ConfigChannel+0x416>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002aa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002aaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002aac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	e003      	b.n	8002abe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002ab6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d106      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2103      	movs	r1, #3
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fac8 	bl	8002060 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fbf1 	bl	80022bc <LL_ADC_IsEnabled>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f040 813d 	bne.w	8002d5c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	6819      	ldr	r1, [r3, #0]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	461a      	mov	r2, r3
 8002af0:	f7ff fb72 	bl	80021d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4aa2      	ldr	r2, [pc, #648]	@ (8002d84 <HAL_ADC_ConfigChannel+0x6dc>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	f040 812e 	bne.w	8002d5c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10b      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x480>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	0e9b      	lsrs	r3, r3, #26
 8002b16:	3301      	adds	r3, #1
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	2b09      	cmp	r3, #9
 8002b1e:	bf94      	ite	ls
 8002b20:	2301      	movls	r3, #1
 8002b22:	2300      	movhi	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	e019      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x4b4>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002b36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b38:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002b3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002b40:	2320      	movs	r3, #32
 8002b42:	e003      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002b44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	f003 031f 	and.w	r3, r3, #31
 8002b52:	2b09      	cmp	r3, #9
 8002b54:	bf94      	ite	ls
 8002b56:	2301      	movls	r3, #1
 8002b58:	2300      	movhi	r3, #0
 8002b5a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d079      	beq.n	8002c54 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d107      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x4d4>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0e9b      	lsrs	r3, r3, #26
 8002b72:	3301      	adds	r3, #1
 8002b74:	069b      	lsls	r3, r3, #26
 8002b76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b7a:	e015      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x500>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b8c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002b94:	2320      	movs	r3, #32
 8002b96:	e003      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	069b      	lsls	r3, r3, #26
 8002ba4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d109      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x520>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	0e9b      	lsrs	r3, r3, #26
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f003 031f 	and.w	r3, r3, #31
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	e017      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x550>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 8002bd4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002be0:	2320      	movs	r3, #32
 8002be2:	e003      	b.n	8002bec <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002be6:	fab3 f383 	clz	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	3301      	adds	r3, #1
 8002bee:	f003 031f 	and.w	r3, r3, #31
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf8:	ea42 0103 	orr.w	r1, r2, r3
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10a      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x576>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0e9b      	lsrs	r3, r3, #26
 8002c0e:	3301      	adds	r3, #1
 8002c10:	f003 021f 	and.w	r2, r3, #31
 8002c14:	4613      	mov	r3, r2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	4413      	add	r3, r2
 8002c1a:	051b      	lsls	r3, r3, #20
 8002c1c:	e018      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x5a8>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002c36:	2320      	movs	r3, #32
 8002c38:	e003      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c3c:	fab3 f383 	clz	r3, r3
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	3301      	adds	r3, #1
 8002c44:	f003 021f 	and.w	r2, r3, #31
 8002c48:	4613      	mov	r3, r2
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4413      	add	r3, r2
 8002c4e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c50:	430b      	orrs	r3, r1
 8002c52:	e07e      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d107      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x5c8>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	0e9b      	lsrs	r3, r3, #26
 8002c66:	3301      	adds	r3, #1
 8002c68:	069b      	lsls	r3, r3, #26
 8002c6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c6e:	e015      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x5f4>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c80:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002c88:	2320      	movs	r3, #32
 8002c8a:	e003      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	069b      	lsls	r3, r3, #26
 8002c98:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d109      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x614>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	0e9b      	lsrs	r3, r3, #26
 8002cae:	3301      	adds	r3, #1
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	e017      	b.n	8002cec <HAL_ADC_ConfigChannel+0x644>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	fa93 f3a3 	rbit	r3, r3
 8002cc8:	61fb      	str	r3, [r7, #28]
  return result;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002cd4:	2320      	movs	r3, #32
 8002cd6:	e003      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	f003 031f 	and.w	r3, r3, #31
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cec:	ea42 0103 	orr.w	r1, r2, r3
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10d      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x670>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	0e9b      	lsrs	r3, r3, #26
 8002d02:	3301      	adds	r3, #1
 8002d04:	f003 021f 	and.w	r2, r3, #31
 8002d08:	4613      	mov	r3, r2
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3b1e      	subs	r3, #30
 8002d10:	051b      	lsls	r3, r3, #20
 8002d12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d16:	e01b      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x6a8>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	613b      	str	r3, [r7, #16]
  return result;
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002d30:	2320      	movs	r3, #32
 8002d32:	e003      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	f003 021f 	and.w	r2, r3, #31
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	3b1e      	subs	r3, #30
 8002d4a:	051b      	lsls	r3, r3, #20
 8002d4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d50:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d56:	4619      	mov	r1, r3
 8002d58:	f7ff fa12 	bl	8002180 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <HAL_ADC_ConfigChannel+0x6e0>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80be 	beq.w	8002ee6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d72:	d004      	beq.n	8002d7e <HAL_ADC_ConfigChannel+0x6d6>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a04      	ldr	r2, [pc, #16]	@ (8002d8c <HAL_ADC_ConfigChannel+0x6e4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d10a      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x6ec>
 8002d7e:	4b04      	ldr	r3, [pc, #16]	@ (8002d90 <HAL_ADC_ConfigChannel+0x6e8>)
 8002d80:	e009      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x6ee>
 8002d82:	bf00      	nop
 8002d84:	407f0000 	.word	0x407f0000
 8002d88:	80080000 	.word	0x80080000
 8002d8c:	50000100 	.word	0x50000100
 8002d90:	50000300 	.word	0x50000300
 8002d94:	4b59      	ldr	r3, [pc, #356]	@ (8002efc <HAL_ADC_ConfigChannel+0x854>)
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff f91a 	bl	8001fd0 <LL_ADC_GetCommonPathInternalCh>
 8002d9c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a56      	ldr	r2, [pc, #344]	@ (8002f00 <HAL_ADC_ConfigChannel+0x858>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d004      	beq.n	8002db4 <HAL_ADC_ConfigChannel+0x70c>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a55      	ldr	r2, [pc, #340]	@ (8002f04 <HAL_ADC_ConfigChannel+0x85c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d13a      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002db4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002db8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d134      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dc8:	d005      	beq.n	8002dd6 <HAL_ADC_ConfigChannel+0x72e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a4e      	ldr	r2, [pc, #312]	@ (8002f08 <HAL_ADC_ConfigChannel+0x860>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	f040 8085 	bne.w	8002ee0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dde:	d004      	beq.n	8002dea <HAL_ADC_ConfigChannel+0x742>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a49      	ldr	r2, [pc, #292]	@ (8002f0c <HAL_ADC_ConfigChannel+0x864>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d101      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x746>
 8002dea:	4a49      	ldr	r2, [pc, #292]	@ (8002f10 <HAL_ADC_ConfigChannel+0x868>)
 8002dec:	e000      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x748>
 8002dee:	4a43      	ldr	r2, [pc, #268]	@ (8002efc <HAL_ADC_ConfigChannel+0x854>)
 8002df0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002df4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	f7ff f8d5 	bl	8001faa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e00:	4b44      	ldr	r3, [pc, #272]	@ (8002f14 <HAL_ADC_ConfigChannel+0x86c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	099b      	lsrs	r3, r3, #6
 8002e06:	4a44      	ldr	r2, [pc, #272]	@ (8002f18 <HAL_ADC_ConfigChannel+0x870>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	099b      	lsrs	r3, r3, #6
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e1a:	e002      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f9      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e28:	e05a      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a3b      	ldr	r2, [pc, #236]	@ (8002f1c <HAL_ADC_ConfigChannel+0x874>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d125      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d11f      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a31      	ldr	r2, [pc, #196]	@ (8002f0c <HAL_ADC_ConfigChannel+0x864>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d104      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x7ac>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a34      	ldr	r2, [pc, #208]	@ (8002f20 <HAL_ADC_ConfigChannel+0x878>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d047      	beq.n	8002ee4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e5c:	d004      	beq.n	8002e68 <HAL_ADC_ConfigChannel+0x7c0>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2a      	ldr	r2, [pc, #168]	@ (8002f0c <HAL_ADC_ConfigChannel+0x864>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d101      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x7c4>
 8002e68:	4a29      	ldr	r2, [pc, #164]	@ (8002f10 <HAL_ADC_ConfigChannel+0x868>)
 8002e6a:	e000      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x7c6>
 8002e6c:	4a23      	ldr	r2, [pc, #140]	@ (8002efc <HAL_ADC_ConfigChannel+0x854>)
 8002e6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e76:	4619      	mov	r1, r3
 8002e78:	4610      	mov	r0, r2
 8002e7a:	f7ff f896 	bl	8001faa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e7e:	e031      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a27      	ldr	r2, [pc, #156]	@ (8002f24 <HAL_ADC_ConfigChannel+0x87c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d12d      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d127      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8002f0c <HAL_ADC_ConfigChannel+0x864>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d022      	beq.n	8002ee6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ea8:	d004      	beq.n	8002eb4 <HAL_ADC_ConfigChannel+0x80c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a17      	ldr	r2, [pc, #92]	@ (8002f0c <HAL_ADC_ConfigChannel+0x864>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d101      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x810>
 8002eb4:	4a16      	ldr	r2, [pc, #88]	@ (8002f10 <HAL_ADC_ConfigChannel+0x868>)
 8002eb6:	e000      	b.n	8002eba <HAL_ADC_ConfigChannel+0x812>
 8002eb8:	4a10      	ldr	r2, [pc, #64]	@ (8002efc <HAL_ADC_ConfigChannel+0x854>)
 8002eba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ebe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	f7ff f870 	bl	8001faa <LL_ADC_SetCommonPathInternalCh>
 8002eca:	e00c      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed0:	f043 0220 	orr.w	r2, r3, #32
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002ede:	e002      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ee0:	bf00      	nop
 8002ee2:	e000      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ee4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002eee:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	37d8      	adds	r7, #216	@ 0xd8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	50000700 	.word	0x50000700
 8002f00:	c3210000 	.word	0xc3210000
 8002f04:	90c00010 	.word	0x90c00010
 8002f08:	50000600 	.word	0x50000600
 8002f0c:	50000100 	.word	0x50000100
 8002f10:	50000300 	.word	0x50000300
 8002f14:	20000008 	.word	0x20000008
 8002f18:	053e2d63 	.word	0x053e2d63
 8002f1c:	c7520000 	.word	0xc7520000
 8002f20:	50000500 	.word	0x50000500
 8002f24:	cb840000 	.word	0xcb840000

08002f28 <LL_ADC_IsEnabled>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <LL_ADC_IsEnabled+0x18>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e000      	b.n	8002f42 <LL_ADC_IsEnabled+0x1a>
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <LL_ADC_REG_IsConversionOngoing>:
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d101      	bne.n	8002f66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b0a1      	sub	sp, #132	@ 0x84
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e0e7      	b.n	8003162 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002faa:	d102      	bne.n	8002fb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002fac:	4b6f      	ldr	r3, [pc, #444]	@ (800316c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	e009      	b.n	8002fc6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a6e      	ldr	r2, [pc, #440]	@ (8003170 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d102      	bne.n	8002fc2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002fbc:	4b6d      	ldr	r3, [pc, #436]	@ (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	e001      	b.n	8002fc6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10b      	bne.n	8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0be      	b.n	8003162 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff ffb1 	bl	8002f4e <LL_ADC_REG_IsConversionOngoing>
 8002fec:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff ffab 	bl	8002f4e <LL_ADC_REG_IsConversionOngoing>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f040 80a0 	bne.w	8003140 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003000:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003002:	2b00      	cmp	r3, #0
 8003004:	f040 809c 	bne.w	8003140 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003010:	d004      	beq.n	800301c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a55      	ldr	r2, [pc, #340]	@ (800316c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d101      	bne.n	8003020 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800301c:	4b56      	ldr	r3, [pc, #344]	@ (8003178 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800301e:	e000      	b.n	8003022 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003020:	4b56      	ldr	r3, [pc, #344]	@ (800317c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003022:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d04b      	beq.n	80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800302c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800303e:	035b      	lsls	r3, r3, #13
 8003040:	430b      	orrs	r3, r1
 8003042:	431a      	orrs	r2, r3
 8003044:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003046:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003050:	d004      	beq.n	800305c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a45      	ldr	r2, [pc, #276]	@ (800316c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d10f      	bne.n	800307c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800305c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003060:	f7ff ff62 	bl	8002f28 <LL_ADC_IsEnabled>
 8003064:	4604      	mov	r4, r0
 8003066:	4841      	ldr	r0, [pc, #260]	@ (800316c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003068:	f7ff ff5e 	bl	8002f28 <LL_ADC_IsEnabled>
 800306c:	4603      	mov	r3, r0
 800306e:	4323      	orrs	r3, r4
 8003070:	2b00      	cmp	r3, #0
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	e012      	b.n	80030a2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800307c:	483c      	ldr	r0, [pc, #240]	@ (8003170 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800307e:	f7ff ff53 	bl	8002f28 <LL_ADC_IsEnabled>
 8003082:	4604      	mov	r4, r0
 8003084:	483b      	ldr	r0, [pc, #236]	@ (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003086:	f7ff ff4f 	bl	8002f28 <LL_ADC_IsEnabled>
 800308a:	4603      	mov	r3, r0
 800308c:	431c      	orrs	r4, r3
 800308e:	483c      	ldr	r0, [pc, #240]	@ (8003180 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003090:	f7ff ff4a 	bl	8002f28 <LL_ADC_IsEnabled>
 8003094:	4603      	mov	r3, r0
 8003096:	4323      	orrs	r3, r4
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d056      	beq.n	8003154 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80030ae:	f023 030f 	bic.w	r3, r3, #15
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	6811      	ldr	r1, [r2, #0]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	6892      	ldr	r2, [r2, #8]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	431a      	orrs	r2, r3
 80030be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030c0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030c2:	e047      	b.n	8003154 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030ce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030d8:	d004      	beq.n	80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a23      	ldr	r2, [pc, #140]	@ (800316c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d10f      	bne.n	8003104 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80030e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80030e8:	f7ff ff1e 	bl	8002f28 <LL_ADC_IsEnabled>
 80030ec:	4604      	mov	r4, r0
 80030ee:	481f      	ldr	r0, [pc, #124]	@ (800316c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030f0:	f7ff ff1a 	bl	8002f28 <LL_ADC_IsEnabled>
 80030f4:	4603      	mov	r3, r0
 80030f6:	4323      	orrs	r3, r4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf0c      	ite	eq
 80030fc:	2301      	moveq	r3, #1
 80030fe:	2300      	movne	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e012      	b.n	800312a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003104:	481a      	ldr	r0, [pc, #104]	@ (8003170 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003106:	f7ff ff0f 	bl	8002f28 <LL_ADC_IsEnabled>
 800310a:	4604      	mov	r4, r0
 800310c:	4819      	ldr	r0, [pc, #100]	@ (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800310e:	f7ff ff0b 	bl	8002f28 <LL_ADC_IsEnabled>
 8003112:	4603      	mov	r3, r0
 8003114:	431c      	orrs	r4, r3
 8003116:	481a      	ldr	r0, [pc, #104]	@ (8003180 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003118:	f7ff ff06 	bl	8002f28 <LL_ADC_IsEnabled>
 800311c:	4603      	mov	r3, r0
 800311e:	4323      	orrs	r3, r4
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf0c      	ite	eq
 8003124:	2301      	moveq	r3, #1
 8003126:	2300      	movne	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d012      	beq.n	8003154 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800312e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003136:	f023 030f 	bic.w	r3, r3, #15
 800313a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800313c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800313e:	e009      	b.n	8003154 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003144:	f043 0220 	orr.w	r2, r3, #32
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003152:	e000      	b.n	8003156 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003154:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800315e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003162:	4618      	mov	r0, r3
 8003164:	3784      	adds	r7, #132	@ 0x84
 8003166:	46bd      	mov	sp, r7
 8003168:	bd90      	pop	{r4, r7, pc}
 800316a:	bf00      	nop
 800316c:	50000100 	.word	0x50000100
 8003170:	50000400 	.word	0x50000400
 8003174:	50000500 	.word	0x50000500
 8003178:	50000300 	.word	0x50000300
 800317c:	50000700 	.word	0x50000700
 8003180:	50000600 	.word	0x50000600

08003184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003194:	4b0c      	ldr	r3, [pc, #48]	@ (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031a0:	4013      	ands	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031b6:	4a04      	ldr	r2, [pc, #16]	@ (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	60d3      	str	r3, [r2, #12]
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d0:	4b04      	ldr	r3, [pc, #16]	@ (80031e4 <__NVIC_GetPriorityGrouping+0x18>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	0a1b      	lsrs	r3, r3, #8
 80031d6:	f003 0307 	and.w	r3, r3, #7
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	db0b      	blt.n	8003212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	f003 021f 	and.w	r2, r3, #31
 8003200:	4907      	ldr	r1, [pc, #28]	@ (8003220 <__NVIC_EnableIRQ+0x38>)
 8003202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	2001      	movs	r0, #1
 800320a:	fa00 f202 	lsl.w	r2, r0, r2
 800320e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	e000e100 	.word	0xe000e100

08003224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	6039      	str	r1, [r7, #0]
 800322e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003234:	2b00      	cmp	r3, #0
 8003236:	db0a      	blt.n	800324e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	b2da      	uxtb	r2, r3
 800323c:	490c      	ldr	r1, [pc, #48]	@ (8003270 <__NVIC_SetPriority+0x4c>)
 800323e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003242:	0112      	lsls	r2, r2, #4
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	440b      	add	r3, r1
 8003248:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800324c:	e00a      	b.n	8003264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4908      	ldr	r1, [pc, #32]	@ (8003274 <__NVIC_SetPriority+0x50>)
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	3b04      	subs	r3, #4
 800325c:	0112      	lsls	r2, r2, #4
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	440b      	add	r3, r1
 8003262:	761a      	strb	r2, [r3, #24]
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	e000e100 	.word	0xe000e100
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003278:	b480      	push	{r7}
 800327a:	b089      	sub	sp, #36	@ 0x24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f1c3 0307 	rsb	r3, r3, #7
 8003292:	2b04      	cmp	r3, #4
 8003294:	bf28      	it	cs
 8003296:	2304      	movcs	r3, #4
 8003298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	3304      	adds	r3, #4
 800329e:	2b06      	cmp	r3, #6
 80032a0:	d902      	bls.n	80032a8 <NVIC_EncodePriority+0x30>
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3b03      	subs	r3, #3
 80032a6:	e000      	b.n	80032aa <NVIC_EncodePriority+0x32>
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ac:	f04f 32ff 	mov.w	r2, #4294967295
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43da      	mvns	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	401a      	ands	r2, r3
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032c0:	f04f 31ff 	mov.w	r1, #4294967295
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ca:	43d9      	mvns	r1, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d0:	4313      	orrs	r3, r2
         );
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3724      	adds	r7, #36	@ 0x24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
	...

080032e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032f0:	d301      	bcc.n	80032f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032f2:	2301      	movs	r3, #1
 80032f4:	e00f      	b.n	8003316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003320 <SysTick_Config+0x40>)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032fe:	210f      	movs	r1, #15
 8003300:	f04f 30ff 	mov.w	r0, #4294967295
 8003304:	f7ff ff8e 	bl	8003224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003308:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <SysTick_Config+0x40>)
 800330a:	2200      	movs	r2, #0
 800330c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800330e:	4b04      	ldr	r3, [pc, #16]	@ (8003320 <SysTick_Config+0x40>)
 8003310:	2207      	movs	r2, #7
 8003312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	e000e010 	.word	0xe000e010

08003324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ff29 	bl	8003184 <__NVIC_SetPriorityGrouping>
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b086      	sub	sp, #24
 800333e:	af00      	add	r7, sp, #0
 8003340:	4603      	mov	r3, r0
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
 8003346:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003348:	f7ff ff40 	bl	80031cc <__NVIC_GetPriorityGrouping>
 800334c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	6978      	ldr	r0, [r7, #20]
 8003354:	f7ff ff90 	bl	8003278 <NVIC_EncodePriority>
 8003358:	4602      	mov	r2, r0
 800335a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800335e:	4611      	mov	r1, r2
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff ff5f 	bl	8003224 <__NVIC_SetPriority>
}
 8003366:	bf00      	nop
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	4603      	mov	r3, r0
 8003376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ff33 	bl	80031e8 <__NVIC_EnableIRQ>
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff ffa4 	bl	80032e0 <SysTick_Config>
 8003398:	4603      	mov	r3, r0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e08d      	b.n	80034d2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	4b47      	ldr	r3, [pc, #284]	@ (80034dc <HAL_DMA_Init+0x138>)
 80033be:	429a      	cmp	r2, r3
 80033c0:	d80f      	bhi.n	80033e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	4b45      	ldr	r3, [pc, #276]	@ (80034e0 <HAL_DMA_Init+0x13c>)
 80033ca:	4413      	add	r3, r2
 80033cc:	4a45      	ldr	r2, [pc, #276]	@ (80034e4 <HAL_DMA_Init+0x140>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	091b      	lsrs	r3, r3, #4
 80033d4:	009a      	lsls	r2, r3, #2
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a42      	ldr	r2, [pc, #264]	@ (80034e8 <HAL_DMA_Init+0x144>)
 80033de:	641a      	str	r2, [r3, #64]	@ 0x40
 80033e0:	e00e      	b.n	8003400 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	4b40      	ldr	r3, [pc, #256]	@ (80034ec <HAL_DMA_Init+0x148>)
 80033ea:	4413      	add	r3, r2
 80033ec:	4a3d      	ldr	r2, [pc, #244]	@ (80034e4 <HAL_DMA_Init+0x140>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	091b      	lsrs	r3, r3, #4
 80033f4:	009a      	lsls	r2, r3, #2
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a3c      	ldr	r2, [pc, #240]	@ (80034f0 <HAL_DMA_Init+0x14c>)
 80033fe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800341a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003424:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003430:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800343c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f8fe 	bl	8003654 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003460:	d102      	bne.n	8003468 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800347c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d010      	beq.n	80034a8 <HAL_DMA_Init+0x104>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b04      	cmp	r3, #4
 800348c:	d80c      	bhi.n	80034a8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f91e 	bl	80036d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	e008      	b.n	80034ba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40020407 	.word	0x40020407
 80034e0:	bffdfff8 	.word	0xbffdfff8
 80034e4:	cccccccd 	.word	0xcccccccd
 80034e8:	40020000 	.word	0x40020000
 80034ec:	bffdfbf8 	.word	0xbffdfbf8
 80034f0:	40020400 	.word	0x40020400

080034f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	2204      	movs	r2, #4
 8003516:	409a      	lsls	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4013      	ands	r3, r2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d026      	beq.n	800356e <HAL_DMA_IRQHandler+0x7a>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b00      	cmp	r3, #0
 8003528:	d021      	beq.n	800356e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d107      	bne.n	8003548 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0204 	bic.w	r2, r2, #4
 8003546:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354c:	f003 021f 	and.w	r2, r3, #31
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003554:	2104      	movs	r1, #4
 8003556:	fa01 f202 	lsl.w	r2, r1, r2
 800355a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003560:	2b00      	cmp	r3, #0
 8003562:	d071      	beq.n	8003648 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800356c:	e06c      	b.n	8003648 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	2202      	movs	r2, #2
 8003578:	409a      	lsls	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d02e      	beq.n	80035e0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d029      	beq.n	80035e0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10b      	bne.n	80035b2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 020a 	bic.w	r2, r2, #10
 80035a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b6:	f003 021f 	and.w	r2, r3, #31
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035be:	2102      	movs	r1, #2
 80035c0:	fa01 f202 	lsl.w	r2, r1, r2
 80035c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d038      	beq.n	8003648 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80035de:	e033      	b.n	8003648 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	2208      	movs	r2, #8
 80035ea:	409a      	lsls	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d02a      	beq.n	800364a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d025      	beq.n	800364a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 020e 	bic.w	r2, r2, #14
 800360c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003612:	f003 021f 	and.w	r2, r3, #31
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	2101      	movs	r1, #1
 800361c:	fa01 f202 	lsl.w	r2, r1, r2
 8003620:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800363c:	2b00      	cmp	r3, #0
 800363e:	d004      	beq.n	800364a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003648:	bf00      	nop
 800364a:	bf00      	nop
}
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	4b16      	ldr	r3, [pc, #88]	@ (80036bc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003664:	429a      	cmp	r2, r3
 8003666:	d802      	bhi.n	800366e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003668:	4b15      	ldr	r3, [pc, #84]	@ (80036c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	e001      	b.n	8003672 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800366e:	4b15      	ldr	r3, [pc, #84]	@ (80036c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003670:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	3b08      	subs	r3, #8
 800367e:	4a12      	ldr	r2, [pc, #72]	@ (80036c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003680:	fba2 2303 	umull	r2, r3, r2, r3
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368c:	089b      	lsrs	r3, r3, #2
 800368e:	009a      	lsls	r2, r3, #2
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4413      	add	r3, r2
 8003694:	461a      	mov	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a0b      	ldr	r2, [pc, #44]	@ (80036cc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800369e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	2201      	movs	r2, #1
 80036a8:	409a      	lsls	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80036ae:	bf00      	nop
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40020407 	.word	0x40020407
 80036c0:	40020800 	.word	0x40020800
 80036c4:	40020820 	.word	0x40020820
 80036c8:	cccccccd 	.word	0xcccccccd
 80036cc:	40020880 	.word	0x40020880

080036d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	461a      	mov	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a08      	ldr	r2, [pc, #32]	@ (8003714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80036f2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	f003 031f 	and.w	r3, r3, #31
 80036fc:	2201      	movs	r2, #1
 80036fe:	409a      	lsls	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003704:	bf00      	nop
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	1000823f 	.word	0x1000823f
 8003714:	40020940 	.word	0x40020940

08003718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003726:	e15a      	b.n	80039de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	2101      	movs	r1, #1
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	fa01 f303 	lsl.w	r3, r1, r3
 8003734:	4013      	ands	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 814c 	beq.w	80039d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 0303 	and.w	r3, r3, #3
 8003748:	2b01      	cmp	r3, #1
 800374a:	d005      	beq.n	8003758 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003754:	2b02      	cmp	r3, #2
 8003756:	d130      	bne.n	80037ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	2203      	movs	r2, #3
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4013      	ands	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800378e:	2201      	movs	r2, #1
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4013      	ands	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	091b      	lsrs	r3, r3, #4
 80037a4:	f003 0201 	and.w	r2, r3, #1
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d017      	beq.n	80037f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	2203      	movs	r2, #3
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	43db      	mvns	r3, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4013      	ands	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d123      	bne.n	800384a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	08da      	lsrs	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3208      	adds	r2, #8
 800380a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800380e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	220f      	movs	r2, #15
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4013      	ands	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	08da      	lsrs	r2, r3, #3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3208      	adds	r2, #8
 8003844:	6939      	ldr	r1, [r7, #16]
 8003846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	2203      	movs	r2, #3
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	43db      	mvns	r3, r3
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4013      	ands	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f003 0203 	and.w	r2, r3, #3
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 80a6 	beq.w	80039d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800388c:	4b5b      	ldr	r3, [pc, #364]	@ (80039fc <HAL_GPIO_Init+0x2e4>)
 800388e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003890:	4a5a      	ldr	r2, [pc, #360]	@ (80039fc <HAL_GPIO_Init+0x2e4>)
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	6613      	str	r3, [r2, #96]	@ 0x60
 8003898:	4b58      	ldr	r3, [pc, #352]	@ (80039fc <HAL_GPIO_Init+0x2e4>)
 800389a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038a4:	4a56      	ldr	r2, [pc, #344]	@ (8003a00 <HAL_GPIO_Init+0x2e8>)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	089b      	lsrs	r3, r3, #2
 80038aa:	3302      	adds	r3, #2
 80038ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	220f      	movs	r2, #15
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4013      	ands	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80038ce:	d01f      	beq.n	8003910 <HAL_GPIO_Init+0x1f8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a4c      	ldr	r2, [pc, #304]	@ (8003a04 <HAL_GPIO_Init+0x2ec>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d019      	beq.n	800390c <HAL_GPIO_Init+0x1f4>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a4b      	ldr	r2, [pc, #300]	@ (8003a08 <HAL_GPIO_Init+0x2f0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d013      	beq.n	8003908 <HAL_GPIO_Init+0x1f0>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a4a      	ldr	r2, [pc, #296]	@ (8003a0c <HAL_GPIO_Init+0x2f4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00d      	beq.n	8003904 <HAL_GPIO_Init+0x1ec>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a49      	ldr	r2, [pc, #292]	@ (8003a10 <HAL_GPIO_Init+0x2f8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d007      	beq.n	8003900 <HAL_GPIO_Init+0x1e8>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a48      	ldr	r2, [pc, #288]	@ (8003a14 <HAL_GPIO_Init+0x2fc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d101      	bne.n	80038fc <HAL_GPIO_Init+0x1e4>
 80038f8:	2305      	movs	r3, #5
 80038fa:	e00a      	b.n	8003912 <HAL_GPIO_Init+0x1fa>
 80038fc:	2306      	movs	r3, #6
 80038fe:	e008      	b.n	8003912 <HAL_GPIO_Init+0x1fa>
 8003900:	2304      	movs	r3, #4
 8003902:	e006      	b.n	8003912 <HAL_GPIO_Init+0x1fa>
 8003904:	2303      	movs	r3, #3
 8003906:	e004      	b.n	8003912 <HAL_GPIO_Init+0x1fa>
 8003908:	2302      	movs	r3, #2
 800390a:	e002      	b.n	8003912 <HAL_GPIO_Init+0x1fa>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <HAL_GPIO_Init+0x1fa>
 8003910:	2300      	movs	r3, #0
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	f002 0203 	and.w	r2, r2, #3
 8003918:	0092      	lsls	r2, r2, #2
 800391a:	4093      	lsls	r3, r2
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003922:	4937      	ldr	r1, [pc, #220]	@ (8003a00 <HAL_GPIO_Init+0x2e8>)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	089b      	lsrs	r3, r3, #2
 8003928:	3302      	adds	r3, #2
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003930:	4b39      	ldr	r3, [pc, #228]	@ (8003a18 <HAL_GPIO_Init+0x300>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	43db      	mvns	r3, r3
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4013      	ands	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003954:	4a30      	ldr	r2, [pc, #192]	@ (8003a18 <HAL_GPIO_Init+0x300>)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800395a:	4b2f      	ldr	r3, [pc, #188]	@ (8003a18 <HAL_GPIO_Init+0x300>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	43db      	mvns	r3, r3
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4013      	ands	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800397e:	4a26      	ldr	r2, [pc, #152]	@ (8003a18 <HAL_GPIO_Init+0x300>)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003984:	4b24      	ldr	r3, [pc, #144]	@ (8003a18 <HAL_GPIO_Init+0x300>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	43db      	mvns	r3, r3
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4013      	ands	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003a18 <HAL_GPIO_Init+0x300>)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80039ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003a18 <HAL_GPIO_Init+0x300>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	43db      	mvns	r3, r3
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4013      	ands	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039d2:	4a11      	ldr	r2, [pc, #68]	@ (8003a18 <HAL_GPIO_Init+0x300>)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3301      	adds	r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f47f ae9d 	bne.w	8003728 <HAL_GPIO_Init+0x10>
  }
}
 80039ee:	bf00      	nop
 80039f0:	bf00      	nop
 80039f2:	371c      	adds	r7, #28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40010000 	.word	0x40010000
 8003a04:	48000400 	.word	0x48000400
 8003a08:	48000800 	.word	0x48000800
 8003a0c:	48000c00 	.word	0x48000c00
 8003a10:	48001000 	.word	0x48001000
 8003a14:	48001400 	.word	0x48001400
 8003a18:	40010400 	.word	0x40010400

08003a1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	887b      	ldrh	r3, [r7, #2]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
 8003a38:	e001      	b.n	8003a3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	807b      	strh	r3, [r7, #2]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a5c:	787b      	ldrb	r3, [r7, #1]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a62:	887a      	ldrh	r2, [r7, #2]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a68:	e002      	b.n	8003a70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a6a:	887a      	ldrh	r2, [r7, #2]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a86:	4b08      	ldr	r3, [pc, #32]	@ (8003aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a88:	695a      	ldr	r2, [r3, #20]
 8003a8a:	88fb      	ldrh	r3, [r7, #6]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d006      	beq.n	8003aa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a92:	4a05      	ldr	r2, [pc, #20]	@ (8003aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fd feb0 	bl	8001800 <HAL_GPIO_EXTI_Callback>
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40010400 	.word	0x40010400

08003aac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d141      	bne.n	8003b3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003aba:	4b4b      	ldr	r3, [pc, #300]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac6:	d131      	bne.n	8003b2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ac8:	4b47      	ldr	r3, [pc, #284]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ace:	4a46      	ldr	r2, [pc, #280]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ad4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ad8:	4b43      	ldr	r3, [pc, #268]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ae0:	4a41      	ldr	r2, [pc, #260]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ae6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ae8:	4b40      	ldr	r3, [pc, #256]	@ (8003bec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2232      	movs	r2, #50	@ 0x32
 8003aee:	fb02 f303 	mul.w	r3, r2, r3
 8003af2:	4a3f      	ldr	r2, [pc, #252]	@ (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003af4:	fba2 2303 	umull	r2, r3, r2, r3
 8003af8:	0c9b      	lsrs	r3, r3, #18
 8003afa:	3301      	adds	r3, #1
 8003afc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003afe:	e002      	b.n	8003b06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b06:	4b38      	ldr	r3, [pc, #224]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b12:	d102      	bne.n	8003b1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f2      	bne.n	8003b00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b1a:	4b33      	ldr	r3, [pc, #204]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b26:	d158      	bne.n	8003bda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e057      	b.n	8003bdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b32:	4a2d      	ldr	r2, [pc, #180]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003b3c:	e04d      	b.n	8003bda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b44:	d141      	bne.n	8003bca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b46:	4b28      	ldr	r3, [pc, #160]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b52:	d131      	bne.n	8003bb8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b54:	4b24      	ldr	r3, [pc, #144]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b5a:	4a23      	ldr	r2, [pc, #140]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b64:	4b20      	ldr	r3, [pc, #128]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b6c:	4a1e      	ldr	r2, [pc, #120]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b74:	4b1d      	ldr	r3, [pc, #116]	@ (8003bec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2232      	movs	r2, #50	@ 0x32
 8003b7a:	fb02 f303 	mul.w	r3, r2, r3
 8003b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	0c9b      	lsrs	r3, r3, #18
 8003b86:	3301      	adds	r3, #1
 8003b88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b8a:	e002      	b.n	8003b92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b92:	4b15      	ldr	r3, [pc, #84]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b9e:	d102      	bne.n	8003ba6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f2      	bne.n	8003b8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ba6:	4b10      	ldr	r3, [pc, #64]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bb2:	d112      	bne.n	8003bda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e011      	b.n	8003bdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003bc8:	e007      	b.n	8003bda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bca:	4b07      	ldr	r3, [pc, #28]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bd2:	4a05      	ldr	r2, [pc, #20]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bd8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	40007000 	.word	0x40007000
 8003bec:	20000008 	.word	0x20000008
 8003bf0:	431bde83 	.word	0x431bde83

08003bf4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003bf8:	4b05      	ldr	r3, [pc, #20]	@ (8003c10 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	4a04      	ldr	r2, [pc, #16]	@ (8003c10 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003bfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c02:	6093      	str	r3, [r2, #8]
}
 8003c04:	bf00      	nop
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40007000 	.word	0x40007000

08003c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e2fe      	b.n	8004224 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d075      	beq.n	8003d1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c32:	4b97      	ldr	r3, [pc, #604]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c3c:	4b94      	ldr	r3, [pc, #592]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0303 	and.w	r3, r3, #3
 8003c44:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	2b0c      	cmp	r3, #12
 8003c4a:	d102      	bne.n	8003c52 <HAL_RCC_OscConfig+0x3e>
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d002      	beq.n	8003c58 <HAL_RCC_OscConfig+0x44>
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d10b      	bne.n	8003c70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c58:	4b8d      	ldr	r3, [pc, #564]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d05b      	beq.n	8003d1c <HAL_RCC_OscConfig+0x108>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d157      	bne.n	8003d1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e2d9      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c78:	d106      	bne.n	8003c88 <HAL_RCC_OscConfig+0x74>
 8003c7a:	4b85      	ldr	r3, [pc, #532]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a84      	ldr	r2, [pc, #528]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e01d      	b.n	8003cc4 <HAL_RCC_OscConfig+0xb0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0x98>
 8003c92:	4b7f      	ldr	r3, [pc, #508]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a7e      	ldr	r2, [pc, #504]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003c98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4b7c      	ldr	r3, [pc, #496]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a7b      	ldr	r2, [pc, #492]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e00b      	b.n	8003cc4 <HAL_RCC_OscConfig+0xb0>
 8003cac:	4b78      	ldr	r3, [pc, #480]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a77      	ldr	r2, [pc, #476]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003cb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	4b75      	ldr	r3, [pc, #468]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a74      	ldr	r2, [pc, #464]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003cbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d013      	beq.n	8003cf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fe f94e 	bl	8001f6c <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd4:	f7fe f94a 	bl	8001f6c <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b64      	cmp	r3, #100	@ 0x64
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e29e      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ce6:	4b6a      	ldr	r3, [pc, #424]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0xc0>
 8003cf2:	e014      	b.n	8003d1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fe f93a 	bl	8001f6c <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cfc:	f7fe f936 	bl	8001f6c <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b64      	cmp	r3, #100	@ 0x64
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e28a      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d0e:	4b60      	ldr	r3, [pc, #384]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0xe8>
 8003d1a:	e000      	b.n	8003d1e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d075      	beq.n	8003e16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d2a:	4b59      	ldr	r3, [pc, #356]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d34:	4b56      	ldr	r3, [pc, #344]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0303 	and.w	r3, r3, #3
 8003d3c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	2b0c      	cmp	r3, #12
 8003d42:	d102      	bne.n	8003d4a <HAL_RCC_OscConfig+0x136>
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d002      	beq.n	8003d50 <HAL_RCC_OscConfig+0x13c>
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d11f      	bne.n	8003d90 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d50:	4b4f      	ldr	r3, [pc, #316]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_RCC_OscConfig+0x154>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e25d      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d68:	4b49      	ldr	r3, [pc, #292]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	061b      	lsls	r3, r3, #24
 8003d76:	4946      	ldr	r1, [pc, #280]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d7c:	4b45      	ldr	r3, [pc, #276]	@ (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fe f8a7 	bl	8001ed4 <HAL_InitTick>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d043      	beq.n	8003e14 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e249      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d023      	beq.n	8003de0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d98:	4b3d      	ldr	r3, [pc, #244]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a3c      	ldr	r2, [pc, #240]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003d9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fe f8e2 	bl	8001f6c <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dac:	f7fe f8de 	bl	8001f6c <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e232      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dbe:	4b34      	ldr	r3, [pc, #208]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dca:	4b31      	ldr	r3, [pc, #196]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	061b      	lsls	r3, r3, #24
 8003dd8:	492d      	ldr	r1, [pc, #180]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	604b      	str	r3, [r1, #4]
 8003dde:	e01a      	b.n	8003e16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003de0:	4b2b      	ldr	r3, [pc, #172]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a2a      	ldr	r2, [pc, #168]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003de6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fe f8be 	bl	8001f6c <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003df4:	f7fe f8ba 	bl	8001f6c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e20e      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e06:	4b22      	ldr	r3, [pc, #136]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x1e0>
 8003e12:	e000      	b.n	8003e16 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d041      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01c      	beq.n	8003e64 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e2a:	4b19      	ldr	r3, [pc, #100]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e30:	4a17      	ldr	r2, [pc, #92]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3a:	f7fe f897 	bl	8001f6c <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e42:	f7fe f893 	bl	8001f6c <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e1e7      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e54:	4b0e      	ldr	r3, [pc, #56]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0ef      	beq.n	8003e42 <HAL_RCC_OscConfig+0x22e>
 8003e62:	e020      	b.n	8003ea6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e64:	4b0a      	ldr	r3, [pc, #40]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e6a:	4a09      	ldr	r2, [pc, #36]	@ (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e74:	f7fe f87a 	bl	8001f6c <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e7a:	e00d      	b.n	8003e98 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e7c:	f7fe f876 	bl	8001f6c <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d906      	bls.n	8003e98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e1ca      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000
 8003e94:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e98:	4b8c      	ldr	r3, [pc, #560]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1ea      	bne.n	8003e7c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 80a6 	beq.w	8004000 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003eb8:	4b84      	ldr	r3, [pc, #528]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x2b4>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <HAL_RCC_OscConfig+0x2b6>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00d      	beq.n	8003eea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ece:	4b7f      	ldr	r3, [pc, #508]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed2:	4a7e      	ldr	r2, [pc, #504]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ed8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eda:	4b7c      	ldr	r3, [pc, #496]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eea:	4b79      	ldr	r3, [pc, #484]	@ (80040d0 <HAL_RCC_OscConfig+0x4bc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d118      	bne.n	8003f28 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef6:	4b76      	ldr	r3, [pc, #472]	@ (80040d0 <HAL_RCC_OscConfig+0x4bc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a75      	ldr	r2, [pc, #468]	@ (80040d0 <HAL_RCC_OscConfig+0x4bc>)
 8003efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f02:	f7fe f833 	bl	8001f6c <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0a:	f7fe f82f 	bl	8001f6c <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e183      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f1c:	4b6c      	ldr	r3, [pc, #432]	@ (80040d0 <HAL_RCC_OscConfig+0x4bc>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0f0      	beq.n	8003f0a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d108      	bne.n	8003f42 <HAL_RCC_OscConfig+0x32e>
 8003f30:	4b66      	ldr	r3, [pc, #408]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f36:	4a65      	ldr	r2, [pc, #404]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f40:	e024      	b.n	8003f8c <HAL_RCC_OscConfig+0x378>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b05      	cmp	r3, #5
 8003f48:	d110      	bne.n	8003f6c <HAL_RCC_OscConfig+0x358>
 8003f4a:	4b60      	ldr	r3, [pc, #384]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f50:	4a5e      	ldr	r2, [pc, #376]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003f52:	f043 0304 	orr.w	r3, r3, #4
 8003f56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f5a:	4b5c      	ldr	r3, [pc, #368]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f60:	4a5a      	ldr	r2, [pc, #360]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f6a:	e00f      	b.n	8003f8c <HAL_RCC_OscConfig+0x378>
 8003f6c:	4b57      	ldr	r3, [pc, #348]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f72:	4a56      	ldr	r2, [pc, #344]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003f74:	f023 0301 	bic.w	r3, r3, #1
 8003f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f7c:	4b53      	ldr	r3, [pc, #332]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f82:	4a52      	ldr	r2, [pc, #328]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003f84:	f023 0304 	bic.w	r3, r3, #4
 8003f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d016      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f94:	f7fd ffea 	bl	8001f6c <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f9a:	e00a      	b.n	8003fb2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9c:	f7fd ffe6 	bl	8001f6c <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e138      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fb2:	4b46      	ldr	r3, [pc, #280]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0ed      	beq.n	8003f9c <HAL_RCC_OscConfig+0x388>
 8003fc0:	e015      	b.n	8003fee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc2:	f7fd ffd3 	bl	8001f6c <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fc8:	e00a      	b.n	8003fe0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fca:	f7fd ffcf 	bl	8001f6c <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e121      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1ed      	bne.n	8003fca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fee:	7ffb      	ldrb	r3, [r7, #31]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d105      	bne.n	8004000 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff4:	4b35      	ldr	r3, [pc, #212]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff8:	4a34      	ldr	r2, [pc, #208]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003ffa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ffe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b00      	cmp	r3, #0
 800400a:	d03c      	beq.n	8004086 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01c      	beq.n	800404e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004014:	4b2d      	ldr	r3, [pc, #180]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8004016:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800401a:	4a2c      	ldr	r2, [pc, #176]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004024:	f7fd ffa2 	bl	8001f6c <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800402c:	f7fd ff9e 	bl	8001f6c <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e0f2      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800403e:	4b23      	ldr	r3, [pc, #140]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8004040:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0ef      	beq.n	800402c <HAL_RCC_OscConfig+0x418>
 800404c:	e01b      	b.n	8004086 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800404e:	4b1f      	ldr	r3, [pc, #124]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8004050:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004054:	4a1d      	ldr	r2, [pc, #116]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405e:	f7fd ff85 	bl	8001f6c <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004066:	f7fd ff81 	bl	8001f6c <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e0d5      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004078:	4b14      	ldr	r3, [pc, #80]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 800407a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1ef      	bne.n	8004066 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 80c9 	beq.w	8004222 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004090:	4b0e      	ldr	r3, [pc, #56]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 030c 	and.w	r3, r3, #12
 8004098:	2b0c      	cmp	r3, #12
 800409a:	f000 8083 	beq.w	80041a4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d15e      	bne.n	8004164 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a6:	4b09      	ldr	r3, [pc, #36]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a08      	ldr	r2, [pc, #32]	@ (80040cc <HAL_RCC_OscConfig+0x4b8>)
 80040ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b2:	f7fd ff5b 	bl	8001f6c <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b8:	e00c      	b.n	80040d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ba:	f7fd ff57 	bl	8001f6c <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d905      	bls.n	80040d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e0ab      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
 80040cc:	40021000 	.word	0x40021000
 80040d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d4:	4b55      	ldr	r3, [pc, #340]	@ (800422c <HAL_RCC_OscConfig+0x618>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1ec      	bne.n	80040ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e0:	4b52      	ldr	r3, [pc, #328]	@ (800422c <HAL_RCC_OscConfig+0x618>)
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	4b52      	ldr	r3, [pc, #328]	@ (8004230 <HAL_RCC_OscConfig+0x61c>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6a11      	ldr	r1, [r2, #32]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040f0:	3a01      	subs	r2, #1
 80040f2:	0112      	lsls	r2, r2, #4
 80040f4:	4311      	orrs	r1, r2
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80040fa:	0212      	lsls	r2, r2, #8
 80040fc:	4311      	orrs	r1, r2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004102:	0852      	lsrs	r2, r2, #1
 8004104:	3a01      	subs	r2, #1
 8004106:	0552      	lsls	r2, r2, #21
 8004108:	4311      	orrs	r1, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800410e:	0852      	lsrs	r2, r2, #1
 8004110:	3a01      	subs	r2, #1
 8004112:	0652      	lsls	r2, r2, #25
 8004114:	4311      	orrs	r1, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800411a:	06d2      	lsls	r2, r2, #27
 800411c:	430a      	orrs	r2, r1
 800411e:	4943      	ldr	r1, [pc, #268]	@ (800422c <HAL_RCC_OscConfig+0x618>)
 8004120:	4313      	orrs	r3, r2
 8004122:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004124:	4b41      	ldr	r3, [pc, #260]	@ (800422c <HAL_RCC_OscConfig+0x618>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a40      	ldr	r2, [pc, #256]	@ (800422c <HAL_RCC_OscConfig+0x618>)
 800412a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800412e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004130:	4b3e      	ldr	r3, [pc, #248]	@ (800422c <HAL_RCC_OscConfig+0x618>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	4a3d      	ldr	r2, [pc, #244]	@ (800422c <HAL_RCC_OscConfig+0x618>)
 8004136:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800413a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413c:	f7fd ff16 	bl	8001f6c <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004144:	f7fd ff12 	bl	8001f6c <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e066      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004156:	4b35      	ldr	r3, [pc, #212]	@ (800422c <HAL_RCC_OscConfig+0x618>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0x530>
 8004162:	e05e      	b.n	8004222 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004164:	4b31      	ldr	r3, [pc, #196]	@ (800422c <HAL_RCC_OscConfig+0x618>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a30      	ldr	r2, [pc, #192]	@ (800422c <HAL_RCC_OscConfig+0x618>)
 800416a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800416e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fd fefc 	bl	8001f6c <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004178:	f7fd fef8 	bl	8001f6c <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e04c      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800418a:	4b28      	ldr	r3, [pc, #160]	@ (800422c <HAL_RCC_OscConfig+0x618>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004196:	4b25      	ldr	r3, [pc, #148]	@ (800422c <HAL_RCC_OscConfig+0x618>)
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	4924      	ldr	r1, [pc, #144]	@ (800422c <HAL_RCC_OscConfig+0x618>)
 800419c:	4b25      	ldr	r3, [pc, #148]	@ (8004234 <HAL_RCC_OscConfig+0x620>)
 800419e:	4013      	ands	r3, r2
 80041a0:	60cb      	str	r3, [r1, #12]
 80041a2:	e03e      	b.n	8004222 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e039      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80041b0:	4b1e      	ldr	r3, [pc, #120]	@ (800422c <HAL_RCC_OscConfig+0x618>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f003 0203 	and.w	r2, r3, #3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d12c      	bne.n	800421e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ce:	3b01      	subs	r3, #1
 80041d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d123      	bne.n	800421e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d11b      	bne.n	800421e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d113      	bne.n	800421e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004200:	085b      	lsrs	r3, r3, #1
 8004202:	3b01      	subs	r3, #1
 8004204:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004206:	429a      	cmp	r2, r3
 8004208:	d109      	bne.n	800421e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004214:	085b      	lsrs	r3, r3, #1
 8004216:	3b01      	subs	r3, #1
 8004218:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800421a:	429a      	cmp	r2, r3
 800421c:	d001      	beq.n	8004222 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3720      	adds	r7, #32
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40021000 	.word	0x40021000
 8004230:	019f800c 	.word	0x019f800c
 8004234:	feeefffc 	.word	0xfeeefffc

08004238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e11e      	b.n	800448e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004250:	4b91      	ldr	r3, [pc, #580]	@ (8004498 <HAL_RCC_ClockConfig+0x260>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 030f 	and.w	r3, r3, #15
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d910      	bls.n	8004280 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425e:	4b8e      	ldr	r3, [pc, #568]	@ (8004498 <HAL_RCC_ClockConfig+0x260>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f023 020f 	bic.w	r2, r3, #15
 8004266:	498c      	ldr	r1, [pc, #560]	@ (8004498 <HAL_RCC_ClockConfig+0x260>)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	4313      	orrs	r3, r2
 800426c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800426e:	4b8a      	ldr	r3, [pc, #552]	@ (8004498 <HAL_RCC_ClockConfig+0x260>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d001      	beq.n	8004280 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e106      	b.n	800448e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d073      	beq.n	8004374 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b03      	cmp	r3, #3
 8004292:	d129      	bne.n	80042e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004294:	4b81      	ldr	r3, [pc, #516]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0f4      	b.n	800448e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80042a4:	f000 f966 	bl	8004574 <RCC_GetSysClockFreqFromPLLSource>
 80042a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	4a7c      	ldr	r2, [pc, #496]	@ (80044a0 <HAL_RCC_ClockConfig+0x268>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d93f      	bls.n	8004332 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80042b2:	4b7a      	ldr	r3, [pc, #488]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d009      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d033      	beq.n	8004332 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d12f      	bne.n	8004332 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042d2:	4b72      	ldr	r3, [pc, #456]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042da:	4a70      	ldr	r2, [pc, #448]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 80042dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042e2:	2380      	movs	r3, #128	@ 0x80
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	e024      	b.n	8004332 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d107      	bne.n	8004300 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042f0:	4b6a      	ldr	r3, [pc, #424]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d109      	bne.n	8004310 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0c6      	b.n	800448e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004300:	4b66      	ldr	r3, [pc, #408]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0be      	b.n	800448e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004310:	f000 f8ce 	bl	80044b0 <HAL_RCC_GetSysClockFreq>
 8004314:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	4a61      	ldr	r2, [pc, #388]	@ (80044a0 <HAL_RCC_ClockConfig+0x268>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d909      	bls.n	8004332 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800431e:	4b5f      	ldr	r3, [pc, #380]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004326:	4a5d      	ldr	r2, [pc, #372]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 8004328:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800432c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800432e:	2380      	movs	r3, #128	@ 0x80
 8004330:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004332:	4b5a      	ldr	r3, [pc, #360]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f023 0203 	bic.w	r2, r3, #3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	4957      	ldr	r1, [pc, #348]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 8004340:	4313      	orrs	r3, r2
 8004342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004344:	f7fd fe12 	bl	8001f6c <HAL_GetTick>
 8004348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434a:	e00a      	b.n	8004362 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800434c:	f7fd fe0e 	bl	8001f6c <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800435a:	4293      	cmp	r3, r2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e095      	b.n	800448e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004362:	4b4e      	ldr	r3, [pc, #312]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 020c 	and.w	r2, r3, #12
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	429a      	cmp	r2, r3
 8004372:	d1eb      	bne.n	800434c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d023      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800438c:	4b43      	ldr	r3, [pc, #268]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	4a42      	ldr	r2, [pc, #264]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 8004392:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004396:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d007      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80043a4:	4b3d      	ldr	r3, [pc, #244]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80043ac:	4a3b      	ldr	r2, [pc, #236]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 80043ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80043b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b4:	4b39      	ldr	r3, [pc, #228]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	4936      	ldr	r1, [pc, #216]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]
 80043c6:	e008      	b.n	80043da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	2b80      	cmp	r3, #128	@ 0x80
 80043cc:	d105      	bne.n	80043da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80043ce:	4b33      	ldr	r3, [pc, #204]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	4a32      	ldr	r2, [pc, #200]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 80043d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043da:	4b2f      	ldr	r3, [pc, #188]	@ (8004498 <HAL_RCC_ClockConfig+0x260>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d21d      	bcs.n	8004424 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004498 <HAL_RCC_ClockConfig+0x260>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f023 020f 	bic.w	r2, r3, #15
 80043f0:	4929      	ldr	r1, [pc, #164]	@ (8004498 <HAL_RCC_ClockConfig+0x260>)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043f8:	f7fd fdb8 	bl	8001f6c <HAL_GetTick>
 80043fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fe:	e00a      	b.n	8004416 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004400:	f7fd fdb4 	bl	8001f6c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800440e:	4293      	cmp	r3, r2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e03b      	b.n	800448e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004416:	4b20      	ldr	r3, [pc, #128]	@ (8004498 <HAL_RCC_ClockConfig+0x260>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d1ed      	bne.n	8004400 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d008      	beq.n	8004442 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004430:	4b1a      	ldr	r3, [pc, #104]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	4917      	ldr	r1, [pc, #92]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 800443e:	4313      	orrs	r3, r2
 8004440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d009      	beq.n	8004462 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800444e:	4b13      	ldr	r3, [pc, #76]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	490f      	ldr	r1, [pc, #60]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 800445e:	4313      	orrs	r3, r2
 8004460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004462:	f000 f825 	bl	80044b0 <HAL_RCC_GetSysClockFreq>
 8004466:	4602      	mov	r2, r0
 8004468:	4b0c      	ldr	r3, [pc, #48]	@ (800449c <HAL_RCC_ClockConfig+0x264>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	091b      	lsrs	r3, r3, #4
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	490c      	ldr	r1, [pc, #48]	@ (80044a4 <HAL_RCC_ClockConfig+0x26c>)
 8004474:	5ccb      	ldrb	r3, [r1, r3]
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	fa22 f303 	lsr.w	r3, r2, r3
 800447e:	4a0a      	ldr	r2, [pc, #40]	@ (80044a8 <HAL_RCC_ClockConfig+0x270>)
 8004480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004482:	4b0a      	ldr	r3, [pc, #40]	@ (80044ac <HAL_RCC_ClockConfig+0x274>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7fd fd24 	bl	8001ed4 <HAL_InitTick>
 800448c:	4603      	mov	r3, r0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40022000 	.word	0x40022000
 800449c:	40021000 	.word	0x40021000
 80044a0:	04c4b400 	.word	0x04c4b400
 80044a4:	080067f8 	.word	0x080067f8
 80044a8:	20000008 	.word	0x20000008
 80044ac:	2000000c 	.word	0x2000000c

080044b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80044b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d102      	bne.n	80044c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044c2:	4b2a      	ldr	r3, [pc, #168]	@ (800456c <HAL_RCC_GetSysClockFreq+0xbc>)
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	e047      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80044c8:	4b27      	ldr	r3, [pc, #156]	@ (8004568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 030c 	and.w	r3, r3, #12
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d102      	bne.n	80044da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044d4:	4b26      	ldr	r3, [pc, #152]	@ (8004570 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	e03e      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80044da:	4b23      	ldr	r3, [pc, #140]	@ (8004568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
 80044e2:	2b0c      	cmp	r3, #12
 80044e4:	d136      	bne.n	8004554 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044e6:	4b20      	ldr	r3, [pc, #128]	@ (8004568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	091b      	lsrs	r3, r3, #4
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	3301      	adds	r3, #1
 80044fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b03      	cmp	r3, #3
 8004502:	d10c      	bne.n	800451e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004504:	4a1a      	ldr	r2, [pc, #104]	@ (8004570 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	fbb2 f3f3 	udiv	r3, r2, r3
 800450c:	4a16      	ldr	r2, [pc, #88]	@ (8004568 <HAL_RCC_GetSysClockFreq+0xb8>)
 800450e:	68d2      	ldr	r2, [r2, #12]
 8004510:	0a12      	lsrs	r2, r2, #8
 8004512:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004516:	fb02 f303 	mul.w	r3, r2, r3
 800451a:	617b      	str	r3, [r7, #20]
      break;
 800451c:	e00c      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800451e:	4a13      	ldr	r2, [pc, #76]	@ (800456c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	fbb2 f3f3 	udiv	r3, r2, r3
 8004526:	4a10      	ldr	r2, [pc, #64]	@ (8004568 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004528:	68d2      	ldr	r2, [r2, #12]
 800452a:	0a12      	lsrs	r2, r2, #8
 800452c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004530:	fb02 f303 	mul.w	r3, r2, r3
 8004534:	617b      	str	r3, [r7, #20]
      break;
 8004536:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004538:	4b0b      	ldr	r3, [pc, #44]	@ (8004568 <HAL_RCC_GetSysClockFreq+0xb8>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	0e5b      	lsrs	r3, r3, #25
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	3301      	adds	r3, #1
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	e001      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004558:	693b      	ldr	r3, [r7, #16]
}
 800455a:	4618      	mov	r0, r3
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40021000 	.word	0x40021000
 800456c:	00f42400 	.word	0x00f42400
 8004570:	016e3600 	.word	0x016e3600

08004574 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800457a:	4b1e      	ldr	r3, [pc, #120]	@ (80045f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004584:	4b1b      	ldr	r3, [pc, #108]	@ (80045f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	3301      	adds	r3, #1
 8004590:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	2b03      	cmp	r3, #3
 8004596:	d10c      	bne.n	80045b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004598:	4a17      	ldr	r2, [pc, #92]	@ (80045f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	4a14      	ldr	r2, [pc, #80]	@ (80045f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045a2:	68d2      	ldr	r2, [r2, #12]
 80045a4:	0a12      	lsrs	r2, r2, #8
 80045a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045aa:	fb02 f303 	mul.w	r3, r2, r3
 80045ae:	617b      	str	r3, [r7, #20]
    break;
 80045b0:	e00c      	b.n	80045cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045b2:	4a12      	ldr	r2, [pc, #72]	@ (80045fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ba:	4a0e      	ldr	r2, [pc, #56]	@ (80045f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045bc:	68d2      	ldr	r2, [r2, #12]
 80045be:	0a12      	lsrs	r2, r2, #8
 80045c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045c4:	fb02 f303 	mul.w	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]
    break;
 80045ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045cc:	4b09      	ldr	r3, [pc, #36]	@ (80045f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	0e5b      	lsrs	r3, r3, #25
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	3301      	adds	r3, #1
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80045e6:	687b      	ldr	r3, [r7, #4]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	40021000 	.word	0x40021000
 80045f8:	016e3600 	.word	0x016e3600
 80045fc:	00f42400 	.word	0x00f42400

08004600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004608:	2300      	movs	r3, #0
 800460a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800460c:	2300      	movs	r3, #0
 800460e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8098 	beq.w	800474e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800461e:	2300      	movs	r3, #0
 8004620:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004622:	4b43      	ldr	r3, [pc, #268]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10d      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800462e:	4b40      	ldr	r3, [pc, #256]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004632:	4a3f      	ldr	r2, [pc, #252]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004638:	6593      	str	r3, [r2, #88]	@ 0x58
 800463a:	4b3d      	ldr	r3, [pc, #244]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800463c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004642:	60bb      	str	r3, [r7, #8]
 8004644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004646:	2301      	movs	r3, #1
 8004648:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800464a:	4b3a      	ldr	r3, [pc, #232]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a39      	ldr	r2, [pc, #228]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004654:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004656:	f7fd fc89 	bl	8001f6c <HAL_GetTick>
 800465a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800465c:	e009      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465e:	f7fd fc85 	bl	8001f6c <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d902      	bls.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	74fb      	strb	r3, [r7, #19]
        break;
 8004670:	e005      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004672:	4b30      	ldr	r3, [pc, #192]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0ef      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800467e:	7cfb      	ldrb	r3, [r7, #19]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d159      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004684:	4b2a      	ldr	r3, [pc, #168]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800468a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800468e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d01e      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	429a      	cmp	r2, r3
 800469e:	d019      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046a0:	4b23      	ldr	r3, [pc, #140]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046ac:	4b20      	ldr	r3, [pc, #128]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046cc:	4a18      	ldr	r2, [pc, #96]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d016      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7fd fc45 	bl	8001f6c <HAL_GetTick>
 80046e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e4:	e00b      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e6:	f7fd fc41 	bl	8001f6c <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d902      	bls.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	74fb      	strb	r3, [r7, #19]
            break;
 80046fc:	e006      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0ec      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800470c:	7cfb      	ldrb	r3, [r7, #19]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10b      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004712:	4b07      	ldr	r3, [pc, #28]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004718:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004720:	4903      	ldr	r1, [pc, #12]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004728:	e008      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800472a:	7cfb      	ldrb	r3, [r7, #19]
 800472c:	74bb      	strb	r3, [r7, #18]
 800472e:	e005      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004730:	40021000 	.word	0x40021000
 8004734:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004738:	7cfb      	ldrb	r3, [r7, #19]
 800473a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800473c:	7c7b      	ldrb	r3, [r7, #17]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d105      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004742:	4ba7      	ldr	r3, [pc, #668]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004746:	4aa6      	ldr	r2, [pc, #664]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004748:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800474c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800475a:	4ba1      	ldr	r3, [pc, #644]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004760:	f023 0203 	bic.w	r2, r3, #3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	499d      	ldr	r1, [pc, #628]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800477c:	4b98      	ldr	r3, [pc, #608]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004782:	f023 020c 	bic.w	r2, r3, #12
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	4995      	ldr	r1, [pc, #596]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800479e:	4b90      	ldr	r3, [pc, #576]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	498c      	ldr	r1, [pc, #560]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047c0:	4b87      	ldr	r3, [pc, #540]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	4984      	ldr	r1, [pc, #528]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0310 	and.w	r3, r3, #16
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047e2:	4b7f      	ldr	r3, [pc, #508]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	497b      	ldr	r1, [pc, #492]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004804:	4b76      	ldr	r3, [pc, #472]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	4973      	ldr	r1, [pc, #460]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004826:	4b6e      	ldr	r3, [pc, #440]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	496a      	ldr	r1, [pc, #424]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004848:	4b65      	ldr	r3, [pc, #404]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	4962      	ldr	r1, [pc, #392]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800486a:	4b5d      	ldr	r3, [pc, #372]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800486c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004870:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	4959      	ldr	r1, [pc, #356]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800488c:	4b54      	ldr	r3, [pc, #336]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004892:	f023 0203 	bic.w	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489a:	4951      	ldr	r1, [pc, #324]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ae:	4b4c      	ldr	r3, [pc, #304]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048bc:	4948      	ldr	r1, [pc, #288]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d015      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048d0:	4b43      	ldr	r3, [pc, #268]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048de:	4940      	ldr	r1, [pc, #256]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ee:	d105      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048f0:	4b3b      	ldr	r3, [pc, #236]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	4a3a      	ldr	r2, [pc, #232]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048fa:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004904:	2b00      	cmp	r3, #0
 8004906:	d015      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004908:	4b35      	ldr	r3, [pc, #212]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004916:	4932      	ldr	r1, [pc, #200]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004922:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004926:	d105      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004928:	4b2d      	ldr	r3, [pc, #180]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	4a2c      	ldr	r2, [pc, #176]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800492e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004932:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d015      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004940:	4b27      	ldr	r3, [pc, #156]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004946:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494e:	4924      	ldr	r1, [pc, #144]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800495e:	d105      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004960:	4b1f      	ldr	r3, [pc, #124]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4a1e      	ldr	r2, [pc, #120]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004966:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800496a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d015      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004978:	4b19      	ldr	r3, [pc, #100]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800497e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004986:	4916      	ldr	r1, [pc, #88]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004992:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004996:	d105      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004998:	4b11      	ldr	r3, [pc, #68]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4a10      	ldr	r2, [pc, #64]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800499e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d019      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049b0:	4b0b      	ldr	r3, [pc, #44]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	4908      	ldr	r1, [pc, #32]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049ce:	d109      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d0:	4b03      	ldr	r3, [pc, #12]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4a02      	ldr	r2, [pc, #8]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049da:	60d3      	str	r3, [r2, #12]
 80049dc:	e002      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80049de:	bf00      	nop
 80049e0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d015      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049f0:	4b29      	ldr	r3, [pc, #164]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fe:	4926      	ldr	r1, [pc, #152]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a0e:	d105      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a10:	4b21      	ldr	r3, [pc, #132]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4a20      	ldr	r2, [pc, #128]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a1a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d015      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004a28:	4b1b      	ldr	r3, [pc, #108]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a36:	4918      	ldr	r1, [pc, #96]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a46:	d105      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a48:	4b13      	ldr	r3, [pc, #76]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4a12      	ldr	r2, [pc, #72]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a52:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d015      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a60:	4b0d      	ldr	r3, [pc, #52]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a6e:	490a      	ldr	r1, [pc, #40]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a7e:	d105      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a80:	4b05      	ldr	r3, [pc, #20]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4a04      	ldr	r2, [pc, #16]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a8a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40021000 	.word	0x40021000

08004a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e049      	b.n	8004b42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fd f82c 	bl	8001b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4610      	mov	r0, r2
 8004adc:	f001 f80e 	bl	8005afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d001      	beq.n	8004b64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e04c      	b.n	8004bfe <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a26      	ldr	r2, [pc, #152]	@ (8004c0c <HAL_TIM_Base_Start+0xc0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d022      	beq.n	8004bbc <HAL_TIM_Base_Start+0x70>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b7e:	d01d      	beq.n	8004bbc <HAL_TIM_Base_Start+0x70>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a22      	ldr	r2, [pc, #136]	@ (8004c10 <HAL_TIM_Base_Start+0xc4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d018      	beq.n	8004bbc <HAL_TIM_Base_Start+0x70>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a21      	ldr	r2, [pc, #132]	@ (8004c14 <HAL_TIM_Base_Start+0xc8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d013      	beq.n	8004bbc <HAL_TIM_Base_Start+0x70>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a1f      	ldr	r2, [pc, #124]	@ (8004c18 <HAL_TIM_Base_Start+0xcc>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00e      	beq.n	8004bbc <HAL_TIM_Base_Start+0x70>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8004c1c <HAL_TIM_Base_Start+0xd0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d009      	beq.n	8004bbc <HAL_TIM_Base_Start+0x70>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1c      	ldr	r2, [pc, #112]	@ (8004c20 <HAL_TIM_Base_Start+0xd4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d004      	beq.n	8004bbc <HAL_TIM_Base_Start+0x70>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c24 <HAL_TIM_Base_Start+0xd8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d115      	bne.n	8004be8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	4b19      	ldr	r3, [pc, #100]	@ (8004c28 <HAL_TIM_Base_Start+0xdc>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b06      	cmp	r3, #6
 8004bcc:	d015      	beq.n	8004bfa <HAL_TIM_Base_Start+0xae>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bd4:	d011      	beq.n	8004bfa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0201 	orr.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be6:	e008      	b.n	8004bfa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	e000      	b.n	8004bfc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40000800 	.word	0x40000800
 8004c18:	40000c00 	.word	0x40000c00
 8004c1c:	40013400 	.word	0x40013400
 8004c20:	40014000 	.word	0x40014000
 8004c24:	40015000 	.word	0x40015000
 8004c28:	00010007 	.word	0x00010007

08004c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d001      	beq.n	8004c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e054      	b.n	8004cee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a26      	ldr	r2, [pc, #152]	@ (8004cfc <HAL_TIM_Base_Start_IT+0xd0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d022      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c6e:	d01d      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a22      	ldr	r2, [pc, #136]	@ (8004d00 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d018      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a21      	ldr	r2, [pc, #132]	@ (8004d04 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d013      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a1f      	ldr	r2, [pc, #124]	@ (8004d08 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00e      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a1e      	ldr	r2, [pc, #120]	@ (8004d0c <HAL_TIM_Base_Start_IT+0xe0>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d009      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8004d10 <HAL_TIM_Base_Start_IT+0xe4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d14 <HAL_TIM_Base_Start_IT+0xe8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d115      	bne.n	8004cd8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689a      	ldr	r2, [r3, #8]
 8004cb2:	4b19      	ldr	r3, [pc, #100]	@ (8004d18 <HAL_TIM_Base_Start_IT+0xec>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b06      	cmp	r3, #6
 8004cbc:	d015      	beq.n	8004cea <HAL_TIM_Base_Start_IT+0xbe>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc4:	d011      	beq.n	8004cea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f042 0201 	orr.w	r2, r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd6:	e008      	b.n	8004cea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	e000      	b.n	8004cec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40012c00 	.word	0x40012c00
 8004d00:	40000400 	.word	0x40000400
 8004d04:	40000800 	.word	0x40000800
 8004d08:	40000c00 	.word	0x40000c00
 8004d0c:	40013400 	.word	0x40013400
 8004d10:	40014000 	.word	0x40014000
 8004d14:	40015000 	.word	0x40015000
 8004d18:	00010007 	.word	0x00010007

08004d1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e049      	b.n	8004dc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f841 	bl	8004dca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3304      	adds	r3, #4
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	f000 fece 	bl	8005afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
	...

08004de0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d109      	bne.n	8004e04 <HAL_TIM_PWM_Start+0x24>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	bf14      	ite	ne
 8004dfc:	2301      	movne	r3, #1
 8004dfe:	2300      	moveq	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	e03c      	b.n	8004e7e <HAL_TIM_PWM_Start+0x9e>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d109      	bne.n	8004e1e <HAL_TIM_PWM_Start+0x3e>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	bf14      	ite	ne
 8004e16:	2301      	movne	r3, #1
 8004e18:	2300      	moveq	r3, #0
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	e02f      	b.n	8004e7e <HAL_TIM_PWM_Start+0x9e>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d109      	bne.n	8004e38 <HAL_TIM_PWM_Start+0x58>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	bf14      	ite	ne
 8004e30:	2301      	movne	r3, #1
 8004e32:	2300      	moveq	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	e022      	b.n	8004e7e <HAL_TIM_PWM_Start+0x9e>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2b0c      	cmp	r3, #12
 8004e3c:	d109      	bne.n	8004e52 <HAL_TIM_PWM_Start+0x72>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	bf14      	ite	ne
 8004e4a:	2301      	movne	r3, #1
 8004e4c:	2300      	moveq	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	e015      	b.n	8004e7e <HAL_TIM_PWM_Start+0x9e>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b10      	cmp	r3, #16
 8004e56:	d109      	bne.n	8004e6c <HAL_TIM_PWM_Start+0x8c>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	bf14      	ite	ne
 8004e64:	2301      	movne	r3, #1
 8004e66:	2300      	moveq	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	e008      	b.n	8004e7e <HAL_TIM_PWM_Start+0x9e>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	bf14      	ite	ne
 8004e78:	2301      	movne	r3, #1
 8004e7a:	2300      	moveq	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e0a6      	b.n	8004fd4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d104      	bne.n	8004e96 <HAL_TIM_PWM_Start+0xb6>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e94:	e023      	b.n	8004ede <HAL_TIM_PWM_Start+0xfe>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d104      	bne.n	8004ea6 <HAL_TIM_PWM_Start+0xc6>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ea4:	e01b      	b.n	8004ede <HAL_TIM_PWM_Start+0xfe>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d104      	bne.n	8004eb6 <HAL_TIM_PWM_Start+0xd6>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004eb4:	e013      	b.n	8004ede <HAL_TIM_PWM_Start+0xfe>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b0c      	cmp	r3, #12
 8004eba:	d104      	bne.n	8004ec6 <HAL_TIM_PWM_Start+0xe6>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ec4:	e00b      	b.n	8004ede <HAL_TIM_PWM_Start+0xfe>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b10      	cmp	r3, #16
 8004eca:	d104      	bne.n	8004ed6 <HAL_TIM_PWM_Start+0xf6>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ed4:	e003      	b.n	8004ede <HAL_TIM_PWM_Start+0xfe>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	6839      	ldr	r1, [r7, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f001 fa82 	bl	80063f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a3a      	ldr	r2, [pc, #232]	@ (8004fdc <HAL_TIM_PWM_Start+0x1fc>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d018      	beq.n	8004f28 <HAL_TIM_PWM_Start+0x148>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a39      	ldr	r2, [pc, #228]	@ (8004fe0 <HAL_TIM_PWM_Start+0x200>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d013      	beq.n	8004f28 <HAL_TIM_PWM_Start+0x148>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a37      	ldr	r2, [pc, #220]	@ (8004fe4 <HAL_TIM_PWM_Start+0x204>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00e      	beq.n	8004f28 <HAL_TIM_PWM_Start+0x148>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a36      	ldr	r2, [pc, #216]	@ (8004fe8 <HAL_TIM_PWM_Start+0x208>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d009      	beq.n	8004f28 <HAL_TIM_PWM_Start+0x148>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a34      	ldr	r2, [pc, #208]	@ (8004fec <HAL_TIM_PWM_Start+0x20c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d004      	beq.n	8004f28 <HAL_TIM_PWM_Start+0x148>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a33      	ldr	r2, [pc, #204]	@ (8004ff0 <HAL_TIM_PWM_Start+0x210>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d101      	bne.n	8004f2c <HAL_TIM_PWM_Start+0x14c>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <HAL_TIM_PWM_Start+0x14e>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d007      	beq.n	8004f42 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a25      	ldr	r2, [pc, #148]	@ (8004fdc <HAL_TIM_PWM_Start+0x1fc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d022      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x1b2>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f54:	d01d      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x1b2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a26      	ldr	r2, [pc, #152]	@ (8004ff4 <HAL_TIM_PWM_Start+0x214>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d018      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x1b2>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a24      	ldr	r2, [pc, #144]	@ (8004ff8 <HAL_TIM_PWM_Start+0x218>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x1b2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a23      	ldr	r2, [pc, #140]	@ (8004ffc <HAL_TIM_PWM_Start+0x21c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00e      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x1b2>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a19      	ldr	r2, [pc, #100]	@ (8004fe0 <HAL_TIM_PWM_Start+0x200>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d009      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x1b2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a18      	ldr	r2, [pc, #96]	@ (8004fe4 <HAL_TIM_PWM_Start+0x204>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d004      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x1b2>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a18      	ldr	r2, [pc, #96]	@ (8004ff0 <HAL_TIM_PWM_Start+0x210>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d115      	bne.n	8004fbe <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	4b19      	ldr	r3, [pc, #100]	@ (8005000 <HAL_TIM_PWM_Start+0x220>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2b06      	cmp	r3, #6
 8004fa2:	d015      	beq.n	8004fd0 <HAL_TIM_PWM_Start+0x1f0>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004faa:	d011      	beq.n	8004fd0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fbc:	e008      	b.n	8004fd0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f042 0201 	orr.w	r2, r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	e000      	b.n	8004fd2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	40012c00 	.word	0x40012c00
 8004fe0:	40013400 	.word	0x40013400
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40014400 	.word	0x40014400
 8004fec:	40014800 	.word	0x40014800
 8004ff0:	40015000 	.word	0x40015000
 8004ff4:	40000400 	.word	0x40000400
 8004ff8:	40000800 	.word	0x40000800
 8004ffc:	40000c00 	.word	0x40000c00
 8005000:	00010007 	.word	0x00010007

08005004 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e097      	b.n	8005148 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d106      	bne.n	8005032 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7fc fdcb 	bl	8001bc8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2202      	movs	r2, #2
 8005036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005048:	f023 0307 	bic.w	r3, r3, #7
 800504c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	3304      	adds	r3, #4
 8005056:	4619      	mov	r1, r3
 8005058:	4610      	mov	r0, r2
 800505a:	f000 fd4f 	bl	8005afc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005086:	f023 0303 	bic.w	r3, r3, #3
 800508a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	021b      	lsls	r3, r3, #8
 8005096:	4313      	orrs	r3, r2
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	4313      	orrs	r3, r2
 800509c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80050a4:	f023 030c 	bic.w	r3, r3, #12
 80050a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	4313      	orrs	r3, r2
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	011a      	lsls	r2, r3, #4
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	031b      	lsls	r3, r3, #12
 80050d4:	4313      	orrs	r3, r2
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80050e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80050ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	4313      	orrs	r3, r2
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005160:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005168:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005170:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005178:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d110      	bne.n	80051a2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d102      	bne.n	800518c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005186:	7b7b      	ldrb	r3, [r7, #13]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d001      	beq.n	8005190 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e069      	b.n	8005264 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051a0:	e031      	b.n	8005206 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d110      	bne.n	80051ca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80051a8:	7bbb      	ldrb	r3, [r7, #14]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d102      	bne.n	80051b4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80051ae:	7b3b      	ldrb	r3, [r7, #12]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d001      	beq.n	80051b8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e055      	b.n	8005264 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051c8:	e01d      	b.n	8005206 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d108      	bne.n	80051e2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80051d0:	7bbb      	ldrb	r3, [r7, #14]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d105      	bne.n	80051e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051d6:	7b7b      	ldrb	r3, [r7, #13]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d102      	bne.n	80051e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80051dc:	7b3b      	ldrb	r3, [r7, #12]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d001      	beq.n	80051e6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e03e      	b.n	8005264 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2202      	movs	r2, #2
 80051ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2202      	movs	r2, #2
 80051f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2202      	movs	r2, #2
 80051fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2202      	movs	r2, #2
 8005202:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_TIM_Encoder_Start+0xc4>
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2b04      	cmp	r3, #4
 8005210:	d008      	beq.n	8005224 <HAL_TIM_Encoder_Start+0xd4>
 8005212:	e00f      	b.n	8005234 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2201      	movs	r2, #1
 800521a:	2100      	movs	r1, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f001 f8e7 	bl	80063f0 <TIM_CCxChannelCmd>
      break;
 8005222:	e016      	b.n	8005252 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2201      	movs	r2, #1
 800522a:	2104      	movs	r1, #4
 800522c:	4618      	mov	r0, r3
 800522e:	f001 f8df 	bl	80063f0 <TIM_CCxChannelCmd>
      break;
 8005232:	e00e      	b.n	8005252 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2201      	movs	r2, #1
 800523a:	2100      	movs	r1, #0
 800523c:	4618      	mov	r0, r3
 800523e:	f001 f8d7 	bl	80063f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2201      	movs	r2, #1
 8005248:	2104      	movs	r1, #4
 800524a:	4618      	mov	r0, r3
 800524c:	f001 f8d0 	bl	80063f0 <TIM_CCxChannelCmd>
      break;
 8005250:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f042 0201 	orr.w	r2, r2, #1
 8005260:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <HAL_TIM_Encoder_Stop+0x18>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b04      	cmp	r3, #4
 8005280:	d008      	beq.n	8005294 <HAL_TIM_Encoder_Stop+0x28>
 8005282:	e00f      	b.n	80052a4 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2200      	movs	r2, #0
 800528a:	2100      	movs	r1, #0
 800528c:	4618      	mov	r0, r3
 800528e:	f001 f8af 	bl	80063f0 <TIM_CCxChannelCmd>
      break;
 8005292:	e016      	b.n	80052c2 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2200      	movs	r2, #0
 800529a:	2104      	movs	r1, #4
 800529c:	4618      	mov	r0, r3
 800529e:	f001 f8a7 	bl	80063f0 <TIM_CCxChannelCmd>
      break;
 80052a2:	e00e      	b.n	80052c2 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2200      	movs	r2, #0
 80052aa:	2100      	movs	r1, #0
 80052ac:	4618      	mov	r0, r3
 80052ae:	f001 f89f 	bl	80063f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2200      	movs	r2, #0
 80052b8:	2104      	movs	r1, #4
 80052ba:	4618      	mov	r0, r3
 80052bc:	f001 f898 	bl	80063f0 <TIM_CCxChannelCmd>
      break;
 80052c0:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6a1a      	ldr	r2, [r3, #32]
 80052c8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80052cc:	4013      	ands	r3, r2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10f      	bne.n	80052f2 <HAL_TIM_Encoder_Stop+0x86>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6a1a      	ldr	r2, [r3, #32]
 80052d8:	f244 4344 	movw	r3, #17476	@ 0x4444
 80052dc:	4013      	ands	r3, r2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d107      	bne.n	80052f2 <HAL_TIM_Encoder_Stop+0x86>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0201 	bic.w	r2, r2, #1
 80052f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <HAL_TIM_Encoder_Stop+0x92>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d148      	bne.n	8005390 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d104      	bne.n	800530e <HAL_TIM_Encoder_Stop+0xa2>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800530c:	e023      	b.n	8005356 <HAL_TIM_Encoder_Stop+0xea>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b04      	cmp	r3, #4
 8005312:	d104      	bne.n	800531e <HAL_TIM_Encoder_Stop+0xb2>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800531c:	e01b      	b.n	8005356 <HAL_TIM_Encoder_Stop+0xea>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b08      	cmp	r3, #8
 8005322:	d104      	bne.n	800532e <HAL_TIM_Encoder_Stop+0xc2>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800532c:	e013      	b.n	8005356 <HAL_TIM_Encoder_Stop+0xea>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b0c      	cmp	r3, #12
 8005332:	d104      	bne.n	800533e <HAL_TIM_Encoder_Stop+0xd2>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800533c:	e00b      	b.n	8005356 <HAL_TIM_Encoder_Stop+0xea>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b10      	cmp	r3, #16
 8005342:	d104      	bne.n	800534e <HAL_TIM_Encoder_Stop+0xe2>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800534c:	e003      	b.n	8005356 <HAL_TIM_Encoder_Stop+0xea>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d104      	bne.n	8005366 <HAL_TIM_Encoder_Stop+0xfa>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005364:	e024      	b.n	80053b0 <HAL_TIM_Encoder_Stop+0x144>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b04      	cmp	r3, #4
 800536a:	d104      	bne.n	8005376 <HAL_TIM_Encoder_Stop+0x10a>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005374:	e01c      	b.n	80053b0 <HAL_TIM_Encoder_Stop+0x144>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b08      	cmp	r3, #8
 800537a:	d104      	bne.n	8005386 <HAL_TIM_Encoder_Stop+0x11a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005384:	e014      	b.n	80053b0 <HAL_TIM_Encoder_Stop+0x144>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 800538e:	e00f      	b.n	80053b0 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d020      	beq.n	800541e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d01b      	beq.n	800541e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f06f 0202 	mvn.w	r2, #2
 80053ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	f003 0303 	and.w	r3, r3, #3
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fb5b 	bl	8005ac0 <HAL_TIM_IC_CaptureCallback>
 800540a:	e005      	b.n	8005418 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fb4d 	bl	8005aac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fb5e 	bl	8005ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d020      	beq.n	800546a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f003 0304 	and.w	r3, r3, #4
 800542e:	2b00      	cmp	r3, #0
 8005430:	d01b      	beq.n	800546a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f06f 0204 	mvn.w	r2, #4
 800543a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 fb35 	bl	8005ac0 <HAL_TIM_IC_CaptureCallback>
 8005456:	e005      	b.n	8005464 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fb27 	bl	8005aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fb38 	bl	8005ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b00      	cmp	r3, #0
 8005472:	d020      	beq.n	80054b6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d01b      	beq.n	80054b6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f06f 0208 	mvn.w	r2, #8
 8005486:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2204      	movs	r2, #4
 800548c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	f003 0303 	and.w	r3, r3, #3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fb0f 	bl	8005ac0 <HAL_TIM_IC_CaptureCallback>
 80054a2:	e005      	b.n	80054b0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fb01 	bl	8005aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fb12 	bl	8005ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d020      	beq.n	8005502 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f003 0310 	and.w	r3, r3, #16
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d01b      	beq.n	8005502 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f06f 0210 	mvn.w	r2, #16
 80054d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2208      	movs	r2, #8
 80054d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fae9 	bl	8005ac0 <HAL_TIM_IC_CaptureCallback>
 80054ee:	e005      	b.n	80054fc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fadb 	bl	8005aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 faec 	bl	8005ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00c      	beq.n	8005526 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d007      	beq.n	8005526 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f06f 0201 	mvn.w	r2, #1
 800551e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7fc f997 	bl	8001854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800552c:	2b00      	cmp	r3, #0
 800552e:	d104      	bne.n	800553a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00c      	beq.n	8005554 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005540:	2b00      	cmp	r3, #0
 8005542:	d007      	beq.n	8005554 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800554c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f001 f8a8 	bl	80066a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00c      	beq.n	8005578 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005564:	2b00      	cmp	r3, #0
 8005566:	d007      	beq.n	8005578 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f001 f8a0 	bl	80066b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00c      	beq.n	800559c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005588:	2b00      	cmp	r3, #0
 800558a:	d007      	beq.n	800559c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 faa6 	bl	8005ae8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00c      	beq.n	80055c0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d007      	beq.n	80055c0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0220 	mvn.w	r2, #32
 80055b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f001 f868 	bl	8006690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00c      	beq.n	80055e4 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d007      	beq.n	80055e4 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80055dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f001 f874 	bl	80066cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00c      	beq.n	8005608 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d007      	beq.n	8005608 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f001 f86c 	bl	80066e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00c      	beq.n	800562c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d007      	beq.n	800562c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f001 f864 	bl	80066f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00c      	beq.n	8005650 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d007      	beq.n	8005650 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f001 f85c 	bl	8006708 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005650:	bf00      	nop
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800566e:	2b01      	cmp	r3, #1
 8005670:	d101      	bne.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005672:	2302      	movs	r3, #2
 8005674:	e0ff      	b.n	8005876 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b14      	cmp	r3, #20
 8005682:	f200 80f0 	bhi.w	8005866 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005686:	a201      	add	r2, pc, #4	@ (adr r2, 800568c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568c:	080056e1 	.word	0x080056e1
 8005690:	08005867 	.word	0x08005867
 8005694:	08005867 	.word	0x08005867
 8005698:	08005867 	.word	0x08005867
 800569c:	08005721 	.word	0x08005721
 80056a0:	08005867 	.word	0x08005867
 80056a4:	08005867 	.word	0x08005867
 80056a8:	08005867 	.word	0x08005867
 80056ac:	08005763 	.word	0x08005763
 80056b0:	08005867 	.word	0x08005867
 80056b4:	08005867 	.word	0x08005867
 80056b8:	08005867 	.word	0x08005867
 80056bc:	080057a3 	.word	0x080057a3
 80056c0:	08005867 	.word	0x08005867
 80056c4:	08005867 	.word	0x08005867
 80056c8:	08005867 	.word	0x08005867
 80056cc:	080057e5 	.word	0x080057e5
 80056d0:	08005867 	.word	0x08005867
 80056d4:	08005867 	.word	0x08005867
 80056d8:	08005867 	.word	0x08005867
 80056dc:	08005825 	.word	0x08005825
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68b9      	ldr	r1, [r7, #8]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fabc 	bl	8005c64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0208 	orr.w	r2, r2, #8
 80056fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0204 	bic.w	r2, r2, #4
 800570a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6999      	ldr	r1, [r3, #24]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	619a      	str	r2, [r3, #24]
      break;
 800571e:	e0a5      	b.n	800586c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fb36 	bl	8005d98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800573a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699a      	ldr	r2, [r3, #24]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800574a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6999      	ldr	r1, [r3, #24]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	021a      	lsls	r2, r3, #8
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	619a      	str	r2, [r3, #24]
      break;
 8005760:	e084      	b.n	800586c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68b9      	ldr	r1, [r7, #8]
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fba9 	bl	8005ec0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0208 	orr.w	r2, r2, #8
 800577c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69da      	ldr	r2, [r3, #28]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0204 	bic.w	r2, r2, #4
 800578c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69d9      	ldr	r1, [r3, #28]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	61da      	str	r2, [r3, #28]
      break;
 80057a0:	e064      	b.n	800586c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68b9      	ldr	r1, [r7, #8]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 fc1b 	bl	8005fe4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69da      	ldr	r2, [r3, #28]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69d9      	ldr	r1, [r3, #28]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	021a      	lsls	r2, r3, #8
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	61da      	str	r2, [r3, #28]
      break;
 80057e2:	e043      	b.n	800586c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fc8e 	bl	800610c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0208 	orr.w	r2, r2, #8
 80057fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0204 	bic.w	r2, r2, #4
 800580e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	691a      	ldr	r2, [r3, #16]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005822:	e023      	b.n	800586c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68b9      	ldr	r1, [r7, #8]
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fcd8 	bl	80061e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800583e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800584e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	021a      	lsls	r2, r3, #8
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005864:	e002      	b.n	800586c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	75fb      	strb	r3, [r7, #23]
      break;
 800586a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005874:	7dfb      	ldrb	r3, [r7, #23]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop

08005880 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_TIM_ConfigClockSource+0x1c>
 8005898:	2302      	movs	r3, #2
 800589a:	e0f6      	b.n	8005a8a <HAL_TIM_ConfigClockSource+0x20a>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80058ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80058be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a6f      	ldr	r2, [pc, #444]	@ (8005a94 <HAL_TIM_ConfigClockSource+0x214>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	f000 80c1 	beq.w	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 80058dc:	4a6d      	ldr	r2, [pc, #436]	@ (8005a94 <HAL_TIM_ConfigClockSource+0x214>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	f200 80c6 	bhi.w	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 80058e4:	4a6c      	ldr	r2, [pc, #432]	@ (8005a98 <HAL_TIM_ConfigClockSource+0x218>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	f000 80b9 	beq.w	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 80058ec:	4a6a      	ldr	r2, [pc, #424]	@ (8005a98 <HAL_TIM_ConfigClockSource+0x218>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	f200 80be 	bhi.w	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 80058f4:	4a69      	ldr	r2, [pc, #420]	@ (8005a9c <HAL_TIM_ConfigClockSource+0x21c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	f000 80b1 	beq.w	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 80058fc:	4a67      	ldr	r2, [pc, #412]	@ (8005a9c <HAL_TIM_ConfigClockSource+0x21c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	f200 80b6 	bhi.w	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005904:	4a66      	ldr	r2, [pc, #408]	@ (8005aa0 <HAL_TIM_ConfigClockSource+0x220>)
 8005906:	4293      	cmp	r3, r2
 8005908:	f000 80a9 	beq.w	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 800590c:	4a64      	ldr	r2, [pc, #400]	@ (8005aa0 <HAL_TIM_ConfigClockSource+0x220>)
 800590e:	4293      	cmp	r3, r2
 8005910:	f200 80ae 	bhi.w	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005914:	4a63      	ldr	r2, [pc, #396]	@ (8005aa4 <HAL_TIM_ConfigClockSource+0x224>)
 8005916:	4293      	cmp	r3, r2
 8005918:	f000 80a1 	beq.w	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 800591c:	4a61      	ldr	r2, [pc, #388]	@ (8005aa4 <HAL_TIM_ConfigClockSource+0x224>)
 800591e:	4293      	cmp	r3, r2
 8005920:	f200 80a6 	bhi.w	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005924:	4a60      	ldr	r2, [pc, #384]	@ (8005aa8 <HAL_TIM_ConfigClockSource+0x228>)
 8005926:	4293      	cmp	r3, r2
 8005928:	f000 8099 	beq.w	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 800592c:	4a5e      	ldr	r2, [pc, #376]	@ (8005aa8 <HAL_TIM_ConfigClockSource+0x228>)
 800592e:	4293      	cmp	r3, r2
 8005930:	f200 809e 	bhi.w	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005934:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005938:	f000 8091 	beq.w	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 800593c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005940:	f200 8096 	bhi.w	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005944:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005948:	f000 8089 	beq.w	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 800594c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005950:	f200 808e 	bhi.w	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005954:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005958:	d03e      	beq.n	80059d8 <HAL_TIM_ConfigClockSource+0x158>
 800595a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800595e:	f200 8087 	bhi.w	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005966:	f000 8086 	beq.w	8005a76 <HAL_TIM_ConfigClockSource+0x1f6>
 800596a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800596e:	d87f      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005970:	2b70      	cmp	r3, #112	@ 0x70
 8005972:	d01a      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0x12a>
 8005974:	2b70      	cmp	r3, #112	@ 0x70
 8005976:	d87b      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005978:	2b60      	cmp	r3, #96	@ 0x60
 800597a:	d050      	beq.n	8005a1e <HAL_TIM_ConfigClockSource+0x19e>
 800597c:	2b60      	cmp	r3, #96	@ 0x60
 800597e:	d877      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005980:	2b50      	cmp	r3, #80	@ 0x50
 8005982:	d03c      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x17e>
 8005984:	2b50      	cmp	r3, #80	@ 0x50
 8005986:	d873      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005988:	2b40      	cmp	r3, #64	@ 0x40
 800598a:	d058      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x1be>
 800598c:	2b40      	cmp	r3, #64	@ 0x40
 800598e:	d86f      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005990:	2b30      	cmp	r3, #48	@ 0x30
 8005992:	d064      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 8005994:	2b30      	cmp	r3, #48	@ 0x30
 8005996:	d86b      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005998:	2b20      	cmp	r3, #32
 800599a:	d060      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 800599c:	2b20      	cmp	r3, #32
 800599e:	d867      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d05c      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 80059a4:	2b10      	cmp	r3, #16
 80059a6:	d05a      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 80059a8:	e062      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059ba:	f000 fcf9 	bl	80063b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80059cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	609a      	str	r2, [r3, #8]
      break;
 80059d6:	e04f      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059e8:	f000 fce2 	bl	80063b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059fa:	609a      	str	r2, [r3, #8]
      break;
 80059fc:	e03c      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f000 fc54 	bl	80062b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2150      	movs	r1, #80	@ 0x50
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fcad 	bl	8006376 <TIM_ITRx_SetConfig>
      break;
 8005a1c:	e02c      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f000 fc73 	bl	8006316 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2160      	movs	r1, #96	@ 0x60
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fc9d 	bl	8006376 <TIM_ITRx_SetConfig>
      break;
 8005a3c:	e01c      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f000 fc34 	bl	80062b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2140      	movs	r1, #64	@ 0x40
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fc8d 	bl	8006376 <TIM_ITRx_SetConfig>
      break;
 8005a5c:	e00c      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4619      	mov	r1, r3
 8005a68:	4610      	mov	r0, r2
 8005a6a:	f000 fc84 	bl	8006376 <TIM_ITRx_SetConfig>
      break;
 8005a6e:	e003      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	73fb      	strb	r3, [r7, #15]
      break;
 8005a74:	e000      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005a76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	00100070 	.word	0x00100070
 8005a98:	00100060 	.word	0x00100060
 8005a9c:	00100050 	.word	0x00100050
 8005aa0:	00100040 	.word	0x00100040
 8005aa4:	00100030 	.word	0x00100030
 8005aa8:	00100020 	.word	0x00100020

08005aac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a4c      	ldr	r2, [pc, #304]	@ (8005c40 <TIM_Base_SetConfig+0x144>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d017      	beq.n	8005b44 <TIM_Base_SetConfig+0x48>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b1a:	d013      	beq.n	8005b44 <TIM_Base_SetConfig+0x48>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a49      	ldr	r2, [pc, #292]	@ (8005c44 <TIM_Base_SetConfig+0x148>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00f      	beq.n	8005b44 <TIM_Base_SetConfig+0x48>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a48      	ldr	r2, [pc, #288]	@ (8005c48 <TIM_Base_SetConfig+0x14c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00b      	beq.n	8005b44 <TIM_Base_SetConfig+0x48>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a47      	ldr	r2, [pc, #284]	@ (8005c4c <TIM_Base_SetConfig+0x150>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d007      	beq.n	8005b44 <TIM_Base_SetConfig+0x48>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a46      	ldr	r2, [pc, #280]	@ (8005c50 <TIM_Base_SetConfig+0x154>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d003      	beq.n	8005b44 <TIM_Base_SetConfig+0x48>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a45      	ldr	r2, [pc, #276]	@ (8005c54 <TIM_Base_SetConfig+0x158>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d108      	bne.n	8005b56 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a39      	ldr	r2, [pc, #228]	@ (8005c40 <TIM_Base_SetConfig+0x144>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d023      	beq.n	8005ba6 <TIM_Base_SetConfig+0xaa>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b64:	d01f      	beq.n	8005ba6 <TIM_Base_SetConfig+0xaa>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a36      	ldr	r2, [pc, #216]	@ (8005c44 <TIM_Base_SetConfig+0x148>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d01b      	beq.n	8005ba6 <TIM_Base_SetConfig+0xaa>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a35      	ldr	r2, [pc, #212]	@ (8005c48 <TIM_Base_SetConfig+0x14c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d017      	beq.n	8005ba6 <TIM_Base_SetConfig+0xaa>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a34      	ldr	r2, [pc, #208]	@ (8005c4c <TIM_Base_SetConfig+0x150>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <TIM_Base_SetConfig+0xaa>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a33      	ldr	r2, [pc, #204]	@ (8005c50 <TIM_Base_SetConfig+0x154>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00f      	beq.n	8005ba6 <TIM_Base_SetConfig+0xaa>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a33      	ldr	r2, [pc, #204]	@ (8005c58 <TIM_Base_SetConfig+0x15c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00b      	beq.n	8005ba6 <TIM_Base_SetConfig+0xaa>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a32      	ldr	r2, [pc, #200]	@ (8005c5c <TIM_Base_SetConfig+0x160>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d007      	beq.n	8005ba6 <TIM_Base_SetConfig+0xaa>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a31      	ldr	r2, [pc, #196]	@ (8005c60 <TIM_Base_SetConfig+0x164>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d003      	beq.n	8005ba6 <TIM_Base_SetConfig+0xaa>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a2c      	ldr	r2, [pc, #176]	@ (8005c54 <TIM_Base_SetConfig+0x158>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d108      	bne.n	8005bb8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a18      	ldr	r2, [pc, #96]	@ (8005c40 <TIM_Base_SetConfig+0x144>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d013      	beq.n	8005c0c <TIM_Base_SetConfig+0x110>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a1a      	ldr	r2, [pc, #104]	@ (8005c50 <TIM_Base_SetConfig+0x154>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00f      	beq.n	8005c0c <TIM_Base_SetConfig+0x110>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a1a      	ldr	r2, [pc, #104]	@ (8005c58 <TIM_Base_SetConfig+0x15c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d00b      	beq.n	8005c0c <TIM_Base_SetConfig+0x110>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a19      	ldr	r2, [pc, #100]	@ (8005c5c <TIM_Base_SetConfig+0x160>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d007      	beq.n	8005c0c <TIM_Base_SetConfig+0x110>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a18      	ldr	r2, [pc, #96]	@ (8005c60 <TIM_Base_SetConfig+0x164>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d003      	beq.n	8005c0c <TIM_Base_SetConfig+0x110>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a13      	ldr	r2, [pc, #76]	@ (8005c54 <TIM_Base_SetConfig+0x158>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d103      	bne.n	8005c14 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d105      	bne.n	8005c32 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f023 0201 	bic.w	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	611a      	str	r2, [r3, #16]
  }
}
 8005c32:	bf00      	nop
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	40012c00 	.word	0x40012c00
 8005c44:	40000400 	.word	0x40000400
 8005c48:	40000800 	.word	0x40000800
 8005c4c:	40000c00 	.word	0x40000c00
 8005c50:	40013400 	.word	0x40013400
 8005c54:	40015000 	.word	0x40015000
 8005c58:	40014000 	.word	0x40014000
 8005c5c:	40014400 	.word	0x40014400
 8005c60:	40014800 	.word	0x40014800

08005c64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f023 0201 	bic.w	r2, r3, #1
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0303 	bic.w	r3, r3, #3
 8005c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f023 0302 	bic.w	r3, r3, #2
 8005cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a30      	ldr	r2, [pc, #192]	@ (8005d80 <TIM_OC1_SetConfig+0x11c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d013      	beq.n	8005cec <TIM_OC1_SetConfig+0x88>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a2f      	ldr	r2, [pc, #188]	@ (8005d84 <TIM_OC1_SetConfig+0x120>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00f      	beq.n	8005cec <TIM_OC1_SetConfig+0x88>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a2e      	ldr	r2, [pc, #184]	@ (8005d88 <TIM_OC1_SetConfig+0x124>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00b      	beq.n	8005cec <TIM_OC1_SetConfig+0x88>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a2d      	ldr	r2, [pc, #180]	@ (8005d8c <TIM_OC1_SetConfig+0x128>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d007      	beq.n	8005cec <TIM_OC1_SetConfig+0x88>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a2c      	ldr	r2, [pc, #176]	@ (8005d90 <TIM_OC1_SetConfig+0x12c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d003      	beq.n	8005cec <TIM_OC1_SetConfig+0x88>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a2b      	ldr	r2, [pc, #172]	@ (8005d94 <TIM_OC1_SetConfig+0x130>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d10c      	bne.n	8005d06 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f023 0308 	bic.w	r3, r3, #8
 8005cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f023 0304 	bic.w	r3, r3, #4
 8005d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a1d      	ldr	r2, [pc, #116]	@ (8005d80 <TIM_OC1_SetConfig+0x11c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d013      	beq.n	8005d36 <TIM_OC1_SetConfig+0xd2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a1c      	ldr	r2, [pc, #112]	@ (8005d84 <TIM_OC1_SetConfig+0x120>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00f      	beq.n	8005d36 <TIM_OC1_SetConfig+0xd2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a1b      	ldr	r2, [pc, #108]	@ (8005d88 <TIM_OC1_SetConfig+0x124>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00b      	beq.n	8005d36 <TIM_OC1_SetConfig+0xd2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a1a      	ldr	r2, [pc, #104]	@ (8005d8c <TIM_OC1_SetConfig+0x128>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d007      	beq.n	8005d36 <TIM_OC1_SetConfig+0xd2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a19      	ldr	r2, [pc, #100]	@ (8005d90 <TIM_OC1_SetConfig+0x12c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d003      	beq.n	8005d36 <TIM_OC1_SetConfig+0xd2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a18      	ldr	r2, [pc, #96]	@ (8005d94 <TIM_OC1_SetConfig+0x130>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d111      	bne.n	8005d5a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	621a      	str	r2, [r3, #32]
}
 8005d74:	bf00      	nop
 8005d76:	371c      	adds	r7, #28
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	40012c00 	.word	0x40012c00
 8005d84:	40013400 	.word	0x40013400
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40014400 	.word	0x40014400
 8005d90:	40014800 	.word	0x40014800
 8005d94:	40015000 	.word	0x40015000

08005d98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	f023 0210 	bic.w	r2, r3, #16
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	021b      	lsls	r3, r3, #8
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f023 0320 	bic.w	r3, r3, #32
 8005de6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a2c      	ldr	r2, [pc, #176]	@ (8005ea8 <TIM_OC2_SetConfig+0x110>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d007      	beq.n	8005e0c <TIM_OC2_SetConfig+0x74>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a2b      	ldr	r2, [pc, #172]	@ (8005eac <TIM_OC2_SetConfig+0x114>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d003      	beq.n	8005e0c <TIM_OC2_SetConfig+0x74>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a2a      	ldr	r2, [pc, #168]	@ (8005eb0 <TIM_OC2_SetConfig+0x118>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d10d      	bne.n	8005e28 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ea8 <TIM_OC2_SetConfig+0x110>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d013      	beq.n	8005e58 <TIM_OC2_SetConfig+0xc0>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a1e      	ldr	r2, [pc, #120]	@ (8005eac <TIM_OC2_SetConfig+0x114>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d00f      	beq.n	8005e58 <TIM_OC2_SetConfig+0xc0>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8005eb4 <TIM_OC2_SetConfig+0x11c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d00b      	beq.n	8005e58 <TIM_OC2_SetConfig+0xc0>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a1d      	ldr	r2, [pc, #116]	@ (8005eb8 <TIM_OC2_SetConfig+0x120>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d007      	beq.n	8005e58 <TIM_OC2_SetConfig+0xc0>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8005ebc <TIM_OC2_SetConfig+0x124>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d003      	beq.n	8005e58 <TIM_OC2_SetConfig+0xc0>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a17      	ldr	r2, [pc, #92]	@ (8005eb0 <TIM_OC2_SetConfig+0x118>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d113      	bne.n	8005e80 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	621a      	str	r2, [r3, #32]
}
 8005e9a:	bf00      	nop
 8005e9c:	371c      	adds	r7, #28
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	40012c00 	.word	0x40012c00
 8005eac:	40013400 	.word	0x40013400
 8005eb0:	40015000 	.word	0x40015000
 8005eb4:	40014000 	.word	0x40014000
 8005eb8:	40014400 	.word	0x40014400
 8005ebc:	40014800 	.word	0x40014800

08005ec0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0303 	bic.w	r3, r3, #3
 8005efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8005fcc <TIM_OC3_SetConfig+0x10c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d007      	beq.n	8005f32 <TIM_OC3_SetConfig+0x72>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a2a      	ldr	r2, [pc, #168]	@ (8005fd0 <TIM_OC3_SetConfig+0x110>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d003      	beq.n	8005f32 <TIM_OC3_SetConfig+0x72>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a29      	ldr	r2, [pc, #164]	@ (8005fd4 <TIM_OC3_SetConfig+0x114>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d10d      	bne.n	8005f4e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	021b      	lsls	r3, r3, #8
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a1e      	ldr	r2, [pc, #120]	@ (8005fcc <TIM_OC3_SetConfig+0x10c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d013      	beq.n	8005f7e <TIM_OC3_SetConfig+0xbe>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a1d      	ldr	r2, [pc, #116]	@ (8005fd0 <TIM_OC3_SetConfig+0x110>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00f      	beq.n	8005f7e <TIM_OC3_SetConfig+0xbe>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a1d      	ldr	r2, [pc, #116]	@ (8005fd8 <TIM_OC3_SetConfig+0x118>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00b      	beq.n	8005f7e <TIM_OC3_SetConfig+0xbe>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a1c      	ldr	r2, [pc, #112]	@ (8005fdc <TIM_OC3_SetConfig+0x11c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d007      	beq.n	8005f7e <TIM_OC3_SetConfig+0xbe>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a1b      	ldr	r2, [pc, #108]	@ (8005fe0 <TIM_OC3_SetConfig+0x120>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d003      	beq.n	8005f7e <TIM_OC3_SetConfig+0xbe>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a16      	ldr	r2, [pc, #88]	@ (8005fd4 <TIM_OC3_SetConfig+0x114>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d113      	bne.n	8005fa6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	011b      	lsls	r3, r3, #4
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	621a      	str	r2, [r3, #32]
}
 8005fc0:	bf00      	nop
 8005fc2:	371c      	adds	r7, #28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	40012c00 	.word	0x40012c00
 8005fd0:	40013400 	.word	0x40013400
 8005fd4:	40015000 	.word	0x40015000
 8005fd8:	40014000 	.word	0x40014000
 8005fdc:	40014400 	.word	0x40014400
 8005fe0:	40014800 	.word	0x40014800

08005fe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006012:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800601e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	021b      	lsls	r3, r3, #8
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4313      	orrs	r3, r2
 800602a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006032:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	031b      	lsls	r3, r3, #12
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	4313      	orrs	r3, r2
 800603e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a2c      	ldr	r2, [pc, #176]	@ (80060f4 <TIM_OC4_SetConfig+0x110>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d007      	beq.n	8006058 <TIM_OC4_SetConfig+0x74>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a2b      	ldr	r2, [pc, #172]	@ (80060f8 <TIM_OC4_SetConfig+0x114>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d003      	beq.n	8006058 <TIM_OC4_SetConfig+0x74>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a2a      	ldr	r2, [pc, #168]	@ (80060fc <TIM_OC4_SetConfig+0x118>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d10d      	bne.n	8006074 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800605e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	031b      	lsls	r3, r3, #12
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006072:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a1f      	ldr	r2, [pc, #124]	@ (80060f4 <TIM_OC4_SetConfig+0x110>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d013      	beq.n	80060a4 <TIM_OC4_SetConfig+0xc0>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a1e      	ldr	r2, [pc, #120]	@ (80060f8 <TIM_OC4_SetConfig+0x114>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d00f      	beq.n	80060a4 <TIM_OC4_SetConfig+0xc0>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a1e      	ldr	r2, [pc, #120]	@ (8006100 <TIM_OC4_SetConfig+0x11c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00b      	beq.n	80060a4 <TIM_OC4_SetConfig+0xc0>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a1d      	ldr	r2, [pc, #116]	@ (8006104 <TIM_OC4_SetConfig+0x120>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d007      	beq.n	80060a4 <TIM_OC4_SetConfig+0xc0>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a1c      	ldr	r2, [pc, #112]	@ (8006108 <TIM_OC4_SetConfig+0x124>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d003      	beq.n	80060a4 <TIM_OC4_SetConfig+0xc0>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a17      	ldr	r2, [pc, #92]	@ (80060fc <TIM_OC4_SetConfig+0x118>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d113      	bne.n	80060cc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060aa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060b2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	019b      	lsls	r3, r3, #6
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	4313      	orrs	r3, r2
 80060be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	019b      	lsls	r3, r3, #6
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	621a      	str	r2, [r3, #32]
}
 80060e6:	bf00      	nop
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40012c00 	.word	0x40012c00
 80060f8:	40013400 	.word	0x40013400
 80060fc:	40015000 	.word	0x40015000
 8006100:	40014000 	.word	0x40014000
 8006104:	40014400 	.word	0x40014400
 8006108:	40014800 	.word	0x40014800

0800610c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800610c:	b480      	push	{r7}
 800610e:	b087      	sub	sp, #28
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800613a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800613e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006150:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	041b      	lsls	r3, r3, #16
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a19      	ldr	r2, [pc, #100]	@ (80061c8 <TIM_OC5_SetConfig+0xbc>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d013      	beq.n	800618e <TIM_OC5_SetConfig+0x82>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a18      	ldr	r2, [pc, #96]	@ (80061cc <TIM_OC5_SetConfig+0xc0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00f      	beq.n	800618e <TIM_OC5_SetConfig+0x82>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a17      	ldr	r2, [pc, #92]	@ (80061d0 <TIM_OC5_SetConfig+0xc4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d00b      	beq.n	800618e <TIM_OC5_SetConfig+0x82>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a16      	ldr	r2, [pc, #88]	@ (80061d4 <TIM_OC5_SetConfig+0xc8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d007      	beq.n	800618e <TIM_OC5_SetConfig+0x82>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a15      	ldr	r2, [pc, #84]	@ (80061d8 <TIM_OC5_SetConfig+0xcc>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d003      	beq.n	800618e <TIM_OC5_SetConfig+0x82>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a14      	ldr	r2, [pc, #80]	@ (80061dc <TIM_OC5_SetConfig+0xd0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d109      	bne.n	80061a2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006194:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	021b      	lsls	r3, r3, #8
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	621a      	str	r2, [r3, #32]
}
 80061bc:	bf00      	nop
 80061be:	371c      	adds	r7, #28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	40012c00 	.word	0x40012c00
 80061cc:	40013400 	.word	0x40013400
 80061d0:	40014000 	.word	0x40014000
 80061d4:	40014400 	.word	0x40014400
 80061d8:	40014800 	.word	0x40014800
 80061dc:	40015000 	.word	0x40015000

080061e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800620e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	021b      	lsls	r3, r3, #8
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	051b      	lsls	r3, r3, #20
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a1a      	ldr	r2, [pc, #104]	@ (80062a0 <TIM_OC6_SetConfig+0xc0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d013      	beq.n	8006264 <TIM_OC6_SetConfig+0x84>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a19      	ldr	r2, [pc, #100]	@ (80062a4 <TIM_OC6_SetConfig+0xc4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00f      	beq.n	8006264 <TIM_OC6_SetConfig+0x84>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a18      	ldr	r2, [pc, #96]	@ (80062a8 <TIM_OC6_SetConfig+0xc8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d00b      	beq.n	8006264 <TIM_OC6_SetConfig+0x84>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a17      	ldr	r2, [pc, #92]	@ (80062ac <TIM_OC6_SetConfig+0xcc>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d007      	beq.n	8006264 <TIM_OC6_SetConfig+0x84>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a16      	ldr	r2, [pc, #88]	@ (80062b0 <TIM_OC6_SetConfig+0xd0>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d003      	beq.n	8006264 <TIM_OC6_SetConfig+0x84>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a15      	ldr	r2, [pc, #84]	@ (80062b4 <TIM_OC6_SetConfig+0xd4>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d109      	bne.n	8006278 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800626a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	029b      	lsls	r3, r3, #10
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	4313      	orrs	r3, r2
 8006276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	621a      	str	r2, [r3, #32]
}
 8006292:	bf00      	nop
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40012c00 	.word	0x40012c00
 80062a4:	40013400 	.word	0x40013400
 80062a8:	40014000 	.word	0x40014000
 80062ac:	40014400 	.word	0x40014400
 80062b0:	40014800 	.word	0x40014800
 80062b4:	40015000 	.word	0x40015000

080062b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	f023 0201 	bic.w	r2, r3, #1
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f023 030a 	bic.w	r3, r3, #10
 80062f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006316:	b480      	push	{r7}
 8006318:	b087      	sub	sp, #28
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	f023 0210 	bic.w	r2, r3, #16
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006340:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	031b      	lsls	r3, r3, #12
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	4313      	orrs	r3, r2
 800634a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006352:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	4313      	orrs	r3, r2
 800635c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	621a      	str	r2, [r3, #32]
}
 800636a:	bf00      	nop
 800636c:	371c      	adds	r7, #28
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006376:	b480      	push	{r7}
 8006378:	b085      	sub	sp, #20
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800638c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	f043 0307 	orr.w	r3, r3, #7
 800639c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	609a      	str	r2, [r3, #8]
}
 80063a4:	bf00      	nop
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	021a      	lsls	r2, r3, #8
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	431a      	orrs	r2, r3
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	4313      	orrs	r3, r2
 80063dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	609a      	str	r2, [r3, #8]
}
 80063e4:	bf00      	nop
 80063e6:	371c      	adds	r7, #28
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f003 031f 	and.w	r3, r3, #31
 8006402:	2201      	movs	r2, #1
 8006404:	fa02 f303 	lsl.w	r3, r2, r3
 8006408:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a1a      	ldr	r2, [r3, #32]
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	43db      	mvns	r3, r3
 8006412:	401a      	ands	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6a1a      	ldr	r2, [r3, #32]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f003 031f 	and.w	r3, r3, #31
 8006422:	6879      	ldr	r1, [r7, #4]
 8006424:	fa01 f303 	lsl.w	r3, r1, r3
 8006428:	431a      	orrs	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	621a      	str	r2, [r3, #32]
}
 800642e:	bf00      	nop
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
	...

0800643c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006450:	2302      	movs	r3, #2
 8006452:	e074      	b.n	800653e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2202      	movs	r2, #2
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a34      	ldr	r2, [pc, #208]	@ (800654c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d009      	beq.n	8006492 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a33      	ldr	r2, [pc, #204]	@ (8006550 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d004      	beq.n	8006492 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a31      	ldr	r2, [pc, #196]	@ (8006554 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d108      	bne.n	80064a4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006498:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80064aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a21      	ldr	r2, [pc, #132]	@ (800654c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d022      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064d4:	d01d      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a1f      	ldr	r2, [pc, #124]	@ (8006558 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d018      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a1d      	ldr	r2, [pc, #116]	@ (800655c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d013      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a1c      	ldr	r2, [pc, #112]	@ (8006560 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00e      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a15      	ldr	r2, [pc, #84]	@ (8006550 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d009      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a18      	ldr	r2, [pc, #96]	@ (8006564 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d004      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a11      	ldr	r2, [pc, #68]	@ (8006554 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d10c      	bne.n	800652c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	4313      	orrs	r3, r2
 8006522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40012c00 	.word	0x40012c00
 8006550:	40013400 	.word	0x40013400
 8006554:	40015000 	.word	0x40015000
 8006558:	40000400 	.word	0x40000400
 800655c:	40000800 	.word	0x40000800
 8006560:	40000c00 	.word	0x40000c00
 8006564:	40014000 	.word	0x40014000

08006568 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800657c:	2b01      	cmp	r3, #1
 800657e:	d101      	bne.n	8006584 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006580:	2302      	movs	r3, #2
 8006582:	e078      	b.n	8006676 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	041b      	lsls	r3, r3, #16
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	4313      	orrs	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a1c      	ldr	r2, [pc, #112]	@ (8006684 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d009      	beq.n	800662a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a1b      	ldr	r2, [pc, #108]	@ (8006688 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d004      	beq.n	800662a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a19      	ldr	r2, [pc, #100]	@ (800668c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d11c      	bne.n	8006664 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006634:	051b      	lsls	r3, r3, #20
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	4313      	orrs	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006652:	4313      	orrs	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006660:	4313      	orrs	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	40012c00 	.word	0x40012c00
 8006688:	40013400 	.word	0x40013400
 800668c:	40015000 	.word	0x40015000

08006690 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	ed93 7a06 	vldr	s14, [r3, #24]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	edd3 7a07 	vldr	s15, [r3, #28]
 8006732:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	edd3 7a08 	vldr	s15, [r3, #32]
 800673c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	edd3 7a06 	vldr	s15, [r3, #24]
 800674c:	eeb1 7a67 	vneg.f32	s14, s15
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	edd3 7a08 	vldr	s15, [r3, #32]
 8006756:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800675a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a1a      	ldr	r2, [r3, #32]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d006      	beq.n	8006780 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	330c      	adds	r3, #12
 8006776:	220c      	movs	r2, #12
 8006778:	2100      	movs	r1, #0
 800677a:	4618      	mov	r0, r3
 800677c:	f000 f804 	bl	8006788 <memset>
  }

}
 8006780:	bf00      	nop
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <memset>:
 8006788:	4402      	add	r2, r0
 800678a:	4603      	mov	r3, r0
 800678c:	4293      	cmp	r3, r2
 800678e:	d100      	bne.n	8006792 <memset+0xa>
 8006790:	4770      	bx	lr
 8006792:	f803 1b01 	strb.w	r1, [r3], #1
 8006796:	e7f9      	b.n	800678c <memset+0x4>

08006798 <__libc_init_array>:
 8006798:	b570      	push	{r4, r5, r6, lr}
 800679a:	4d0d      	ldr	r5, [pc, #52]	@ (80067d0 <__libc_init_array+0x38>)
 800679c:	4c0d      	ldr	r4, [pc, #52]	@ (80067d4 <__libc_init_array+0x3c>)
 800679e:	1b64      	subs	r4, r4, r5
 80067a0:	10a4      	asrs	r4, r4, #2
 80067a2:	2600      	movs	r6, #0
 80067a4:	42a6      	cmp	r6, r4
 80067a6:	d109      	bne.n	80067bc <__libc_init_array+0x24>
 80067a8:	4d0b      	ldr	r5, [pc, #44]	@ (80067d8 <__libc_init_array+0x40>)
 80067aa:	4c0c      	ldr	r4, [pc, #48]	@ (80067dc <__libc_init_array+0x44>)
 80067ac:	f000 f818 	bl	80067e0 <_init>
 80067b0:	1b64      	subs	r4, r4, r5
 80067b2:	10a4      	asrs	r4, r4, #2
 80067b4:	2600      	movs	r6, #0
 80067b6:	42a6      	cmp	r6, r4
 80067b8:	d105      	bne.n	80067c6 <__libc_init_array+0x2e>
 80067ba:	bd70      	pop	{r4, r5, r6, pc}
 80067bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c0:	4798      	blx	r3
 80067c2:	3601      	adds	r6, #1
 80067c4:	e7ee      	b.n	80067a4 <__libc_init_array+0xc>
 80067c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ca:	4798      	blx	r3
 80067cc:	3601      	adds	r6, #1
 80067ce:	e7f2      	b.n	80067b6 <__libc_init_array+0x1e>
 80067d0:	08006808 	.word	0x08006808
 80067d4:	08006808 	.word	0x08006808
 80067d8:	08006808 	.word	0x08006808
 80067dc:	0800680c 	.word	0x0800680c

080067e0 <_init>:
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e2:	bf00      	nop
 80067e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e6:	bc08      	pop	{r3}
 80067e8:	469e      	mov	lr, r3
 80067ea:	4770      	bx	lr

080067ec <_fini>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	bf00      	nop
 80067f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067f2:	bc08      	pop	{r3}
 80067f4:	469e      	mov	lr, r3
 80067f6:	4770      	bx	lr
