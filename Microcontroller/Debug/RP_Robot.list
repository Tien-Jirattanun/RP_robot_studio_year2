
RP_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005618  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080057f0  080057f0  000067f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005800  08005800  00007014  2**0
                  CONTENTS
  4 .ARM          00000000  08005800  08005800  00007014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005800  08005800  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005800  08005800  00006800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005804  08005804  00006804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005808  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000018  0800581c  00007018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  0800581c  0000727c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012025  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002716  00000000  00000000  00019069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  0001b780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e00  00000000  00000000  0001c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282dd  00000000  00000000  0001d7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b34  00000000  00000000  00045a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e5bc  00000000  00000000  000595b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00167b75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004df0  00000000  00000000  00167bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0016c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080057d8 	.word	0x080057d8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	080057d8 	.word	0x080057d8

08000218 <__aeabi_d2f>:
 8000218:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800021c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000220:	bf24      	itt	cs
 8000222:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000226:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800022a:	d90d      	bls.n	8000248 <__aeabi_d2f+0x30>
 800022c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000230:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000234:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000238:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800023c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000240:	bf08      	it	eq
 8000242:	f020 0001 	biceq.w	r0, r0, #1
 8000246:	4770      	bx	lr
 8000248:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800024c:	d121      	bne.n	8000292 <__aeabi_d2f+0x7a>
 800024e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000252:	bfbc      	itt	lt
 8000254:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000258:	4770      	bxlt	lr
 800025a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800025e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000262:	f1c2 0218 	rsb	r2, r2, #24
 8000266:	f1c2 0c20 	rsb	ip, r2, #32
 800026a:	fa10 f30c 	lsls.w	r3, r0, ip
 800026e:	fa20 f002 	lsr.w	r0, r0, r2
 8000272:	bf18      	it	ne
 8000274:	f040 0001 	orrne.w	r0, r0, #1
 8000278:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800027c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000280:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000284:	ea40 000c 	orr.w	r0, r0, ip
 8000288:	fa23 f302 	lsr.w	r3, r3, r2
 800028c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000290:	e7cc      	b.n	800022c <__aeabi_d2f+0x14>
 8000292:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000296:	d107      	bne.n	80002a8 <__aeabi_d2f+0x90>
 8000298:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800029c:	bf1e      	ittt	ne
 800029e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80002a2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80002a6:	4770      	bxne	lr
 80002a8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80002ac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop

080002b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002bc:	f000 fe91 	bl	8000fe2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c0:	f000 f85e 	bl	8000380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c4:	f000 fb1c 	bl	8000900 <MX_GPIO_Init>
  MX_DMA_Init();
 80002c8:	f000 faf0 	bl	80008ac <MX_DMA_Init>
  MX_TIM1_Init();
 80002cc:	f000 f92c 	bl	8000528 <MX_TIM1_Init>
  MX_TIM3_Init();
 80002d0:	f000 fa40 	bl	8000754 <MX_TIM3_Init>
  MX_TIM4_Init();
 80002d4:	f000 fa94 	bl	8000800 <MX_TIM4_Init>
  MX_ADC1_Init();
 80002d8:	f000 f89e 	bl	8000418 <MX_ADC1_Init>
  MX_TIM2_Init();
 80002dc:	f000 f9ec 	bl	80006b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	// Setup PWM Generator
	HAL_TIM_Base_Start(&htim1);
 80002e0:	481f      	ldr	r0, [pc, #124]	@ (8000360 <main+0xa8>)
 80002e2:	f003 fcd5 	bl	8003c90 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002e6:	2100      	movs	r1, #0
 80002e8:	481d      	ldr	r0, [pc, #116]	@ (8000360 <main+0xa8>)
 80002ea:	f003 fe1b 	bl	8003f24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80002ee:	2104      	movs	r1, #4
 80002f0:	481b      	ldr	r0, [pc, #108]	@ (8000360 <main+0xa8>)
 80002f2:	f003 fe17 	bl	8003f24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80002f6:	2108      	movs	r1, #8
 80002f8:	4819      	ldr	r0, [pc, #100]	@ (8000360 <main+0xa8>)
 80002fa:	f003 fe13 	bl	8003f24 <HAL_TIM_PWM_Start>

	// Setup Encoder
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80002fe:	213c      	movs	r1, #60	@ 0x3c
 8000300:	4818      	ldr	r0, [pc, #96]	@ (8000364 <main+0xac>)
 8000302:	f003 ffc7 	bl	8004294 <HAL_TIM_Encoder_Start>
	prismatic_raw_encoder_val = __HAL_TIM_GET_COUNTER(&htim4);
 8000306:	4b17      	ldr	r3, [pc, #92]	@ (8000364 <main+0xac>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800030c:	461a      	mov	r2, r3
 800030e:	4b16      	ldr	r3, [pc, #88]	@ (8000368 <main+0xb0>)
 8000310:	601a      	str	r2, [r3, #0]

	// Setup Timer 2 for sensor reading
	HAL_TIM_Base_Start_IT(&htim2);
 8000312:	4816      	ldr	r0, [pc, #88]	@ (800036c <main+0xb4>)
 8000314:	f003 fd2c 	bl	8003d70 <HAL_TIM_Base_Start_IT>

	//PID
	PID.Kp = prismatic_Kp;
 8000318:	4b15      	ldr	r3, [pc, #84]	@ (8000370 <main+0xb8>)
 800031a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800031e:	4610      	mov	r0, r2
 8000320:	4619      	mov	r1, r3
 8000322:	f7ff ff79 	bl	8000218 <__aeabi_d2f>
 8000326:	4603      	mov	r3, r0
 8000328:	4a12      	ldr	r2, [pc, #72]	@ (8000374 <main+0xbc>)
 800032a:	6193      	str	r3, [r2, #24]
	PID.Ki = prismatic_Ki;
 800032c:	4b12      	ldr	r3, [pc, #72]	@ (8000378 <main+0xc0>)
 800032e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000332:	4610      	mov	r0, r2
 8000334:	4619      	mov	r1, r3
 8000336:	f7ff ff6f 	bl	8000218 <__aeabi_d2f>
 800033a:	4603      	mov	r3, r0
 800033c:	4a0d      	ldr	r2, [pc, #52]	@ (8000374 <main+0xbc>)
 800033e:	61d3      	str	r3, [r2, #28]
	PID.Kd = prismatic_Kd;
 8000340:	4b0e      	ldr	r3, [pc, #56]	@ (800037c <main+0xc4>)
 8000342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000346:	4610      	mov	r0, r2
 8000348:	4619      	mov	r1, r3
 800034a:	f7ff ff65 	bl	8000218 <__aeabi_d2f>
 800034e:	4603      	mov	r3, r0
 8000350:	4a08      	ldr	r2, [pc, #32]	@ (8000374 <main+0xbc>)
 8000352:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 0);
 8000354:	2100      	movs	r1, #0
 8000356:	4807      	ldr	r0, [pc, #28]	@ (8000374 <main+0xbc>)
 8000358:	f005 f9dc 	bl	8005714 <arm_pid_init_f32>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800035c:	bf00      	nop
 800035e:	e7fd      	b.n	800035c <main+0xa4>
 8000360:	20000100 	.word	0x20000100
 8000364:	200001e4 	.word	0x200001e4
 8000368:	20000234 	.word	0x20000234
 800036c:	2000014c 	.word	0x2000014c
 8000370:	20000000 	.word	0x20000000
 8000374:	20000240 	.word	0x20000240
 8000378:	20000268 	.word	0x20000268
 800037c:	20000270 	.word	0x20000270

08000380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b094      	sub	sp, #80	@ 0x50
 8000384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000386:	f107 0318 	add.w	r3, r7, #24
 800038a:	2238      	movs	r2, #56	@ 0x38
 800038c:	2100      	movs	r1, #0
 800038e:	4618      	mov	r0, r3
 8000390:	f005 f9f6 	bl	8005780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
 80003a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003a2:	2000      	movs	r0, #0
 80003a4:	f002 fc24 	bl	8002bf0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a8:	2302      	movs	r3, #2
 80003aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b2:	2340      	movs	r3, #64	@ 0x40
 80003b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b6:	2302      	movs	r3, #2
 80003b8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003ba:	2302      	movs	r3, #2
 80003bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80003be:	2304      	movs	r3, #4
 80003c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80003c2:	2355      	movs	r3, #85	@ 0x55
 80003c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003c6:	2302      	movs	r3, #2
 80003c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003ca:	2302      	movs	r3, #2
 80003cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003ce:	2302      	movs	r3, #2
 80003d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d2:	f107 0318 	add.w	r3, r7, #24
 80003d6:	4618      	mov	r0, r3
 80003d8:	f002 fcbe 	bl	8002d58 <HAL_RCC_OscConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003e2:	f000 fbb5 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e6:	230f      	movs	r3, #15
 80003e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ea:	2303      	movs	r3, #3
 80003ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2104      	movs	r1, #4
 80003fe:	4618      	mov	r0, r3
 8000400:	f002 ffbc 	bl	800337c <HAL_RCC_ClockConfig>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800040a:	f000 fba1 	bl	8000b50 <Error_Handler>
  }
}
 800040e:	bf00      	nop
 8000410:	3750      	adds	r7, #80	@ 0x50
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b08c      	sub	sp, #48	@ 0x30
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800041e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2220      	movs	r2, #32
 800042e:	2100      	movs	r1, #0
 8000430:	4618      	mov	r0, r3
 8000432:	f005 f9a5 	bl	8005780 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000436:	4b39      	ldr	r3, [pc, #228]	@ (800051c <MX_ADC1_Init+0x104>)
 8000438:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800043c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800043e:	4b37      	ldr	r3, [pc, #220]	@ (800051c <MX_ADC1_Init+0x104>)
 8000440:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000444:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000446:	4b35      	ldr	r3, [pc, #212]	@ (800051c <MX_ADC1_Init+0x104>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800044c:	4b33      	ldr	r3, [pc, #204]	@ (800051c <MX_ADC1_Init+0x104>)
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000452:	4b32      	ldr	r3, [pc, #200]	@ (800051c <MX_ADC1_Init+0x104>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000458:	4b30      	ldr	r3, [pc, #192]	@ (800051c <MX_ADC1_Init+0x104>)
 800045a:	2201      	movs	r2, #1
 800045c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800045e:	4b2f      	ldr	r3, [pc, #188]	@ (800051c <MX_ADC1_Init+0x104>)
 8000460:	2204      	movs	r2, #4
 8000462:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000464:	4b2d      	ldr	r3, [pc, #180]	@ (800051c <MX_ADC1_Init+0x104>)
 8000466:	2200      	movs	r2, #0
 8000468:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800046a:	4b2c      	ldr	r3, [pc, #176]	@ (800051c <MX_ADC1_Init+0x104>)
 800046c:	2201      	movs	r2, #1
 800046e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000470:	4b2a      	ldr	r3, [pc, #168]	@ (800051c <MX_ADC1_Init+0x104>)
 8000472:	2202      	movs	r2, #2
 8000474:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000476:	4b29      	ldr	r3, [pc, #164]	@ (800051c <MX_ADC1_Init+0x104>)
 8000478:	2200      	movs	r2, #0
 800047a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800047e:	4b27      	ldr	r3, [pc, #156]	@ (800051c <MX_ADC1_Init+0x104>)
 8000480:	2200      	movs	r2, #0
 8000482:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000484:	4b25      	ldr	r3, [pc, #148]	@ (800051c <MX_ADC1_Init+0x104>)
 8000486:	2200      	movs	r2, #0
 8000488:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800048a:	4b24      	ldr	r3, [pc, #144]	@ (800051c <MX_ADC1_Init+0x104>)
 800048c:	2201      	movs	r2, #1
 800048e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000492:	4b22      	ldr	r3, [pc, #136]	@ (800051c <MX_ADC1_Init+0x104>)
 8000494:	2200      	movs	r2, #0
 8000496:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000498:	4b20      	ldr	r3, [pc, #128]	@ (800051c <MX_ADC1_Init+0x104>)
 800049a:	2200      	movs	r2, #0
 800049c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004a0:	481e      	ldr	r0, [pc, #120]	@ (800051c <MX_ADC1_Init+0x104>)
 80004a2:	f000 ffe5 	bl	8001470 <HAL_ADC_Init>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80004ac:	f000 fb50 	bl	8000b50 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004b0:	2300      	movs	r3, #0
 80004b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004b8:	4619      	mov	r1, r3
 80004ba:	4818      	ldr	r0, [pc, #96]	@ (800051c <MX_ADC1_Init+0x104>)
 80004bc:	f001 fdfa 	bl	80020b4 <HAL_ADCEx_MultiModeConfigChannel>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80004c6:	f000 fb43 	bl	8000b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80004ca:	4b15      	ldr	r3, [pc, #84]	@ (8000520 <MX_ADC1_Init+0x108>)
 80004cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ce:	2306      	movs	r3, #6
 80004d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80004d2:	2307      	movs	r3, #7
 80004d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004d6:	237f      	movs	r3, #127	@ 0x7f
 80004d8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004da:	2304      	movs	r3, #4
 80004dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	4619      	mov	r1, r3
 80004e6:	480d      	ldr	r0, [pc, #52]	@ (800051c <MX_ADC1_Init+0x104>)
 80004e8:	f001 f97e 	bl	80017e8 <HAL_ADC_ConfigChannel>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80004f2:	f000 fb2d 	bl	8000b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80004f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000524 <MX_ADC1_Init+0x10c>)
 80004f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004fa:	230c      	movs	r3, #12
 80004fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	4619      	mov	r1, r3
 8000502:	4806      	ldr	r0, [pc, #24]	@ (800051c <MX_ADC1_Init+0x104>)
 8000504:	f001 f970 	bl	80017e8 <HAL_ADC_ConfigChannel>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800050e:	f000 fb1f 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000512:	bf00      	nop
 8000514:	3730      	adds	r7, #48	@ 0x30
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000034 	.word	0x20000034
 8000520:	1d500080 	.word	0x1d500080
 8000524:	21800100 	.word	0x21800100

08000528 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b09c      	sub	sp, #112	@ 0x70
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800052e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800053c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000548:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
 8000558:	615a      	str	r2, [r3, #20]
 800055a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2234      	movs	r2, #52	@ 0x34
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f005 f90c 	bl	8005780 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000568:	4b51      	ldr	r3, [pc, #324]	@ (80006b0 <MX_TIM1_Init+0x188>)
 800056a:	4a52      	ldr	r2, [pc, #328]	@ (80006b4 <MX_TIM1_Init+0x18c>)
 800056c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 800056e:	4b50      	ldr	r3, [pc, #320]	@ (80006b0 <MX_TIM1_Init+0x188>)
 8000570:	22a9      	movs	r2, #169	@ 0xa9
 8000572:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000574:	4b4e      	ldr	r3, [pc, #312]	@ (80006b0 <MX_TIM1_Init+0x188>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800057a:	4b4d      	ldr	r3, [pc, #308]	@ (80006b0 <MX_TIM1_Init+0x188>)
 800057c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000580:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000582:	4b4b      	ldr	r3, [pc, #300]	@ (80006b0 <MX_TIM1_Init+0x188>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000588:	4b49      	ldr	r3, [pc, #292]	@ (80006b0 <MX_TIM1_Init+0x188>)
 800058a:	2200      	movs	r2, #0
 800058c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800058e:	4b48      	ldr	r3, [pc, #288]	@ (80006b0 <MX_TIM1_Init+0x188>)
 8000590:	2200      	movs	r2, #0
 8000592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000594:	4846      	ldr	r0, [pc, #280]	@ (80006b0 <MX_TIM1_Init+0x188>)
 8000596:	f003 fb23 	bl	8003be0 <HAL_TIM_Base_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80005a0:	f000 fad6 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005a8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80005ae:	4619      	mov	r1, r3
 80005b0:	483f      	ldr	r0, [pc, #252]	@ (80006b0 <MX_TIM1_Init+0x188>)
 80005b2:	f004 f961 	bl	8004878 <HAL_TIM_ConfigClockSource>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80005bc:	f000 fac8 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005c0:	483b      	ldr	r0, [pc, #236]	@ (80006b0 <MX_TIM1_Init+0x188>)
 80005c2:	f003 fc4d 	bl	8003e60 <HAL_TIM_PWM_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80005cc:	f000 fac0 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005d0:	2300      	movs	r3, #0
 80005d2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005d4:	2300      	movs	r3, #0
 80005d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d8:	2300      	movs	r3, #0
 80005da:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80005e0:	4619      	mov	r1, r3
 80005e2:	4833      	ldr	r0, [pc, #204]	@ (80006b0 <MX_TIM1_Init+0x188>)
 80005e4:	f004 ff26 	bl	8005434 <HAL_TIMEx_MasterConfigSynchronization>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80005ee:	f000 faaf 	bl	8000b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005f2:	2360      	movs	r3, #96	@ 0x60
 80005f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005fa:	2300      	movs	r3, #0
 80005fc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005fe:	2300      	movs	r3, #0
 8000600:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000602:	2300      	movs	r3, #0
 8000604:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000606:	2300      	movs	r3, #0
 8000608:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800060a:	2300      	movs	r3, #0
 800060c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800060e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000612:	2200      	movs	r2, #0
 8000614:	4619      	mov	r1, r3
 8000616:	4826      	ldr	r0, [pc, #152]	@ (80006b0 <MX_TIM1_Init+0x188>)
 8000618:	f004 f81a 	bl	8004650 <HAL_TIM_PWM_ConfigChannel>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000622:	f000 fa95 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000626:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800062a:	2204      	movs	r2, #4
 800062c:	4619      	mov	r1, r3
 800062e:	4820      	ldr	r0, [pc, #128]	@ (80006b0 <MX_TIM1_Init+0x188>)
 8000630:	f004 f80e 	bl	8004650 <HAL_TIM_PWM_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800063a:	f000 fa89 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800063e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000642:	2208      	movs	r2, #8
 8000644:	4619      	mov	r1, r3
 8000646:	481a      	ldr	r0, [pc, #104]	@ (80006b0 <MX_TIM1_Init+0x188>)
 8000648:	f004 f802 	bl	8004650 <HAL_TIM_PWM_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000652:	f000 fa7d 	bl	8000b50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800066a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800066e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800067c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000680:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000686:	2300      	movs	r3, #0
 8000688:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800068a:	2300      	movs	r3, #0
 800068c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	4619      	mov	r1, r3
 8000692:	4807      	ldr	r0, [pc, #28]	@ (80006b0 <MX_TIM1_Init+0x188>)
 8000694:	f004 ff64 	bl	8005560 <HAL_TIMEx_ConfigBreakDeadTime>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800069e:	f000 fa57 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006a2:	4803      	ldr	r0, [pc, #12]	@ (80006b0 <MX_TIM1_Init+0x188>)
 80006a4:	f000 fbbe 	bl	8000e24 <HAL_TIM_MspPostInit>

}
 80006a8:	bf00      	nop
 80006aa:	3770      	adds	r7, #112	@ 0x70
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000100 	.word	0x20000100
 80006b4:	40012c00 	.word	0x40012c00

080006b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000750 <MX_TIM2_Init+0x98>)
 80006d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1699;
 80006de:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <MX_TIM2_Init+0x98>)
 80006e0:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80006e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000750 <MX_TIM2_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80006ec:	4b18      	ldr	r3, [pc, #96]	@ (8000750 <MX_TIM2_Init+0x98>)
 80006ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f4:	4b16      	ldr	r3, [pc, #88]	@ (8000750 <MX_TIM2_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fa:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <MX_TIM2_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000700:	4813      	ldr	r0, [pc, #76]	@ (8000750 <MX_TIM2_Init+0x98>)
 8000702:	f003 fa6d 	bl	8003be0 <HAL_TIM_Base_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800070c:	f000 fa20 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000714:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	4619      	mov	r1, r3
 800071c:	480c      	ldr	r0, [pc, #48]	@ (8000750 <MX_TIM2_Init+0x98>)
 800071e:	f004 f8ab 	bl	8004878 <HAL_TIM_ConfigClockSource>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000728:	f000 fa12 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	4619      	mov	r1, r3
 8000738:	4805      	ldr	r0, [pc, #20]	@ (8000750 <MX_TIM2_Init+0x98>)
 800073a:	f004 fe7b 	bl	8005434 <HAL_TIMEx_MasterConfigSynchronization>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000744:	f000 fa04 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	3720      	adds	r7, #32
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000014c 	.word	0x2000014c

08000754 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08c      	sub	sp, #48	@ 0x30
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2224      	movs	r2, #36	@ 0x24
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f005 f80c 	bl	8005780 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	463b      	mov	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000772:	4b21      	ldr	r3, [pc, #132]	@ (80007f8 <MX_TIM3_Init+0xa4>)
 8000774:	4a21      	ldr	r2, [pc, #132]	@ (80007fc <MX_TIM3_Init+0xa8>)
 8000776:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000778:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <MX_TIM3_Init+0xa4>)
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077e:	4b1e      	ldr	r3, [pc, #120]	@ (80007f8 <MX_TIM3_Init+0xa4>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2048;
 8000784:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <MX_TIM3_Init+0xa4>)
 8000786:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800078a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078c:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <MX_TIM3_Init+0xa4>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000792:	4b19      	ldr	r3, [pc, #100]	@ (80007f8 <MX_TIM3_Init+0xa4>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000798:	2303      	movs	r3, #3
 800079a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007a0:	2301      	movs	r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007b0:	2301      	movs	r3, #1
 80007b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	4619      	mov	r1, r3
 80007c2:	480d      	ldr	r0, [pc, #52]	@ (80007f8 <MX_TIM3_Init+0xa4>)
 80007c4:	f003 fcc0 	bl	8004148 <HAL_TIM_Encoder_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80007ce:	f000 f9bf 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007da:	463b      	mov	r3, r7
 80007dc:	4619      	mov	r1, r3
 80007de:	4806      	ldr	r0, [pc, #24]	@ (80007f8 <MX_TIM3_Init+0xa4>)
 80007e0:	f004 fe28 	bl	8005434 <HAL_TIMEx_MasterConfigSynchronization>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80007ea:	f000 f9b1 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	3730      	adds	r7, #48	@ 0x30
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000198 	.word	0x20000198
 80007fc:	40000400 	.word	0x40000400

08000800 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	@ 0x30
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	2224      	movs	r2, #36	@ 0x24
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f004 ffb6 	bl	8005780 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000814:	463b      	mov	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <MX_TIM4_Init+0xa4>)
 8000820:	4a21      	ldr	r2, [pc, #132]	@ (80008a8 <MX_TIM4_Init+0xa8>)
 8000822:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000824:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <MX_TIM4_Init+0xa4>)
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082a:	4b1e      	ldr	r3, [pc, #120]	@ (80008a4 <MX_TIM4_Init+0xa4>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2048;
 8000830:	4b1c      	ldr	r3, [pc, #112]	@ (80008a4 <MX_TIM4_Init+0xa4>)
 8000832:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000836:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b1a      	ldr	r3, [pc, #104]	@ (80008a4 <MX_TIM4_Init+0xa4>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083e:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <MX_TIM4_Init+0xa4>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000844:	2303      	movs	r3, #3
 8000846:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800084c:	2301      	movs	r3, #1
 800084e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800085c:	2301      	movs	r3, #1
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	4619      	mov	r1, r3
 800086e:	480d      	ldr	r0, [pc, #52]	@ (80008a4 <MX_TIM4_Init+0xa4>)
 8000870:	f003 fc6a 	bl	8004148 <HAL_TIM_Encoder_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800087a:	f000 f969 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000886:	463b      	mov	r3, r7
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	@ (80008a4 <MX_TIM4_Init+0xa4>)
 800088c:	f004 fdd2 	bl	8005434 <HAL_TIMEx_MasterConfigSynchronization>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000896:	f000 f95b 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	3730      	adds	r7, #48	@ 0x30
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200001e4 	.word	0x200001e4
 80008a8:	40000800 	.word	0x40000800

080008ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008b2:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <MX_DMA_Init+0x50>)
 80008b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008b6:	4a11      	ldr	r2, [pc, #68]	@ (80008fc <MX_DMA_Init+0x50>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80008be:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <MX_DMA_Init+0x50>)
 80008c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_DMA_Init+0x50>)
 80008cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008ce:	4a0b      	ldr	r2, [pc, #44]	@ (80008fc <MX_DMA_Init+0x50>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_DMA_Init+0x50>)
 80008d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	200b      	movs	r0, #11
 80008e8:	f001 fdc7 	bl	800247a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008ec:	200b      	movs	r0, #11
 80008ee:	f001 fdde 	bl	80024ae <HAL_NVIC_EnableIRQ>

}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	@ 0x28
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b4f      	ldr	r3, [pc, #316]	@ (8000a54 <MX_GPIO_Init+0x154>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	4a4e      	ldr	r2, [pc, #312]	@ (8000a54 <MX_GPIO_Init+0x154>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000922:	4b4c      	ldr	r3, [pc, #304]	@ (8000a54 <MX_GPIO_Init+0x154>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800092e:	4b49      	ldr	r3, [pc, #292]	@ (8000a54 <MX_GPIO_Init+0x154>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	4a48      	ldr	r2, [pc, #288]	@ (8000a54 <MX_GPIO_Init+0x154>)
 8000934:	f043 0320 	orr.w	r3, r3, #32
 8000938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093a:	4b46      	ldr	r3, [pc, #280]	@ (8000a54 <MX_GPIO_Init+0x154>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	f003 0320 	and.w	r3, r3, #32
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b43      	ldr	r3, [pc, #268]	@ (8000a54 <MX_GPIO_Init+0x154>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094a:	4a42      	ldr	r2, [pc, #264]	@ (8000a54 <MX_GPIO_Init+0x154>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000952:	4b40      	ldr	r3, [pc, #256]	@ (8000a54 <MX_GPIO_Init+0x154>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a54 <MX_GPIO_Init+0x154>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000962:	4a3c      	ldr	r2, [pc, #240]	@ (8000a54 <MX_GPIO_Init+0x154>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096a:	4b3a      	ldr	r3, [pc, #232]	@ (8000a54 <MX_GPIO_Init+0x154>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2120      	movs	r1, #32
 800097a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097e:	f002 f8ed 	bl	8002b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR_Driver_1_Pin|Dir_Driver_2_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	21c0      	movs	r1, #192	@ 0xc0
 8000986:	4834      	ldr	r0, [pc, #208]	@ (8000a58 <MX_GPIO_Init+0x158>)
 8000988:	f002 f8e8 	bl	8002b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EMERGENCY_Pin JOY_BUTTON_Pin QEI_1_X_Pin */
  GPIO_InitStruct.Pin = EMERGENCY_Pin|JOY_BUTTON_Pin|QEI_1_X_Pin;
 800098c:	2319      	movs	r3, #25
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000990:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	482d      	ldr	r0, [pc, #180]	@ (8000a58 <MX_GPIO_Init+0x158>)
 80009a2:	f001 ff59 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80009a6:	230c      	movs	r3, #12
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80009b6:	230c      	movs	r3, #12
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c4:	f001 ff48 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009c8:	2320      	movs	r3, #32
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e2:	f001 ff39 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prismatic_right_limit_Pin Prismatic_left_limit_Pin */
  GPIO_InitStruct.Pin = Prismatic_right_limit_Pin|Prismatic_left_limit_Pin;
 80009e6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009ec:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	4817      	ldr	r0, [pc, #92]	@ (8000a5c <MX_GPIO_Init+0x15c>)
 80009fe:	f001 ff2b 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : step_one_plotter_Pin step_two_plotter_Pin */
  GPIO_InitStruct.Pin = step_one_plotter_Pin|step_two_plotter_Pin;
 8000a02:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a08:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4810      	ldr	r0, [pc, #64]	@ (8000a5c <MX_GPIO_Init+0x15c>)
 8000a1a:	f001 ff1d 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Driver_1_Pin Dir_Driver_2_Pin */
  GPIO_InitStruct.Pin = DIR_Driver_1_Pin|Dir_Driver_2_Pin;
 8000a1e:	23c0      	movs	r3, #192	@ 0xc0
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4808      	ldr	r0, [pc, #32]	@ (8000a58 <MX_GPIO_Init+0x158>)
 8000a36:	f001 ff0f 	bl	8002858 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2028      	movs	r0, #40	@ 0x28
 8000a40:	f001 fd1b 	bl	800247a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a44:	2028      	movs	r0, #40	@ 0x28
 8000a46:	f001 fd32 	bl	80024ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	@ 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000
 8000a58:	48000800 	.word	0x48000800
 8000a5c:	48000400 	.word	0x48000400

08000a60 <HAL_GPIO_EXTI_Callback>:
int map(int x, int in_min, int in_max, int out_min, int out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

// External Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_12) {
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000a70:	d10b      	bne.n	8000a8a <HAL_GPIO_EXTI_Callback+0x2a>
		prismatic_left_sw = (prismatic_left_sw == 0) ? 1 : 0;
 8000a72:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <HAL_GPIO_EXTI_Callback+0x54>)
 8000a74:	f993 3000 	ldrsb.w	r3, [r3]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	bf0c      	ite	eq
 8000a7c:	2301      	moveq	r3, #1
 8000a7e:	2300      	movne	r3, #0
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	b25a      	sxtb	r2, r3
 8000a84:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <HAL_GPIO_EXTI_Callback+0x54>)
 8000a86:	701a      	strb	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_11) {
		prismatic_right_sw = (prismatic_right_sw == 0) ? 1 : 0;
	}
}
 8000a88:	e00e      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x48>
	} else if (GPIO_Pin == GPIO_PIN_11) {
 8000a8a:	88fb      	ldrh	r3, [r7, #6]
 8000a8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000a90:	d10a      	bne.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x48>
		prismatic_right_sw = (prismatic_right_sw == 0) ? 1 : 0;
 8000a92:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <HAL_GPIO_EXTI_Callback+0x58>)
 8000a94:	f993 3000 	ldrsb.w	r3, [r3]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	bf0c      	ite	eq
 8000a9c:	2301      	moveq	r3, #1
 8000a9e:	2300      	movne	r3, #0
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	b25a      	sxtb	r2, r3
 8000aa4:	4b04      	ldr	r3, [pc, #16]	@ (8000ab8 <HAL_GPIO_EXTI_Callback+0x58>)
 8000aa6:	701a      	strb	r2, [r3, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	20000230 	.word	0x20000230
 8000ab8:	20000231 	.word	0x20000231

08000abc <HAL_TIM_PeriodElapsedCallback>:

// Timer loop (Read sensor data and calculate here)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a1d      	ldr	r2, [pc, #116]	@ (8000b3c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d133      	bne.n	8000b34 <HAL_TIM_PeriodElapsedCallback+0x78>

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000acc:	2120      	movs	r1, #32
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad2:	f002 f85b 	bl	8002b8c <HAL_GPIO_TogglePin>
		//-------------------------Read QEI Prismatic-------------------------
		prismatic_raw_encoder_val = __HAL_TIM_GET_COUNTER(&htim4);
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ae0:	601a      	str	r2, [r3, #0]
		int16_t delta = prismatic_raw_encoder_val - prismatic_raw_encoder_prev;
 8000ae2:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	81fb      	strh	r3, [r7, #14]

		if (delta > 2048 / 2) {
 8000af4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000afc:	dd05      	ble.n	8000b0a <HAL_TIM_PeriodElapsedCallback+0x4e>
			delta -= 2048;
 8000afe:	89fb      	ldrh	r3, [r7, #14]
 8000b00:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	81fb      	strh	r3, [r7, #14]
 8000b08:	e009      	b.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x62>
		} else if (delta < -2048 / 2) {
 8000b0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b0e:	f513 6f80 	cmn.w	r3, #1024	@ 0x400
 8000b12:	da04      	bge.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x62>
			delta += 2048;
 8000b14:	89fb      	ldrh	r3, [r7, #14]
 8000b16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	81fb      	strh	r3, [r7, #14]
		}

		prismatic_encoder_val += delta;
 8000b1e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000b22:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a08      	ldr	r2, [pc, #32]	@ (8000b4c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000b2a:	6013      	str	r3, [r2, #0]
		prismatic_raw_encoder_prev = prismatic_raw_encoder_val;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a05      	ldr	r2, [pc, #20]	@ (8000b48 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b32:	6013      	str	r3, [r2, #0]
		//------------------------------------------------------------------------
	}
}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000014c 	.word	0x2000014c
 8000b40:	200001e4 	.word	0x200001e4
 8000b44:	20000234 	.word	0x20000234
 8000b48:	20000238 	.word	0x20000238
 8000b4c:	2000023c 	.word	0x2000023c

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <Error_Handler+0x8>

08000b5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b66:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7e:	4a08      	ldr	r2, [pc, #32]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b92:	f002 f8d1 	bl	8002d38 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b09e      	sub	sp, #120	@ 0x78
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	2254      	movs	r2, #84	@ 0x54
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f004 fddb 	bl	8005780 <memset>
  if(hadc->Instance==ADC1)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bd2:	d15e      	bne.n	8000c92 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000bd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bd8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bda:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000bde:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	4618      	mov	r0, r3
 8000be6:	f002 fdad 	bl	8003744 <HAL_RCCEx_PeriphCLKConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000bf0:	f7ff ffae 	bl	8000b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bf4:	4b29      	ldr	r3, [pc, #164]	@ (8000c9c <HAL_ADC_MspInit+0xf8>)
 8000bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf8:	4a28      	ldr	r2, [pc, #160]	@ (8000c9c <HAL_ADC_MspInit+0xf8>)
 8000bfa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000bfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c00:	4b26      	ldr	r3, [pc, #152]	@ (8000c9c <HAL_ADC_MspInit+0xf8>)
 8000c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0c:	4b23      	ldr	r3, [pc, #140]	@ (8000c9c <HAL_ADC_MspInit+0xf8>)
 8000c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c10:	4a22      	ldr	r2, [pc, #136]	@ (8000c9c <HAL_ADC_MspInit+0xf8>)
 8000c12:	f043 0304 	orr.w	r3, r3, #4
 8000c16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c18:	4b20      	ldr	r3, [pc, #128]	@ (8000c9c <HAL_ADC_MspInit+0xf8>)
 8000c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = JOY_X_AXIS_Pin|JOY_Y_AXIS_Pin;
 8000c24:	2306      	movs	r3, #6
 8000c26:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c34:	4619      	mov	r1, r3
 8000c36:	481a      	ldr	r0, [pc, #104]	@ (8000ca0 <HAL_ADC_MspInit+0xfc>)
 8000c38:	f001 fe0e 	bl	8002858 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <HAL_ADC_MspInit+0x100>)
 8000c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ca8 <HAL_ADC_MspInit+0x104>)
 8000c40:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c42:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <HAL_ADC_MspInit+0x100>)
 8000c44:	2205      	movs	r2, #5
 8000c46:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c48:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <HAL_ADC_MspInit+0x100>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ca4 <HAL_ADC_MspInit+0x100>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c54:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <HAL_ADC_MspInit+0x100>)
 8000c56:	2280      	movs	r2, #128	@ 0x80
 8000c58:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <HAL_ADC_MspInit+0x100>)
 8000c5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c60:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c62:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <HAL_ADC_MspInit+0x100>)
 8000c64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <HAL_ADC_MspInit+0x100>)
 8000c6c:	2220      	movs	r2, #32
 8000c6e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <HAL_ADC_MspInit+0x100>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c76:	480b      	ldr	r0, [pc, #44]	@ (8000ca4 <HAL_ADC_MspInit+0x100>)
 8000c78:	f001 fc34 	bl	80024e4 <HAL_DMA_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8000c82:	f7ff ff65 	bl	8000b50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a06      	ldr	r2, [pc, #24]	@ (8000ca4 <HAL_ADC_MspInit+0x100>)
 8000c8a:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c8c:	4a05      	ldr	r2, [pc, #20]	@ (8000ca4 <HAL_ADC_MspInit+0x100>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c92:	bf00      	nop
 8000c94:	3778      	adds	r7, #120	@ 0x78
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	48000800 	.word	0x48000800
 8000ca4:	200000a0 	.word	0x200000a0
 8000ca8:	40020008 	.word	0x40020008

08000cac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a16      	ldr	r2, [pc, #88]	@ (8000d14 <HAL_TIM_Base_MspInit+0x68>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d10c      	bne.n	8000cd8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cbe:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <HAL_TIM_Base_MspInit+0x6c>)
 8000cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc2:	4a15      	ldr	r2, [pc, #84]	@ (8000d18 <HAL_TIM_Base_MspInit+0x6c>)
 8000cc4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cca:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <HAL_TIM_Base_MspInit+0x6c>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cd6:	e018      	b.n	8000d0a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ce0:	d113      	bne.n	8000d0a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <HAL_TIM_Base_MspInit+0x6c>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce6:	4a0c      	ldr	r2, [pc, #48]	@ (8000d18 <HAL_TIM_Base_MspInit+0x6c>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cee:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <HAL_TIM_Base_MspInit+0x6c>)
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	201c      	movs	r0, #28
 8000d00:	f001 fbbb 	bl	800247a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d04:	201c      	movs	r0, #28
 8000d06:	f001 fbd2 	bl	80024ae <HAL_NVIC_EnableIRQ>
}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40012c00 	.word	0x40012c00
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	@ 0x30
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a36      	ldr	r2, [pc, #216]	@ (8000e14 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d131      	bne.n	8000da2 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d3e:	4b36      	ldr	r3, [pc, #216]	@ (8000e18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d42:	4a35      	ldr	r2, [pc, #212]	@ (8000e18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d4a:	4b33      	ldr	r3, [pc, #204]	@ (8000e18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
 8000d54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b30      	ldr	r3, [pc, #192]	@ (8000e18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	4a2f      	ldr	r2, [pc, #188]	@ (8000e18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d62:	4b2d      	ldr	r3, [pc, #180]	@ (8000e18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = QEI_1_A_Pin|QEI_1_B_Pin;
 8000d6e:	23c0      	movs	r3, #192	@ 0xc0
 8000d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8c:	f001 fd64 	bl	8002858 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2100      	movs	r1, #0
 8000d94:	201d      	movs	r0, #29
 8000d96:	f001 fb70 	bl	800247a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d9a:	201d      	movs	r0, #29
 8000d9c:	f001 fb87 	bl	80024ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000da0:	e034      	b.n	8000e0c <HAL_TIM_Encoder_MspInit+0xf0>
  else if(htim_encoder->Instance==TIM4)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a1d      	ldr	r2, [pc, #116]	@ (8000e1c <HAL_TIM_Encoder_MspInit+0x100>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d12f      	bne.n	8000e0c <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dac:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db0:	4a19      	ldr	r2, [pc, #100]	@ (8000e18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000db8:	4b17      	ldr	r3, [pc, #92]	@ (8000e18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc4:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc8:	4a13      	ldr	r2, [pc, #76]	@ (8000e18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = QEI_2_A_Pin|QEI_2_B_Pin;
 8000ddc:	23c0      	movs	r3, #192	@ 0xc0
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000dec:	2302      	movs	r3, #2
 8000dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	480a      	ldr	r0, [pc, #40]	@ (8000e20 <HAL_TIM_Encoder_MspInit+0x104>)
 8000df8:	f001 fd2e 	bl	8002858 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	201e      	movs	r0, #30
 8000e02:	f001 fb3a 	bl	800247a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e06:	201e      	movs	r0, #30
 8000e08:	f001 fb51 	bl	80024ae <HAL_NVIC_EnableIRQ>
}
 8000e0c:	bf00      	nop
 8000e0e:	3730      	adds	r7, #48	@ 0x30
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40000400 	.word	0x40000400
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40000800 	.word	0x40000800
 8000e20:	48000400 	.word	0x48000400

08000e24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <HAL_TIM_MspPostInit+0x68>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d11d      	bne.n	8000e82 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <HAL_TIM_MspPostInit+0x6c>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4a:	4a11      	ldr	r2, [pc, #68]	@ (8000e90 <HAL_TIM_MspPostInit+0x6c>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e52:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <HAL_TIM_MspPostInit+0x6c>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Servo_PWM_Pin|Motor_1_PWM_Pin|Motor_2_PWM_Pin;
 8000e5e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000e62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e70:	2306      	movs	r3, #6
 8000e72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e7e:	f001 fceb 	bl	8002858 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3720      	adds	r7, #32
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40012c00 	.word	0x40012c00
 8000e90:	40021000 	.word	0x40021000

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <NMI_Handler+0x4>

08000e9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000ebc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eea:	f000 f8cd 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <DMA1_Channel1_IRQHandler+0x10>)
 8000efa:	f001 fb9b 	bl	8002634 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200000a0 	.word	0x200000a0

08000f08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <TIM2_IRQHandler+0x10>)
 8000f0e:	f003 fa4f 	bl	80043b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2000014c 	.word	0x2000014c

08000f1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <TIM3_IRQHandler+0x10>)
 8000f22:	f003 fa45 	bl	80043b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000198 	.word	0x20000198

08000f30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <TIM4_IRQHandler+0x10>)
 8000f36:	f003 fa3b 	bl	80043b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200001e4 	.word	0x200001e4

08000f44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Prismatic_right_limit_Pin);
 8000f48:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000f4c:	f001 fe38 	bl	8002bc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Prismatic_left_limit_Pin);
 8000f50:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000f54:	f001 fe34 	bl	8002bc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(step_one_plotter_Pin);
 8000f58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f5c:	f001 fe30 	bl	8002bc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(step_two_plotter_Pin);
 8000f60:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000f64:	f001 fe2c 	bl	8002bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <SystemInit+0x20>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f76:	4a05      	ldr	r2, [pc, #20]	@ (8000f8c <SystemInit+0x20>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f90:	480d      	ldr	r0, [pc, #52]	@ (8000fc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f94:	f7ff ffea 	bl	8000f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f98:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9a:	490d      	ldr	r1, [pc, #52]	@ (8000fd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd4 <LoopForever+0xe>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fdc <LoopForever+0x16>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f004 fbe7 	bl	8005790 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc2:	f7ff f979 	bl	80002b8 <main>

08000fc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc6:	e7fe      	b.n	8000fc6 <LoopForever>
  ldr   r0, =_estack
 8000fc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000fd4:	08005808 	.word	0x08005808
  ldr r2, =_sbss
 8000fd8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000fdc:	2000027c 	.word	0x2000027c

08000fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC1_2_IRQHandler>

08000fe2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f001 fa39 	bl	8002464 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 f80e 	bl	8001014 <HAL_InitTick>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	e001      	b.n	8001008 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001004:	f7ff fdaa 	bl	8000b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001008:	79fb      	ldrb	r3, [r7, #7]

}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001020:	4b16      	ldr	r3, [pc, #88]	@ (800107c <HAL_InitTick+0x68>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d022      	beq.n	800106e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001028:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <HAL_InitTick+0x6c>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b13      	ldr	r3, [pc, #76]	@ (800107c <HAL_InitTick+0x68>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001034:	fbb1 f3f3 	udiv	r3, r1, r3
 8001038:	fbb2 f3f3 	udiv	r3, r2, r3
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fa44 	bl	80024ca <HAL_SYSTICK_Config>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10f      	bne.n	8001068 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b0f      	cmp	r3, #15
 800104c:	d809      	bhi.n	8001062 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104e:	2200      	movs	r2, #0
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	f04f 30ff 	mov.w	r0, #4294967295
 8001056:	f001 fa10 	bl	800247a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800105a:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <HAL_InitTick+0x70>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	e007      	b.n	8001072 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]
 8001066:	e004      	b.n	8001072 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	e001      	b.n	8001072 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001072:	7bfb      	ldrb	r3, [r7, #15]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000010 	.word	0x20000010
 8001080:	20000008 	.word	0x20000008
 8001084:	2000000c 	.word	0x2000000c

08001088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <HAL_IncTick+0x1c>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <HAL_IncTick+0x20>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4413      	add	r3, r2
 8001096:	4a03      	ldr	r2, [pc, #12]	@ (80010a4 <HAL_IncTick+0x1c>)
 8001098:	6013      	str	r3, [r2, #0]
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	20000278 	.word	0x20000278
 80010a8:	20000010 	.word	0x20000010

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	@ (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000278 	.word	0x20000278

080010c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	609a      	str	r2, [r3, #8]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	431a      	orrs	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	609a      	str	r2, [r3, #8]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3360      	adds	r3, #96	@ 0x60
 800113e:	461a      	mov	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <LL_ADC_SetOffset+0x44>)
 800114e:	4013      	ands	r3, r2
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	4313      	orrs	r3, r2
 800115c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001164:	bf00      	nop
 8001166:	371c      	adds	r7, #28
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	03fff000 	.word	0x03fff000

08001174 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3360      	adds	r3, #96	@ 0x60
 8001182:	461a      	mov	r2, r3
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3360      	adds	r3, #96	@ 0x60
 80011b0:	461a      	mov	r2, r3
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	431a      	orrs	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011ca:	bf00      	nop
 80011cc:	371c      	adds	r7, #28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b087      	sub	sp, #28
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3360      	adds	r3, #96	@ 0x60
 80011e6:	461a      	mov	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	431a      	orrs	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001200:	bf00      	nop
 8001202:	371c      	adds	r7, #28
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800120c:	b480      	push	{r7}
 800120e:	b087      	sub	sp, #28
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3360      	adds	r3, #96	@ 0x60
 800121c:	461a      	mov	r2, r3
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	431a      	orrs	r2, r3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001236:	bf00      	nop
 8001238:	371c      	adds	r7, #28
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	615a      	str	r2, [r3, #20]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001268:	b480      	push	{r7}
 800126a:	b087      	sub	sp, #28
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3330      	adds	r3, #48	@ 0x30
 8001278:	461a      	mov	r2, r3
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	f003 030c 	and.w	r3, r3, #12
 8001284:	4413      	add	r3, r2
 8001286:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	f003 031f 	and.w	r3, r3, #31
 8001292:	211f      	movs	r1, #31
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	401a      	ands	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	0e9b      	lsrs	r3, r3, #26
 80012a0:	f003 011f 	and.w	r1, r3, #31
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	f003 031f 	and.w	r3, r3, #31
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	431a      	orrs	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012b4:	bf00      	nop
 80012b6:	371c      	adds	r7, #28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3314      	adds	r3, #20
 80012d0:	461a      	mov	r2, r3
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	0e5b      	lsrs	r3, r3, #25
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	4413      	add	r3, r2
 80012de:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	0d1b      	lsrs	r3, r3, #20
 80012e8:	f003 031f 	and.w	r3, r3, #31
 80012ec:	2107      	movs	r1, #7
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	401a      	ands	r2, r3
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	0d1b      	lsrs	r3, r3, #20
 80012fa:	f003 031f 	and.w	r3, r3, #31
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	431a      	orrs	r2, r3
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800130a:	bf00      	nop
 800130c:	371c      	adds	r7, #28
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001330:	43db      	mvns	r3, r3
 8001332:	401a      	ands	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0318 	and.w	r3, r3, #24
 800133a:	4908      	ldr	r1, [pc, #32]	@ (800135c <LL_ADC_SetChannelSingleDiff+0x44>)
 800133c:	40d9      	lsrs	r1, r3
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	400b      	ands	r3, r1
 8001342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001346:	431a      	orrs	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	0007ffff 	.word	0x0007ffff

08001360 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001370:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6093      	str	r3, [r2, #8]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001398:	d101      	bne.n	800139e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80013bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80013e8:	d101      	bne.n	80013ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b01      	cmp	r3, #1
 800140e:	d101      	bne.n	8001414 <LL_ADC_IsEnabled+0x18>
 8001410:	2301      	movs	r3, #1
 8001412:	e000      	b.n	8001416 <LL_ADC_IsEnabled+0x1a>
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	2b04      	cmp	r3, #4
 8001434:	d101      	bne.n	800143a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	2b08      	cmp	r3, #8
 800145a:	d101      	bne.n	8001460 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b089      	sub	sp, #36	@ 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e1a9      	b.n	80017de <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001494:	2b00      	cmp	r3, #0
 8001496:	d109      	bne.n	80014ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff fb83 	bl	8000ba4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff67 	bl	8001384 <LL_ADC_IsDeepPowerDownEnabled>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d004      	beq.n	80014c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff4d 	bl	8001360 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff82 	bl	80013d4 <LL_ADC_IsInternalRegulatorEnabled>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d115      	bne.n	8001502 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff66 	bl	80013ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014e0:	4b9c      	ldr	r3, [pc, #624]	@ (8001754 <HAL_ADC_Init+0x2e4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	099b      	lsrs	r3, r3, #6
 80014e6:	4a9c      	ldr	r2, [pc, #624]	@ (8001758 <HAL_ADC_Init+0x2e8>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	099b      	lsrs	r3, r3, #6
 80014ee:	3301      	adds	r3, #1
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014f4:	e002      	b.n	80014fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f9      	bne.n	80014f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff64 	bl	80013d4 <LL_ADC_IsInternalRegulatorEnabled>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10d      	bne.n	800152e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001516:	f043 0210 	orr.w	r2, r3, #16
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001522:	f043 0201 	orr.w	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff ff75 	bl	8001422 <LL_ADC_REG_IsConversionOngoing>
 8001538:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	2b00      	cmp	r3, #0
 8001544:	f040 8142 	bne.w	80017cc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	2b00      	cmp	r3, #0
 800154c:	f040 813e 	bne.w	80017cc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001554:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001558:	f043 0202 	orr.w	r2, r3, #2
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff49 	bl	80013fc <LL_ADC_IsEnabled>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d141      	bne.n	80015f4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001578:	d004      	beq.n	8001584 <HAL_ADC_Init+0x114>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a77      	ldr	r2, [pc, #476]	@ (800175c <HAL_ADC_Init+0x2ec>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d10f      	bne.n	80015a4 <HAL_ADC_Init+0x134>
 8001584:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001588:	f7ff ff38 	bl	80013fc <LL_ADC_IsEnabled>
 800158c:	4604      	mov	r4, r0
 800158e:	4873      	ldr	r0, [pc, #460]	@ (800175c <HAL_ADC_Init+0x2ec>)
 8001590:	f7ff ff34 	bl	80013fc <LL_ADC_IsEnabled>
 8001594:	4603      	mov	r3, r0
 8001596:	4323      	orrs	r3, r4
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf0c      	ite	eq
 800159c:	2301      	moveq	r3, #1
 800159e:	2300      	movne	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	e012      	b.n	80015ca <HAL_ADC_Init+0x15a>
 80015a4:	486e      	ldr	r0, [pc, #440]	@ (8001760 <HAL_ADC_Init+0x2f0>)
 80015a6:	f7ff ff29 	bl	80013fc <LL_ADC_IsEnabled>
 80015aa:	4604      	mov	r4, r0
 80015ac:	486d      	ldr	r0, [pc, #436]	@ (8001764 <HAL_ADC_Init+0x2f4>)
 80015ae:	f7ff ff25 	bl	80013fc <LL_ADC_IsEnabled>
 80015b2:	4603      	mov	r3, r0
 80015b4:	431c      	orrs	r4, r3
 80015b6:	486c      	ldr	r0, [pc, #432]	@ (8001768 <HAL_ADC_Init+0x2f8>)
 80015b8:	f7ff ff20 	bl	80013fc <LL_ADC_IsEnabled>
 80015bc:	4603      	mov	r3, r0
 80015be:	4323      	orrs	r3, r4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bf0c      	ite	eq
 80015c4:	2301      	moveq	r3, #1
 80015c6:	2300      	movne	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d012      	beq.n	80015f4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015d6:	d004      	beq.n	80015e2 <HAL_ADC_Init+0x172>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a5f      	ldr	r2, [pc, #380]	@ (800175c <HAL_ADC_Init+0x2ec>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d101      	bne.n	80015e6 <HAL_ADC_Init+0x176>
 80015e2:	4a62      	ldr	r2, [pc, #392]	@ (800176c <HAL_ADC_Init+0x2fc>)
 80015e4:	e000      	b.n	80015e8 <HAL_ADC_Init+0x178>
 80015e6:	4a62      	ldr	r2, [pc, #392]	@ (8001770 <HAL_ADC_Init+0x300>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	4619      	mov	r1, r3
 80015ee:	4610      	mov	r0, r2
 80015f0:	f7ff fd68 	bl	80010c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7f5b      	ldrb	r3, [r3, #29]
 80015f8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015fe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001604:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800160a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001612:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800161e:	2b01      	cmp	r3, #1
 8001620:	d106      	bne.n	8001630 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001626:	3b01      	subs	r3, #1
 8001628:	045b      	lsls	r3, r3, #17
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001634:	2b00      	cmp	r3, #0
 8001636:	d009      	beq.n	800164c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001644:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	4b48      	ldr	r3, [pc, #288]	@ (8001774 <HAL_ADC_Init+0x304>)
 8001654:	4013      	ands	r3, r2
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	69b9      	ldr	r1, [r7, #24]
 800165c:	430b      	orrs	r3, r1
 800165e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fee4 	bl	8001448 <LL_ADC_INJ_IsConversionOngoing>
 8001680:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d17f      	bne.n	8001788 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d17c      	bne.n	8001788 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001692:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800169a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80016aa:	f023 0302 	bic.w	r3, r3, #2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	69b9      	ldr	r1, [r7, #24]
 80016b4:	430b      	orrs	r3, r1
 80016b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d017      	beq.n	80016f0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80016ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80016d8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80016dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6911      	ldr	r1, [r2, #16]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	430b      	orrs	r3, r1
 80016ea:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80016ee:	e013      	b.n	8001718 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691a      	ldr	r2, [r3, #16]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80016fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001710:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001714:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800171e:	2b01      	cmp	r3, #1
 8001720:	d12a      	bne.n	8001778 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800172c:	f023 0304 	bic.w	r3, r3, #4
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001738:	4311      	orrs	r1, r2
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800173e:	4311      	orrs	r1, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001744:	430a      	orrs	r2, r1
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f042 0201 	orr.w	r2, r2, #1
 8001750:	611a      	str	r2, [r3, #16]
 8001752:	e019      	b.n	8001788 <HAL_ADC_Init+0x318>
 8001754:	20000008 	.word	0x20000008
 8001758:	053e2d63 	.word	0x053e2d63
 800175c:	50000100 	.word	0x50000100
 8001760:	50000400 	.word	0x50000400
 8001764:	50000500 	.word	0x50000500
 8001768:	50000600 	.word	0x50000600
 800176c:	50000300 	.word	0x50000300
 8001770:	50000700 	.word	0x50000700
 8001774:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	691a      	ldr	r2, [r3, #16]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0201 	bic.w	r2, r2, #1
 8001786:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d10c      	bne.n	80017aa <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f023 010f 	bic.w	r1, r3, #15
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	1e5a      	subs	r2, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80017a8:	e007      	b.n	80017ba <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 020f 	bic.w	r2, r2, #15
 80017b8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017be:	f023 0303 	bic.w	r3, r3, #3
 80017c2:	f043 0201 	orr.w	r2, r3, #1
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017ca:	e007      	b.n	80017dc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d0:	f043 0210 	orr.w	r2, r3, #16
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3724      	adds	r7, #36	@ 0x24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd90      	pop	{r4, r7, pc}
 80017e6:	bf00      	nop

080017e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b0b6      	sub	sp, #216	@ 0xd8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001802:	2b01      	cmp	r3, #1
 8001804:	d102      	bne.n	800180c <HAL_ADC_ConfigChannel+0x24>
 8001806:	2302      	movs	r3, #2
 8001808:	f000 bc13 	b.w	8002032 <HAL_ADC_ConfigChannel+0x84a>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fe02 	bl	8001422 <LL_ADC_REG_IsConversionOngoing>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	f040 83f3 	bne.w	800200c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	6859      	ldr	r1, [r3, #4]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	f7ff fd18 	bl	8001268 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fdf0 	bl	8001422 <LL_ADC_REG_IsConversionOngoing>
 8001842:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fdfc 	bl	8001448 <LL_ADC_INJ_IsConversionOngoing>
 8001850:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001854:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001858:	2b00      	cmp	r3, #0
 800185a:	f040 81d9 	bne.w	8001c10 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800185e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 81d4 	bne.w	8001c10 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001870:	d10f      	bne.n	8001892 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2200      	movs	r2, #0
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff fd1f 	bl	80012c0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fcd9 	bl	8001242 <LL_ADC_SetSamplingTimeCommonConfig>
 8001890:	e00e      	b.n	80018b0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	6819      	ldr	r1, [r3, #0]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	461a      	mov	r2, r3
 80018a0:	f7ff fd0e 	bl	80012c0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fcc9 	bl	8001242 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	695a      	ldr	r2, [r3, #20]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	08db      	lsrs	r3, r3, #3
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	d022      	beq.n	8001918 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	6919      	ldr	r1, [r3, #16]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80018e2:	f7ff fc23 	bl	800112c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	6919      	ldr	r1, [r3, #16]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	461a      	mov	r2, r3
 80018f4:	f7ff fc6f 	bl	80011d6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001904:	2b01      	cmp	r3, #1
 8001906:	d102      	bne.n	800190e <HAL_ADC_ConfigChannel+0x126>
 8001908:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800190c:	e000      	b.n	8001910 <HAL_ADC_ConfigChannel+0x128>
 800190e:	2300      	movs	r3, #0
 8001910:	461a      	mov	r2, r3
 8001912:	f7ff fc7b 	bl	800120c <LL_ADC_SetOffsetSaturation>
 8001916:	e17b      	b.n	8001c10 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fc28 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10a      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x15c>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fc1d 	bl	8001174 <LL_ADC_GetOffsetChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	0e9b      	lsrs	r3, r3, #26
 800193e:	f003 021f 	and.w	r2, r3, #31
 8001942:	e01e      	b.n	8001982 <HAL_ADC_ConfigChannel+0x19a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fc12 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001962:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001966:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800196a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001972:	2320      	movs	r3, #32
 8001974:	e004      	b.n	8001980 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800198a:	2b00      	cmp	r3, #0
 800198c:	d105      	bne.n	800199a <HAL_ADC_ConfigChannel+0x1b2>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	0e9b      	lsrs	r3, r3, #26
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	e018      	b.n	80019cc <HAL_ADC_ConfigChannel+0x1e4>
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80019ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80019b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80019be:	2320      	movs	r3, #32
 80019c0:	e004      	b.n	80019cc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80019c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80019c6:	fab3 f383 	clz	r3, r3
 80019ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d106      	bne.n	80019de <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2200      	movs	r2, #0
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fbe1 	bl	80011a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2101      	movs	r1, #1
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fbc5 	bl	8001174 <LL_ADC_GetOffsetChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10a      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x222>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2101      	movs	r1, #1
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fbba 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001a00:	4603      	mov	r3, r0
 8001a02:	0e9b      	lsrs	r3, r3, #26
 8001a04:	f003 021f 	and.w	r2, r3, #31
 8001a08:	e01e      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x260>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2101      	movs	r1, #1
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fbaf 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001a28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001a30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001a38:	2320      	movs	r3, #32
 8001a3a:	e004      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001a3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d105      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x278>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	0e9b      	lsrs	r3, r3, #26
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	e018      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x2aa>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a6c:	fa93 f3a3 	rbit	r3, r3
 8001a70:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001a74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001a84:	2320      	movs	r3, #32
 8001a86:	e004      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001a88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a8c:	fab3 f383 	clz	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d106      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fb7e 	bl	80011a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fb62 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10a      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x2e8>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2102      	movs	r1, #2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fb57 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	0e9b      	lsrs	r3, r3, #26
 8001aca:	f003 021f 	and.w	r2, r3, #31
 8001ace:	e01e      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x326>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fb4c 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ae6:	fa93 f3a3 	rbit	r3, r3
 8001aea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001aee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001af2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001af6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001afe:	2320      	movs	r3, #32
 8001b00:	e004      	b.n	8001b0c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b06:	fab3 f383 	clz	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d105      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x33e>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	0e9b      	lsrs	r3, r3, #26
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	e016      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x36c>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b32:	fa93 f3a3 	rbit	r3, r3
 8001b36:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001b38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001b3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001b3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001b46:	2320      	movs	r3, #32
 8001b48:	e004      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001b4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d106      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2102      	movs	r1, #2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fb1d 	bl	80011a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2103      	movs	r1, #3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fb01 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10a      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x3aa>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2103      	movs	r1, #3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff faf6 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	0e9b      	lsrs	r3, r3, #26
 8001b8c:	f003 021f 	and.w	r2, r3, #31
 8001b90:	e017      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x3da>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2103      	movs	r1, #3
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff faeb 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ba4:	fa93 f3a3 	rbit	r3, r3
 8001ba8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001baa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001bac:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001bae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001bb4:	2320      	movs	r3, #32
 8001bb6:	e003      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001bb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d105      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x3f2>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	0e9b      	lsrs	r3, r3, #26
 8001bd4:	f003 031f 	and.w	r3, r3, #31
 8001bd8:	e011      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x416>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001be2:	fa93 f3a3 	rbit	r3, r3
 8001be6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001be8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001bea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001bec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001bf2:	2320      	movs	r3, #32
 8001bf4:	e003      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001bf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bf8:	fab3 f383 	clz	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d106      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2200      	movs	r2, #0
 8001c08:	2103      	movs	r1, #3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fac8 	bl	80011a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fbf1 	bl	80013fc <LL_ADC_IsEnabled>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f040 813d 	bne.w	8001e9c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6819      	ldr	r1, [r3, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f7ff fb72 	bl	8001318 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	4aa2      	ldr	r2, [pc, #648]	@ (8001ec4 <HAL_ADC_ConfigChannel+0x6dc>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	f040 812e 	bne.w	8001e9c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10b      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x480>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	0e9b      	lsrs	r3, r3, #26
 8001c56:	3301      	adds	r3, #1
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	2b09      	cmp	r3, #9
 8001c5e:	bf94      	ite	ls
 8001c60:	2301      	movls	r3, #1
 8001c62:	2300      	movhi	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	e019      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x4b4>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001c76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c78:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001c7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001c80:	2320      	movs	r3, #32
 8001c82:	e003      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001c84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c86:	fab3 f383 	clz	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	2b09      	cmp	r3, #9
 8001c94:	bf94      	ite	ls
 8001c96:	2301      	movls	r3, #1
 8001c98:	2300      	movhi	r3, #0
 8001c9a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d079      	beq.n	8001d94 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d107      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x4d4>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0e9b      	lsrs	r3, r3, #26
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	069b      	lsls	r3, r3, #26
 8001cb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cba:	e015      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x500>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cc4:	fa93 f3a3 	rbit	r3, r3
 8001cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ccc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	e003      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	069b      	lsls	r3, r3, #26
 8001ce4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d109      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x520>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	0e9b      	lsrs	r3, r3, #26
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	f003 031f 	and.w	r3, r3, #31
 8001d00:	2101      	movs	r1, #1
 8001d02:	fa01 f303 	lsl.w	r3, r1, r3
 8001d06:	e017      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x550>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d10:	fa93 f3a3 	rbit	r3, r3
 8001d14:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d18:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001d20:	2320      	movs	r3, #32
 8001d22:	e003      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001d24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	f003 031f 	and.w	r3, r3, #31
 8001d32:	2101      	movs	r1, #1
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	ea42 0103 	orr.w	r1, r2, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10a      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x576>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0e9b      	lsrs	r3, r3, #26
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	051b      	lsls	r3, r3, #20
 8001d5c:	e018      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x5a8>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001d76:	2320      	movs	r3, #32
 8001d78:	e003      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	3301      	adds	r3, #1
 8001d84:	f003 021f 	and.w	r2, r3, #31
 8001d88:	4613      	mov	r3, r2
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	4413      	add	r3, r2
 8001d8e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d90:	430b      	orrs	r3, r1
 8001d92:	e07e      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d107      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x5c8>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0e9b      	lsrs	r3, r3, #26
 8001da6:	3301      	adds	r3, #1
 8001da8:	069b      	lsls	r3, r3, #26
 8001daa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dae:	e015      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x5f4>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dc0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	e003      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	069b      	lsls	r3, r3, #26
 8001dd8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d109      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x614>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	0e9b      	lsrs	r3, r3, #26
 8001dee:	3301      	adds	r3, #1
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	2101      	movs	r1, #1
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	e017      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x644>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	fa93 f3a3 	rbit	r3, r3
 8001e08:	61fb      	str	r3, [r7, #28]
  return result;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001e14:	2320      	movs	r3, #32
 8001e16:	e003      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1a:	fab3 f383 	clz	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	3301      	adds	r3, #1
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	2101      	movs	r1, #1
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	ea42 0103 	orr.w	r1, r2, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10d      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x670>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	0e9b      	lsrs	r3, r3, #26
 8001e42:	3301      	adds	r3, #1
 8001e44:	f003 021f 	and.w	r2, r3, #31
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3b1e      	subs	r3, #30
 8001e50:	051b      	lsls	r3, r3, #20
 8001e52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e56:	e01b      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x6a8>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	613b      	str	r3, [r7, #16]
  return result;
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001e70:	2320      	movs	r3, #32
 8001e72:	e003      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f003 021f 	and.w	r2, r3, #31
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	3b1e      	subs	r3, #30
 8001e8a:	051b      	lsls	r3, r3, #20
 8001e8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e90:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e96:	4619      	mov	r1, r3
 8001e98:	f7ff fa12 	bl	80012c0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <HAL_ADC_ConfigChannel+0x6e0>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80be 	beq.w	8002026 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eb2:	d004      	beq.n	8001ebe <HAL_ADC_ConfigChannel+0x6d6>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a04      	ldr	r2, [pc, #16]	@ (8001ecc <HAL_ADC_ConfigChannel+0x6e4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d10a      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x6ec>
 8001ebe:	4b04      	ldr	r3, [pc, #16]	@ (8001ed0 <HAL_ADC_ConfigChannel+0x6e8>)
 8001ec0:	e009      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x6ee>
 8001ec2:	bf00      	nop
 8001ec4:	407f0000 	.word	0x407f0000
 8001ec8:	80080000 	.word	0x80080000
 8001ecc:	50000100 	.word	0x50000100
 8001ed0:	50000300 	.word	0x50000300
 8001ed4:	4b59      	ldr	r3, [pc, #356]	@ (800203c <HAL_ADC_ConfigChannel+0x854>)
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff f91a 	bl	8001110 <LL_ADC_GetCommonPathInternalCh>
 8001edc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a56      	ldr	r2, [pc, #344]	@ (8002040 <HAL_ADC_ConfigChannel+0x858>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d004      	beq.n	8001ef4 <HAL_ADC_ConfigChannel+0x70c>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a55      	ldr	r2, [pc, #340]	@ (8002044 <HAL_ADC_ConfigChannel+0x85c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d13a      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ef4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ef8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d134      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f08:	d005      	beq.n	8001f16 <HAL_ADC_ConfigChannel+0x72e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a4e      	ldr	r2, [pc, #312]	@ (8002048 <HAL_ADC_ConfigChannel+0x860>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	f040 8085 	bne.w	8002020 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f1e:	d004      	beq.n	8001f2a <HAL_ADC_ConfigChannel+0x742>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a49      	ldr	r2, [pc, #292]	@ (800204c <HAL_ADC_ConfigChannel+0x864>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d101      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x746>
 8001f2a:	4a49      	ldr	r2, [pc, #292]	@ (8002050 <HAL_ADC_ConfigChannel+0x868>)
 8001f2c:	e000      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x748>
 8001f2e:	4a43      	ldr	r2, [pc, #268]	@ (800203c <HAL_ADC_ConfigChannel+0x854>)
 8001f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	f7ff f8d5 	bl	80010ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f40:	4b44      	ldr	r3, [pc, #272]	@ (8002054 <HAL_ADC_ConfigChannel+0x86c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	099b      	lsrs	r3, r3, #6
 8001f46:	4a44      	ldr	r2, [pc, #272]	@ (8002058 <HAL_ADC_ConfigChannel+0x870>)
 8001f48:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4c:	099b      	lsrs	r3, r3, #6
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f5a:	e002      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f9      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f68:	e05a      	b.n	8002020 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a3b      	ldr	r2, [pc, #236]	@ (800205c <HAL_ADC_ConfigChannel+0x874>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d125      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d11f      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a31      	ldr	r2, [pc, #196]	@ (800204c <HAL_ADC_ConfigChannel+0x864>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d104      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x7ac>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a34      	ldr	r2, [pc, #208]	@ (8002060 <HAL_ADC_ConfigChannel+0x878>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d047      	beq.n	8002024 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f9c:	d004      	beq.n	8001fa8 <HAL_ADC_ConfigChannel+0x7c0>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a2a      	ldr	r2, [pc, #168]	@ (800204c <HAL_ADC_ConfigChannel+0x864>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d101      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x7c4>
 8001fa8:	4a29      	ldr	r2, [pc, #164]	@ (8002050 <HAL_ADC_ConfigChannel+0x868>)
 8001faa:	e000      	b.n	8001fae <HAL_ADC_ConfigChannel+0x7c6>
 8001fac:	4a23      	ldr	r2, [pc, #140]	@ (800203c <HAL_ADC_ConfigChannel+0x854>)
 8001fae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4610      	mov	r0, r2
 8001fba:	f7ff f896 	bl	80010ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fbe:	e031      	b.n	8002024 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a27      	ldr	r2, [pc, #156]	@ (8002064 <HAL_ADC_ConfigChannel+0x87c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d12d      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d127      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1c      	ldr	r2, [pc, #112]	@ (800204c <HAL_ADC_ConfigChannel+0x864>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d022      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fe8:	d004      	beq.n	8001ff4 <HAL_ADC_ConfigChannel+0x80c>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a17      	ldr	r2, [pc, #92]	@ (800204c <HAL_ADC_ConfigChannel+0x864>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x810>
 8001ff4:	4a16      	ldr	r2, [pc, #88]	@ (8002050 <HAL_ADC_ConfigChannel+0x868>)
 8001ff6:	e000      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x812>
 8001ff8:	4a10      	ldr	r2, [pc, #64]	@ (800203c <HAL_ADC_ConfigChannel+0x854>)
 8001ffa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ffe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002002:	4619      	mov	r1, r3
 8002004:	4610      	mov	r0, r2
 8002006:	f7ff f870 	bl	80010ea <LL_ADC_SetCommonPathInternalCh>
 800200a:	e00c      	b.n	8002026 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002010:	f043 0220 	orr.w	r2, r3, #32
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800201e:	e002      	b.n	8002026 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002020:	bf00      	nop
 8002022:	e000      	b.n	8002026 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002024:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800202e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002032:	4618      	mov	r0, r3
 8002034:	37d8      	adds	r7, #216	@ 0xd8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	50000700 	.word	0x50000700
 8002040:	c3210000 	.word	0xc3210000
 8002044:	90c00010 	.word	0x90c00010
 8002048:	50000600 	.word	0x50000600
 800204c:	50000100 	.word	0x50000100
 8002050:	50000300 	.word	0x50000300
 8002054:	20000008 	.word	0x20000008
 8002058:	053e2d63 	.word	0x053e2d63
 800205c:	c7520000 	.word	0xc7520000
 8002060:	50000500 	.word	0x50000500
 8002064:	cb840000 	.word	0xcb840000

08002068 <LL_ADC_IsEnabled>:
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <LL_ADC_IsEnabled+0x18>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <LL_ADC_IsEnabled+0x1a>
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <LL_ADC_REG_IsConversionOngoing>:
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d101      	bne.n	80020a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b0a1      	sub	sp, #132	@ 0x84
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e0e7      	b.n	80022a2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80020da:	2300      	movs	r3, #0
 80020dc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80020de:	2300      	movs	r3, #0
 80020e0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020ea:	d102      	bne.n	80020f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80020ec:	4b6f      	ldr	r3, [pc, #444]	@ (80022ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	e009      	b.n	8002106 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a6e      	ldr	r2, [pc, #440]	@ (80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d102      	bne.n	8002102 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80020fc:	4b6d      	ldr	r3, [pc, #436]	@ (80022b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	e001      	b.n	8002106 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10b      	bne.n	8002124 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002110:	f043 0220 	orr.w	r2, r3, #32
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0be      	b.n	80022a2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ffb1 	bl	800208e <LL_ADC_REG_IsConversionOngoing>
 800212c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ffab 	bl	800208e <LL_ADC_REG_IsConversionOngoing>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	f040 80a0 	bne.w	8002280 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002140:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002142:	2b00      	cmp	r3, #0
 8002144:	f040 809c 	bne.w	8002280 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002150:	d004      	beq.n	800215c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a55      	ldr	r2, [pc, #340]	@ (80022ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d101      	bne.n	8002160 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800215c:	4b56      	ldr	r3, [pc, #344]	@ (80022b8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800215e:	e000      	b.n	8002162 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002160:	4b56      	ldr	r3, [pc, #344]	@ (80022bc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002162:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d04b      	beq.n	8002204 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800216c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	6859      	ldr	r1, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800217e:	035b      	lsls	r3, r3, #13
 8002180:	430b      	orrs	r3, r1
 8002182:	431a      	orrs	r2, r3
 8002184:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002186:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002190:	d004      	beq.n	800219c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a45      	ldr	r2, [pc, #276]	@ (80022ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d10f      	bne.n	80021bc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800219c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80021a0:	f7ff ff62 	bl	8002068 <LL_ADC_IsEnabled>
 80021a4:	4604      	mov	r4, r0
 80021a6:	4841      	ldr	r0, [pc, #260]	@ (80022ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80021a8:	f7ff ff5e 	bl	8002068 <LL_ADC_IsEnabled>
 80021ac:	4603      	mov	r3, r0
 80021ae:	4323      	orrs	r3, r4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	bf0c      	ite	eq
 80021b4:	2301      	moveq	r3, #1
 80021b6:	2300      	movne	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	e012      	b.n	80021e2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80021bc:	483c      	ldr	r0, [pc, #240]	@ (80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80021be:	f7ff ff53 	bl	8002068 <LL_ADC_IsEnabled>
 80021c2:	4604      	mov	r4, r0
 80021c4:	483b      	ldr	r0, [pc, #236]	@ (80022b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80021c6:	f7ff ff4f 	bl	8002068 <LL_ADC_IsEnabled>
 80021ca:	4603      	mov	r3, r0
 80021cc:	431c      	orrs	r4, r3
 80021ce:	483c      	ldr	r0, [pc, #240]	@ (80022c0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80021d0:	f7ff ff4a 	bl	8002068 <LL_ADC_IsEnabled>
 80021d4:	4603      	mov	r3, r0
 80021d6:	4323      	orrs	r3, r4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	bf0c      	ite	eq
 80021dc:	2301      	moveq	r3, #1
 80021de:	2300      	movne	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d056      	beq.n	8002294 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80021e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80021ee:	f023 030f 	bic.w	r3, r3, #15
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	6811      	ldr	r1, [r2, #0]
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	6892      	ldr	r2, [r2, #8]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	431a      	orrs	r2, r3
 80021fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002200:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002202:	e047      	b.n	8002294 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002204:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800220c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800220e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002218:	d004      	beq.n	8002224 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a23      	ldr	r2, [pc, #140]	@ (80022ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d10f      	bne.n	8002244 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002224:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002228:	f7ff ff1e 	bl	8002068 <LL_ADC_IsEnabled>
 800222c:	4604      	mov	r4, r0
 800222e:	481f      	ldr	r0, [pc, #124]	@ (80022ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002230:	f7ff ff1a 	bl	8002068 <LL_ADC_IsEnabled>
 8002234:	4603      	mov	r3, r0
 8002236:	4323      	orrs	r3, r4
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	e012      	b.n	800226a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002244:	481a      	ldr	r0, [pc, #104]	@ (80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002246:	f7ff ff0f 	bl	8002068 <LL_ADC_IsEnabled>
 800224a:	4604      	mov	r4, r0
 800224c:	4819      	ldr	r0, [pc, #100]	@ (80022b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800224e:	f7ff ff0b 	bl	8002068 <LL_ADC_IsEnabled>
 8002252:	4603      	mov	r3, r0
 8002254:	431c      	orrs	r4, r3
 8002256:	481a      	ldr	r0, [pc, #104]	@ (80022c0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002258:	f7ff ff06 	bl	8002068 <LL_ADC_IsEnabled>
 800225c:	4603      	mov	r3, r0
 800225e:	4323      	orrs	r3, r4
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d012      	beq.n	8002294 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800226e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002276:	f023 030f 	bic.w	r3, r3, #15
 800227a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800227c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800227e:	e009      	b.n	8002294 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002284:	f043 0220 	orr.w	r2, r3, #32
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002292:	e000      	b.n	8002296 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002294:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800229e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3784      	adds	r7, #132	@ 0x84
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd90      	pop	{r4, r7, pc}
 80022aa:	bf00      	nop
 80022ac:	50000100 	.word	0x50000100
 80022b0:	50000400 	.word	0x50000400
 80022b4:	50000500 	.word	0x50000500
 80022b8:	50000300 	.word	0x50000300
 80022bc:	50000700 	.word	0x50000700
 80022c0:	50000600 	.word	0x50000600

080022c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022e0:	4013      	ands	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f6:	4a04      	ldr	r2, [pc, #16]	@ (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	60d3      	str	r3, [r2, #12]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002310:	4b04      	ldr	r3, [pc, #16]	@ (8002324 <__NVIC_GetPriorityGrouping+0x18>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	0a1b      	lsrs	r3, r3, #8
 8002316:	f003 0307 	and.w	r3, r3, #7
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	2b00      	cmp	r3, #0
 8002338:	db0b      	blt.n	8002352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	f003 021f 	and.w	r2, r3, #31
 8002340:	4907      	ldr	r1, [pc, #28]	@ (8002360 <__NVIC_EnableIRQ+0x38>)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	2001      	movs	r0, #1
 800234a:	fa00 f202 	lsl.w	r2, r0, r2
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000e100 	.word	0xe000e100

08002364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	2b00      	cmp	r3, #0
 8002376:	db0a      	blt.n	800238e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	490c      	ldr	r1, [pc, #48]	@ (80023b0 <__NVIC_SetPriority+0x4c>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	0112      	lsls	r2, r2, #4
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	440b      	add	r3, r1
 8002388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800238c:	e00a      	b.n	80023a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4908      	ldr	r1, [pc, #32]	@ (80023b4 <__NVIC_SetPriority+0x50>)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	3b04      	subs	r3, #4
 800239c:	0112      	lsls	r2, r2, #4
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	440b      	add	r3, r1
 80023a2:	761a      	strb	r2, [r3, #24]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000e100 	.word	0xe000e100
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	@ 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f1c3 0307 	rsb	r3, r3, #7
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	bf28      	it	cs
 80023d6:	2304      	movcs	r3, #4
 80023d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3304      	adds	r3, #4
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d902      	bls.n	80023e8 <NVIC_EncodePriority+0x30>
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3b03      	subs	r3, #3
 80023e6:	e000      	b.n	80023ea <NVIC_EncodePriority+0x32>
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	401a      	ands	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002400:	f04f 31ff 	mov.w	r1, #4294967295
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	43d9      	mvns	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	4313      	orrs	r3, r2
         );
}
 8002412:	4618      	mov	r0, r3
 8002414:	3724      	adds	r7, #36	@ 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002430:	d301      	bcc.n	8002436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002432:	2301      	movs	r3, #1
 8002434:	e00f      	b.n	8002456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002436:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <SysTick_Config+0x40>)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243e:	210f      	movs	r1, #15
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	f7ff ff8e 	bl	8002364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002448:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <SysTick_Config+0x40>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244e:	4b04      	ldr	r3, [pc, #16]	@ (8002460 <SysTick_Config+0x40>)
 8002450:	2207      	movs	r2, #7
 8002452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	e000e010 	.word	0xe000e010

08002464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ff29 	bl	80022c4 <__NVIC_SetPriorityGrouping>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002488:	f7ff ff40 	bl	800230c <__NVIC_GetPriorityGrouping>
 800248c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	6978      	ldr	r0, [r7, #20]
 8002494:	f7ff ff90 	bl	80023b8 <NVIC_EncodePriority>
 8002498:	4602      	mov	r2, r0
 800249a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff5f 	bl	8002364 <__NVIC_SetPriority>
}
 80024a6:	bf00      	nop
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4603      	mov	r3, r0
 80024b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff33 	bl	8002328 <__NVIC_EnableIRQ>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff ffa4 	bl	8002420 <SysTick_Config>
 80024d8:	4603      	mov	r3, r0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e08d      	b.n	8002612 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b47      	ldr	r3, [pc, #284]	@ (800261c <HAL_DMA_Init+0x138>)
 80024fe:	429a      	cmp	r2, r3
 8002500:	d80f      	bhi.n	8002522 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	4b45      	ldr	r3, [pc, #276]	@ (8002620 <HAL_DMA_Init+0x13c>)
 800250a:	4413      	add	r3, r2
 800250c:	4a45      	ldr	r2, [pc, #276]	@ (8002624 <HAL_DMA_Init+0x140>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	091b      	lsrs	r3, r3, #4
 8002514:	009a      	lsls	r2, r3, #2
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a42      	ldr	r2, [pc, #264]	@ (8002628 <HAL_DMA_Init+0x144>)
 800251e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002520:	e00e      	b.n	8002540 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	4b40      	ldr	r3, [pc, #256]	@ (800262c <HAL_DMA_Init+0x148>)
 800252a:	4413      	add	r3, r2
 800252c:	4a3d      	ldr	r2, [pc, #244]	@ (8002624 <HAL_DMA_Init+0x140>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	091b      	lsrs	r3, r3, #4
 8002534:	009a      	lsls	r2, r3, #2
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a3c      	ldr	r2, [pc, #240]	@ (8002630 <HAL_DMA_Init+0x14c>)
 800253e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800255a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002564:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002570:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f8fe 	bl	8002794 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025a0:	d102      	bne.n	80025a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80025bc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d010      	beq.n	80025e8 <HAL_DMA_Init+0x104>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d80c      	bhi.n	80025e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f91e 	bl	8002810 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	e008      	b.n	80025fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40020407 	.word	0x40020407
 8002620:	bffdfff8 	.word	0xbffdfff8
 8002624:	cccccccd 	.word	0xcccccccd
 8002628:	40020000 	.word	0x40020000
 800262c:	bffdfbf8 	.word	0xbffdfbf8
 8002630:	40020400 	.word	0x40020400

08002634 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	2204      	movs	r2, #4
 8002656:	409a      	lsls	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d026      	beq.n	80026ae <HAL_DMA_IRQHandler+0x7a>
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b00      	cmp	r3, #0
 8002668:	d021      	beq.n	80026ae <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b00      	cmp	r3, #0
 8002676:	d107      	bne.n	8002688 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0204 	bic.w	r2, r2, #4
 8002686:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	2104      	movs	r1, #4
 8002696:	fa01 f202 	lsl.w	r2, r1, r2
 800269a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d071      	beq.n	8002788 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80026ac:	e06c      	b.n	8002788 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	2202      	movs	r2, #2
 80026b8:	409a      	lsls	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d02e      	beq.n	8002720 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d029      	beq.n	8002720 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10b      	bne.n	80026f2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 020a 	bic.w	r2, r2, #10
 80026e8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f6:	f003 021f 	and.w	r2, r3, #31
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	2102      	movs	r1, #2
 8002700:	fa01 f202 	lsl.w	r2, r1, r2
 8002704:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002712:	2b00      	cmp	r3, #0
 8002714:	d038      	beq.n	8002788 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800271e:	e033      	b.n	8002788 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	2208      	movs	r2, #8
 800272a:	409a      	lsls	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d02a      	beq.n	800278a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d025      	beq.n	800278a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 020e 	bic.w	r2, r2, #14
 800274c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002752:	f003 021f 	and.w	r2, r3, #31
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	2101      	movs	r1, #1
 800275c:	fa01 f202 	lsl.w	r2, r1, r2
 8002760:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800277c:	2b00      	cmp	r3, #0
 800277e:	d004      	beq.n	800278a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002788:	bf00      	nop
 800278a:	bf00      	nop
}
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b16      	ldr	r3, [pc, #88]	@ (80027fc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d802      	bhi.n	80027ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80027a8:	4b15      	ldr	r3, [pc, #84]	@ (8002800 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	e001      	b.n	80027b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80027ae:	4b15      	ldr	r3, [pc, #84]	@ (8002804 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80027b0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	3b08      	subs	r3, #8
 80027be:	4a12      	ldr	r2, [pc, #72]	@ (8002808 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80027c0:	fba2 2303 	umull	r2, r3, r2, r3
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027cc:	089b      	lsrs	r3, r3, #2
 80027ce:	009a      	lsls	r2, r3, #2
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4413      	add	r3, r2
 80027d4:	461a      	mov	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a0b      	ldr	r2, [pc, #44]	@ (800280c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80027de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	2201      	movs	r2, #1
 80027e8:	409a      	lsls	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80027ee:	bf00      	nop
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40020407 	.word	0x40020407
 8002800:	40020800 	.word	0x40020800
 8002804:	40020820 	.word	0x40020820
 8002808:	cccccccd 	.word	0xcccccccd
 800280c:	40020880 	.word	0x40020880

08002810 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4b0b      	ldr	r3, [pc, #44]	@ (8002850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002824:	4413      	add	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	461a      	mov	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a08      	ldr	r2, [pc, #32]	@ (8002854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002832:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3b01      	subs	r3, #1
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	2201      	movs	r2, #1
 800283e:	409a      	lsls	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	1000823f 	.word	0x1000823f
 8002854:	40020940 	.word	0x40020940

08002858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002866:	e15a      	b.n	8002b1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	2101      	movs	r1, #1
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	fa01 f303 	lsl.w	r3, r1, r3
 8002874:	4013      	ands	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 814c 	beq.w	8002b18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b01      	cmp	r3, #1
 800288a:	d005      	beq.n	8002898 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002894:	2b02      	cmp	r3, #2
 8002896:	d130      	bne.n	80028fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	2203      	movs	r2, #3
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028ce:	2201      	movs	r2, #1
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4013      	ands	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	091b      	lsrs	r3, r3, #4
 80028e4:	f003 0201 	and.w	r2, r3, #1
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b03      	cmp	r3, #3
 8002904:	d017      	beq.n	8002936 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	2203      	movs	r2, #3
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d123      	bne.n	800298a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	08da      	lsrs	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3208      	adds	r2, #8
 800294a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800294e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	220f      	movs	r2, #15
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4013      	ands	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	08da      	lsrs	r2, r3, #3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3208      	adds	r2, #8
 8002984:	6939      	ldr	r1, [r7, #16]
 8002986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	2203      	movs	r2, #3
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 0203 	and.w	r2, r3, #3
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 80a6 	beq.w	8002b18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029cc:	4b5b      	ldr	r3, [pc, #364]	@ (8002b3c <HAL_GPIO_Init+0x2e4>)
 80029ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d0:	4a5a      	ldr	r2, [pc, #360]	@ (8002b3c <HAL_GPIO_Init+0x2e4>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80029d8:	4b58      	ldr	r3, [pc, #352]	@ (8002b3c <HAL_GPIO_Init+0x2e4>)
 80029da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029e4:	4a56      	ldr	r2, [pc, #344]	@ (8002b40 <HAL_GPIO_Init+0x2e8>)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	089b      	lsrs	r3, r3, #2
 80029ea:	3302      	adds	r3, #2
 80029ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	220f      	movs	r2, #15
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4013      	ands	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a0e:	d01f      	beq.n	8002a50 <HAL_GPIO_Init+0x1f8>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a4c      	ldr	r2, [pc, #304]	@ (8002b44 <HAL_GPIO_Init+0x2ec>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d019      	beq.n	8002a4c <HAL_GPIO_Init+0x1f4>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a4b      	ldr	r2, [pc, #300]	@ (8002b48 <HAL_GPIO_Init+0x2f0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d013      	beq.n	8002a48 <HAL_GPIO_Init+0x1f0>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a4a      	ldr	r2, [pc, #296]	@ (8002b4c <HAL_GPIO_Init+0x2f4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00d      	beq.n	8002a44 <HAL_GPIO_Init+0x1ec>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a49      	ldr	r2, [pc, #292]	@ (8002b50 <HAL_GPIO_Init+0x2f8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d007      	beq.n	8002a40 <HAL_GPIO_Init+0x1e8>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a48      	ldr	r2, [pc, #288]	@ (8002b54 <HAL_GPIO_Init+0x2fc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d101      	bne.n	8002a3c <HAL_GPIO_Init+0x1e4>
 8002a38:	2305      	movs	r3, #5
 8002a3a:	e00a      	b.n	8002a52 <HAL_GPIO_Init+0x1fa>
 8002a3c:	2306      	movs	r3, #6
 8002a3e:	e008      	b.n	8002a52 <HAL_GPIO_Init+0x1fa>
 8002a40:	2304      	movs	r3, #4
 8002a42:	e006      	b.n	8002a52 <HAL_GPIO_Init+0x1fa>
 8002a44:	2303      	movs	r3, #3
 8002a46:	e004      	b.n	8002a52 <HAL_GPIO_Init+0x1fa>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e002      	b.n	8002a52 <HAL_GPIO_Init+0x1fa>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <HAL_GPIO_Init+0x1fa>
 8002a50:	2300      	movs	r3, #0
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	f002 0203 	and.w	r2, r2, #3
 8002a58:	0092      	lsls	r2, r2, #2
 8002a5a:	4093      	lsls	r3, r2
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a62:	4937      	ldr	r1, [pc, #220]	@ (8002b40 <HAL_GPIO_Init+0x2e8>)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	089b      	lsrs	r3, r3, #2
 8002a68:	3302      	adds	r3, #2
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a70:	4b39      	ldr	r3, [pc, #228]	@ (8002b58 <HAL_GPIO_Init+0x300>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a94:	4a30      	ldr	r2, [pc, #192]	@ (8002b58 <HAL_GPIO_Init+0x300>)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8002b58 <HAL_GPIO_Init+0x300>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002abe:	4a26      	ldr	r2, [pc, #152]	@ (8002b58 <HAL_GPIO_Init+0x300>)
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002ac4:	4b24      	ldr	r3, [pc, #144]	@ (8002b58 <HAL_GPIO_Init+0x300>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8002b58 <HAL_GPIO_Init+0x300>)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002aee:	4b1a      	ldr	r3, [pc, #104]	@ (8002b58 <HAL_GPIO_Init+0x300>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b12:	4a11      	ldr	r2, [pc, #68]	@ (8002b58 <HAL_GPIO_Init+0x300>)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f47f ae9d 	bne.w	8002868 <HAL_GPIO_Init+0x10>
  }
}
 8002b2e:	bf00      	nop
 8002b30:	bf00      	nop
 8002b32:	371c      	adds	r7, #28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40010000 	.word	0x40010000
 8002b44:	48000400 	.word	0x48000400
 8002b48:	48000800 	.word	0x48000800
 8002b4c:	48000c00 	.word	0x48000c00
 8002b50:	48001000 	.word	0x48001000
 8002b54:	48001400 	.word	0x48001400
 8002b58:	40010400 	.word	0x40010400

08002b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	807b      	strh	r3, [r7, #2]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b6c:	787b      	ldrb	r3, [r7, #1]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b72:	887a      	ldrh	r2, [r7, #2]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b78:	e002      	b.n	8002b80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b7a:	887a      	ldrh	r2, [r7, #2]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	041a      	lsls	r2, r3, #16
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	43d9      	mvns	r1, r3
 8002baa:	887b      	ldrh	r3, [r7, #2]
 8002bac:	400b      	ands	r3, r1
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	619a      	str	r2, [r3, #24]
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bca:	4b08      	ldr	r3, [pc, #32]	@ (8002bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d006      	beq.n	8002be4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bd6:	4a05      	ldr	r2, [pc, #20]	@ (8002bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bd8:	88fb      	ldrh	r3, [r7, #6]
 8002bda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fd ff3e 	bl	8000a60 <HAL_GPIO_EXTI_Callback>
  }
}
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40010400 	.word	0x40010400

08002bf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d141      	bne.n	8002c82 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bfe:	4b4b      	ldr	r3, [pc, #300]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c0a:	d131      	bne.n	8002c70 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c0c:	4b47      	ldr	r3, [pc, #284]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c12:	4a46      	ldr	r2, [pc, #280]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c1c:	4b43      	ldr	r3, [pc, #268]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c24:	4a41      	ldr	r2, [pc, #260]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c2c:	4b40      	ldr	r3, [pc, #256]	@ (8002d30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2232      	movs	r2, #50	@ 0x32
 8002c32:	fb02 f303 	mul.w	r3, r2, r3
 8002c36:	4a3f      	ldr	r2, [pc, #252]	@ (8002d34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c38:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3c:	0c9b      	lsrs	r3, r3, #18
 8002c3e:	3301      	adds	r3, #1
 8002c40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c42:	e002      	b.n	8002c4a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c4a:	4b38      	ldr	r3, [pc, #224]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c56:	d102      	bne.n	8002c5e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f2      	bne.n	8002c44 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c5e:	4b33      	ldr	r3, [pc, #204]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c6a:	d158      	bne.n	8002d1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e057      	b.n	8002d20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c70:	4b2e      	ldr	r3, [pc, #184]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c76:	4a2d      	ldr	r2, [pc, #180]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c80:	e04d      	b.n	8002d1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c88:	d141      	bne.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c8a:	4b28      	ldr	r3, [pc, #160]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c96:	d131      	bne.n	8002cfc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c98:	4b24      	ldr	r3, [pc, #144]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c9e:	4a23      	ldr	r2, [pc, #140]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ca4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ca8:	4b20      	ldr	r3, [pc, #128]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cb0:	4a1e      	ldr	r2, [pc, #120]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2232      	movs	r2, #50	@ 0x32
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8002d34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	0c9b      	lsrs	r3, r3, #18
 8002cca:	3301      	adds	r3, #1
 8002ccc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cce:	e002      	b.n	8002cd6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cd6:	4b15      	ldr	r3, [pc, #84]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ce2:	d102      	bne.n	8002cea <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f2      	bne.n	8002cd0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cea:	4b10      	ldr	r3, [pc, #64]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cf6:	d112      	bne.n	8002d1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e011      	b.n	8002d20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d02:	4a0a      	ldr	r2, [pc, #40]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d0c:	e007      	b.n	8002d1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d0e:	4b07      	ldr	r3, [pc, #28]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d16:	4a05      	ldr	r2, [pc, #20]	@ (8002d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d1c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	40007000 	.word	0x40007000
 8002d30:	20000008 	.word	0x20000008
 8002d34:	431bde83 	.word	0x431bde83

08002d38 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d3c:	4b05      	ldr	r3, [pc, #20]	@ (8002d54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	4a04      	ldr	r2, [pc, #16]	@ (8002d54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d46:	6093      	str	r3, [r2, #8]
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40007000 	.word	0x40007000

08002d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e2fe      	b.n	8003368 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d075      	beq.n	8002e62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d76:	4b97      	ldr	r3, [pc, #604]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d80:	4b94      	ldr	r3, [pc, #592]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	2b0c      	cmp	r3, #12
 8002d8e:	d102      	bne.n	8002d96 <HAL_RCC_OscConfig+0x3e>
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d002      	beq.n	8002d9c <HAL_RCC_OscConfig+0x44>
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d10b      	bne.n	8002db4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9c:	4b8d      	ldr	r3, [pc, #564]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d05b      	beq.n	8002e60 <HAL_RCC_OscConfig+0x108>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d157      	bne.n	8002e60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e2d9      	b.n	8003368 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dbc:	d106      	bne.n	8002dcc <HAL_RCC_OscConfig+0x74>
 8002dbe:	4b85      	ldr	r3, [pc, #532]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a84      	ldr	r2, [pc, #528]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	e01d      	b.n	8002e08 <HAL_RCC_OscConfig+0xb0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x98>
 8002dd6:	4b7f      	ldr	r3, [pc, #508]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a7e      	ldr	r2, [pc, #504]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002ddc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	4b7c      	ldr	r3, [pc, #496]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a7b      	ldr	r2, [pc, #492]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e00b      	b.n	8002e08 <HAL_RCC_OscConfig+0xb0>
 8002df0:	4b78      	ldr	r3, [pc, #480]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a77      	ldr	r2, [pc, #476]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002df6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	4b75      	ldr	r3, [pc, #468]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a74      	ldr	r2, [pc, #464]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002e02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d013      	beq.n	8002e38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7fe f94c 	bl	80010ac <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e18:	f7fe f948 	bl	80010ac <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	@ 0x64
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e29e      	b.n	8003368 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e2a:	4b6a      	ldr	r3, [pc, #424]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0xc0>
 8002e36:	e014      	b.n	8002e62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe f938 	bl	80010ac <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e40:	f7fe f934 	bl	80010ac <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	@ 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e28a      	b.n	8003368 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e52:	4b60      	ldr	r3, [pc, #384]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0xe8>
 8002e5e:	e000      	b.n	8002e62 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d075      	beq.n	8002f5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e6e:	4b59      	ldr	r3, [pc, #356]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e78:	4b56      	ldr	r3, [pc, #344]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	2b0c      	cmp	r3, #12
 8002e86:	d102      	bne.n	8002e8e <HAL_RCC_OscConfig+0x136>
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d002      	beq.n	8002e94 <HAL_RCC_OscConfig+0x13c>
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d11f      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e94:	4b4f      	ldr	r3, [pc, #316]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_OscConfig+0x154>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e25d      	b.n	8003368 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eac:	4b49      	ldr	r3, [pc, #292]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	061b      	lsls	r3, r3, #24
 8002eba:	4946      	ldr	r1, [pc, #280]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ec0:	4b45      	ldr	r3, [pc, #276]	@ (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fe f8a5 	bl	8001014 <HAL_InitTick>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d043      	beq.n	8002f58 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e249      	b.n	8003368 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d023      	beq.n	8002f24 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002edc:	4b3d      	ldr	r3, [pc, #244]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a3c      	ldr	r2, [pc, #240]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002ee2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7fe f8e0 	bl	80010ac <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef0:	f7fe f8dc 	bl	80010ac <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e232      	b.n	8003368 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f02:	4b34      	ldr	r3, [pc, #208]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0e:	4b31      	ldr	r3, [pc, #196]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	061b      	lsls	r3, r3, #24
 8002f1c:	492d      	ldr	r1, [pc, #180]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	604b      	str	r3, [r1, #4]
 8002f22:	e01a      	b.n	8002f5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f24:	4b2b      	ldr	r3, [pc, #172]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2a      	ldr	r2, [pc, #168]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002f2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fe f8bc 	bl	80010ac <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f38:	f7fe f8b8 	bl	80010ac <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e20e      	b.n	8003368 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f4a:	4b22      	ldr	r3, [pc, #136]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x1e0>
 8002f56:	e000      	b.n	8002f5a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d041      	beq.n	8002fea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d01c      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f6e:	4b19      	ldr	r3, [pc, #100]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f74:	4a17      	ldr	r2, [pc, #92]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7e:	f7fe f895 	bl	80010ac <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f86:	f7fe f891 	bl	80010ac <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e1e7      	b.n	8003368 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f98:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0ef      	beq.n	8002f86 <HAL_RCC_OscConfig+0x22e>
 8002fa6:	e020      	b.n	8002fea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fae:	4a09      	ldr	r2, [pc, #36]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7fe f878 	bl	80010ac <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fbe:	e00d      	b.n	8002fdc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc0:	f7fe f874 	bl	80010ac <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d906      	bls.n	8002fdc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e1ca      	b.n	8003368 <HAL_RCC_OscConfig+0x610>
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fdc:	4b8c      	ldr	r3, [pc, #560]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 8002fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1ea      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 80a6 	beq.w	8003144 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ffc:	4b84      	ldr	r3, [pc, #528]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_RCC_OscConfig+0x2b4>
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <HAL_RCC_OscConfig+0x2b6>
 800300c:	2300      	movs	r3, #0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00d      	beq.n	800302e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003012:	4b7f      	ldr	r3, [pc, #508]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 8003014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003016:	4a7e      	ldr	r2, [pc, #504]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 8003018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800301c:	6593      	str	r3, [r2, #88]	@ 0x58
 800301e:	4b7c      	ldr	r3, [pc, #496]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 8003020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800302a:	2301      	movs	r3, #1
 800302c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302e:	4b79      	ldr	r3, [pc, #484]	@ (8003214 <HAL_RCC_OscConfig+0x4bc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003036:	2b00      	cmp	r3, #0
 8003038:	d118      	bne.n	800306c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800303a:	4b76      	ldr	r3, [pc, #472]	@ (8003214 <HAL_RCC_OscConfig+0x4bc>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a75      	ldr	r2, [pc, #468]	@ (8003214 <HAL_RCC_OscConfig+0x4bc>)
 8003040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003046:	f7fe f831 	bl	80010ac <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304e:	f7fe f82d 	bl	80010ac <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e183      	b.n	8003368 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003060:	4b6c      	ldr	r3, [pc, #432]	@ (8003214 <HAL_RCC_OscConfig+0x4bc>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d108      	bne.n	8003086 <HAL_RCC_OscConfig+0x32e>
 8003074:	4b66      	ldr	r3, [pc, #408]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800307a:	4a65      	ldr	r2, [pc, #404]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003084:	e024      	b.n	80030d0 <HAL_RCC_OscConfig+0x378>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b05      	cmp	r3, #5
 800308c:	d110      	bne.n	80030b0 <HAL_RCC_OscConfig+0x358>
 800308e:	4b60      	ldr	r3, [pc, #384]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003094:	4a5e      	ldr	r2, [pc, #376]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 8003096:	f043 0304 	orr.w	r3, r3, #4
 800309a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800309e:	4b5c      	ldr	r3, [pc, #368]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 80030a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a4:	4a5a      	ldr	r2, [pc, #360]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030ae:	e00f      	b.n	80030d0 <HAL_RCC_OscConfig+0x378>
 80030b0:	4b57      	ldr	r3, [pc, #348]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b6:	4a56      	ldr	r2, [pc, #344]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 80030b8:	f023 0301 	bic.w	r3, r3, #1
 80030bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030c0:	4b53      	ldr	r3, [pc, #332]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 80030c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c6:	4a52      	ldr	r2, [pc, #328]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 80030c8:	f023 0304 	bic.w	r3, r3, #4
 80030cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d016      	beq.n	8003106 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d8:	f7fd ffe8 	bl	80010ac <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e0:	f7fd ffe4 	bl	80010ac <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e138      	b.n	8003368 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030f6:	4b46      	ldr	r3, [pc, #280]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0ed      	beq.n	80030e0 <HAL_RCC_OscConfig+0x388>
 8003104:	e015      	b.n	8003132 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003106:	f7fd ffd1 	bl	80010ac <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800310c:	e00a      	b.n	8003124 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310e:	f7fd ffcd 	bl	80010ac <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800311c:	4293      	cmp	r3, r2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e121      	b.n	8003368 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003124:	4b3a      	ldr	r3, [pc, #232]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1ed      	bne.n	800310e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003132:	7ffb      	ldrb	r3, [r7, #31]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d105      	bne.n	8003144 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003138:	4b35      	ldr	r3, [pc, #212]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 800313a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313c:	4a34      	ldr	r2, [pc, #208]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 800313e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003142:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b00      	cmp	r3, #0
 800314e:	d03c      	beq.n	80031ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01c      	beq.n	8003192 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003158:	4b2d      	ldr	r3, [pc, #180]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 800315a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800315e:	4a2c      	ldr	r2, [pc, #176]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003168:	f7fd ffa0 	bl	80010ac <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003170:	f7fd ff9c 	bl	80010ac <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e0f2      	b.n	8003368 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003182:	4b23      	ldr	r3, [pc, #140]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 8003184:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0ef      	beq.n	8003170 <HAL_RCC_OscConfig+0x418>
 8003190:	e01b      	b.n	80031ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003192:	4b1f      	ldr	r3, [pc, #124]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 8003194:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003198:	4a1d      	ldr	r2, [pc, #116]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 800319a:	f023 0301 	bic.w	r3, r3, #1
 800319e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a2:	f7fd ff83 	bl	80010ac <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031aa:	f7fd ff7f 	bl	80010ac <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e0d5      	b.n	8003368 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031bc:	4b14      	ldr	r3, [pc, #80]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 80031be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1ef      	bne.n	80031aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80c9 	beq.w	8003366 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b0c      	cmp	r3, #12
 80031de:	f000 8083 	beq.w	80032e8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d15e      	bne.n	80032a8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ea:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a08      	ldr	r2, [pc, #32]	@ (8003210 <HAL_RCC_OscConfig+0x4b8>)
 80031f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f6:	f7fd ff59 	bl	80010ac <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031fc:	e00c      	b.n	8003218 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fe:	f7fd ff55 	bl	80010ac <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d905      	bls.n	8003218 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e0ab      	b.n	8003368 <HAL_RCC_OscConfig+0x610>
 8003210:	40021000 	.word	0x40021000
 8003214:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003218:	4b55      	ldr	r3, [pc, #340]	@ (8003370 <HAL_RCC_OscConfig+0x618>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1ec      	bne.n	80031fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003224:	4b52      	ldr	r3, [pc, #328]	@ (8003370 <HAL_RCC_OscConfig+0x618>)
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	4b52      	ldr	r3, [pc, #328]	@ (8003374 <HAL_RCC_OscConfig+0x61c>)
 800322a:	4013      	ands	r3, r2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6a11      	ldr	r1, [r2, #32]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003234:	3a01      	subs	r2, #1
 8003236:	0112      	lsls	r2, r2, #4
 8003238:	4311      	orrs	r1, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800323e:	0212      	lsls	r2, r2, #8
 8003240:	4311      	orrs	r1, r2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003246:	0852      	lsrs	r2, r2, #1
 8003248:	3a01      	subs	r2, #1
 800324a:	0552      	lsls	r2, r2, #21
 800324c:	4311      	orrs	r1, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003252:	0852      	lsrs	r2, r2, #1
 8003254:	3a01      	subs	r2, #1
 8003256:	0652      	lsls	r2, r2, #25
 8003258:	4311      	orrs	r1, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800325e:	06d2      	lsls	r2, r2, #27
 8003260:	430a      	orrs	r2, r1
 8003262:	4943      	ldr	r1, [pc, #268]	@ (8003370 <HAL_RCC_OscConfig+0x618>)
 8003264:	4313      	orrs	r3, r2
 8003266:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003268:	4b41      	ldr	r3, [pc, #260]	@ (8003370 <HAL_RCC_OscConfig+0x618>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a40      	ldr	r2, [pc, #256]	@ (8003370 <HAL_RCC_OscConfig+0x618>)
 800326e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003272:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003274:	4b3e      	ldr	r3, [pc, #248]	@ (8003370 <HAL_RCC_OscConfig+0x618>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4a3d      	ldr	r2, [pc, #244]	@ (8003370 <HAL_RCC_OscConfig+0x618>)
 800327a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800327e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fd ff14 	bl	80010ac <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003288:	f7fd ff10 	bl	80010ac <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e066      	b.n	8003368 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329a:	4b35      	ldr	r3, [pc, #212]	@ (8003370 <HAL_RCC_OscConfig+0x618>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x530>
 80032a6:	e05e      	b.n	8003366 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a8:	4b31      	ldr	r3, [pc, #196]	@ (8003370 <HAL_RCC_OscConfig+0x618>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a30      	ldr	r2, [pc, #192]	@ (8003370 <HAL_RCC_OscConfig+0x618>)
 80032ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fd fefa 	bl	80010ac <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032bc:	f7fd fef6 	bl	80010ac <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e04c      	b.n	8003368 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ce:	4b28      	ldr	r3, [pc, #160]	@ (8003370 <HAL_RCC_OscConfig+0x618>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80032da:	4b25      	ldr	r3, [pc, #148]	@ (8003370 <HAL_RCC_OscConfig+0x618>)
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	4924      	ldr	r1, [pc, #144]	@ (8003370 <HAL_RCC_OscConfig+0x618>)
 80032e0:	4b25      	ldr	r3, [pc, #148]	@ (8003378 <HAL_RCC_OscConfig+0x620>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	60cb      	str	r3, [r1, #12]
 80032e6:	e03e      	b.n	8003366 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e039      	b.n	8003368 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80032f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003370 <HAL_RCC_OscConfig+0x618>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f003 0203 	and.w	r2, r3, #3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	429a      	cmp	r2, r3
 8003306:	d12c      	bne.n	8003362 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	3b01      	subs	r3, #1
 8003314:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003316:	429a      	cmp	r2, r3
 8003318:	d123      	bne.n	8003362 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003324:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003326:	429a      	cmp	r2, r3
 8003328:	d11b      	bne.n	8003362 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003334:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003336:	429a      	cmp	r2, r3
 8003338:	d113      	bne.n	8003362 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	3b01      	subs	r3, #1
 8003348:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800334a:	429a      	cmp	r2, r3
 800334c:	d109      	bne.n	8003362 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003358:	085b      	lsrs	r3, r3, #1
 800335a:	3b01      	subs	r3, #1
 800335c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d001      	beq.n	8003366 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3720      	adds	r7, #32
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000
 8003374:	019f800c 	.word	0x019f800c
 8003378:	feeefffc 	.word	0xfeeefffc

0800337c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e11e      	b.n	80035d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003394:	4b91      	ldr	r3, [pc, #580]	@ (80035dc <HAL_RCC_ClockConfig+0x260>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d910      	bls.n	80033c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a2:	4b8e      	ldr	r3, [pc, #568]	@ (80035dc <HAL_RCC_ClockConfig+0x260>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 020f 	bic.w	r2, r3, #15
 80033aa:	498c      	ldr	r1, [pc, #560]	@ (80035dc <HAL_RCC_ClockConfig+0x260>)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b8a      	ldr	r3, [pc, #552]	@ (80035dc <HAL_RCC_ClockConfig+0x260>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e106      	b.n	80035d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d073      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d129      	bne.n	800342c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d8:	4b81      	ldr	r3, [pc, #516]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0f4      	b.n	80035d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80033e8:	f000 f966 	bl	80036b8 <RCC_GetSysClockFreqFromPLLSource>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4a7c      	ldr	r2, [pc, #496]	@ (80035e4 <HAL_RCC_ClockConfig+0x268>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d93f      	bls.n	8003476 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033f6:	4b7a      	ldr	r3, [pc, #488]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800340a:	2b00      	cmp	r3, #0
 800340c:	d033      	beq.n	8003476 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003412:	2b00      	cmp	r3, #0
 8003414:	d12f      	bne.n	8003476 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003416:	4b72      	ldr	r3, [pc, #456]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800341e:	4a70      	ldr	r2, [pc, #448]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003420:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003424:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003426:	2380      	movs	r3, #128	@ 0x80
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	e024      	b.n	8003476 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b02      	cmp	r3, #2
 8003432:	d107      	bne.n	8003444 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003434:	4b6a      	ldr	r3, [pc, #424]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0c6      	b.n	80035d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003444:	4b66      	ldr	r3, [pc, #408]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0be      	b.n	80035d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003454:	f000 f8ce 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 8003458:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	4a61      	ldr	r2, [pc, #388]	@ (80035e4 <HAL_RCC_ClockConfig+0x268>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d909      	bls.n	8003476 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003462:	4b5f      	ldr	r3, [pc, #380]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800346a:	4a5d      	ldr	r2, [pc, #372]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 800346c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003470:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003472:	2380      	movs	r3, #128	@ 0x80
 8003474:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003476:	4b5a      	ldr	r3, [pc, #360]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f023 0203 	bic.w	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	4957      	ldr	r1, [pc, #348]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003484:	4313      	orrs	r3, r2
 8003486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003488:	f7fd fe10 	bl	80010ac <HAL_GetTick>
 800348c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348e:	e00a      	b.n	80034a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003490:	f7fd fe0c 	bl	80010ac <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e095      	b.n	80035d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a6:	4b4e      	ldr	r3, [pc, #312]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 020c 	and.w	r2, r3, #12
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d1eb      	bne.n	8003490 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d023      	beq.n	800350c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034d0:	4b43      	ldr	r3, [pc, #268]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	4a42      	ldr	r2, [pc, #264]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 80034d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80034da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d007      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80034e8:	4b3d      	ldr	r3, [pc, #244]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80034f0:	4a3b      	ldr	r2, [pc, #236]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 80034f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80034f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f8:	4b39      	ldr	r3, [pc, #228]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4936      	ldr	r1, [pc, #216]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
 800350a:	e008      	b.n	800351e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2b80      	cmp	r3, #128	@ 0x80
 8003510:	d105      	bne.n	800351e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003512:	4b33      	ldr	r3, [pc, #204]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	4a32      	ldr	r2, [pc, #200]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003518:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800351c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800351e:	4b2f      	ldr	r3, [pc, #188]	@ (80035dc <HAL_RCC_ClockConfig+0x260>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d21d      	bcs.n	8003568 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352c:	4b2b      	ldr	r3, [pc, #172]	@ (80035dc <HAL_RCC_ClockConfig+0x260>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f023 020f 	bic.w	r2, r3, #15
 8003534:	4929      	ldr	r1, [pc, #164]	@ (80035dc <HAL_RCC_ClockConfig+0x260>)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	4313      	orrs	r3, r2
 800353a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800353c:	f7fd fdb6 	bl	80010ac <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	e00a      	b.n	800355a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003544:	f7fd fdb2 	bl	80010ac <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003552:	4293      	cmp	r3, r2
 8003554:	d901      	bls.n	800355a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e03b      	b.n	80035d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800355a:	4b20      	ldr	r3, [pc, #128]	@ (80035dc <HAL_RCC_ClockConfig+0x260>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d1ed      	bne.n	8003544 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003574:	4b1a      	ldr	r3, [pc, #104]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4917      	ldr	r1, [pc, #92]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003592:	4b13      	ldr	r3, [pc, #76]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	490f      	ldr	r1, [pc, #60]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035a6:	f000 f825 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 80035aa:	4602      	mov	r2, r0
 80035ac:	4b0c      	ldr	r3, [pc, #48]	@ (80035e0 <HAL_RCC_ClockConfig+0x264>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	490c      	ldr	r1, [pc, #48]	@ (80035e8 <HAL_RCC_ClockConfig+0x26c>)
 80035b8:	5ccb      	ldrb	r3, [r1, r3]
 80035ba:	f003 031f 	and.w	r3, r3, #31
 80035be:	fa22 f303 	lsr.w	r3, r2, r3
 80035c2:	4a0a      	ldr	r2, [pc, #40]	@ (80035ec <HAL_RCC_ClockConfig+0x270>)
 80035c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80035c6:	4b0a      	ldr	r3, [pc, #40]	@ (80035f0 <HAL_RCC_ClockConfig+0x274>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fd fd22 	bl	8001014 <HAL_InitTick>
 80035d0:	4603      	mov	r3, r0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40022000 	.word	0x40022000
 80035e0:	40021000 	.word	0x40021000
 80035e4:	04c4b400 	.word	0x04c4b400
 80035e8:	080057f0 	.word	0x080057f0
 80035ec:	20000008 	.word	0x20000008
 80035f0:	2000000c 	.word	0x2000000c

080035f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80035fa:	4b2c      	ldr	r3, [pc, #176]	@ (80036ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b04      	cmp	r3, #4
 8003604:	d102      	bne.n	800360c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003606:	4b2a      	ldr	r3, [pc, #168]	@ (80036b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	e047      	b.n	800369c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800360c:	4b27      	ldr	r3, [pc, #156]	@ (80036ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b08      	cmp	r3, #8
 8003616:	d102      	bne.n	800361e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003618:	4b26      	ldr	r3, [pc, #152]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800361a:	613b      	str	r3, [r7, #16]
 800361c:	e03e      	b.n	800369c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800361e:	4b23      	ldr	r3, [pc, #140]	@ (80036ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
 8003626:	2b0c      	cmp	r3, #12
 8003628:	d136      	bne.n	8003698 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800362a:	4b20      	ldr	r3, [pc, #128]	@ (80036ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003634:	4b1d      	ldr	r3, [pc, #116]	@ (80036ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	3301      	adds	r3, #1
 8003640:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b03      	cmp	r3, #3
 8003646:	d10c      	bne.n	8003662 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003648:	4a1a      	ldr	r2, [pc, #104]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003650:	4a16      	ldr	r2, [pc, #88]	@ (80036ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003652:	68d2      	ldr	r2, [r2, #12]
 8003654:	0a12      	lsrs	r2, r2, #8
 8003656:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800365a:	fb02 f303 	mul.w	r3, r2, r3
 800365e:	617b      	str	r3, [r7, #20]
      break;
 8003660:	e00c      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003662:	4a13      	ldr	r2, [pc, #76]	@ (80036b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	fbb2 f3f3 	udiv	r3, r2, r3
 800366a:	4a10      	ldr	r2, [pc, #64]	@ (80036ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800366c:	68d2      	ldr	r2, [r2, #12]
 800366e:	0a12      	lsrs	r2, r2, #8
 8003670:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003674:	fb02 f303 	mul.w	r3, r2, r3
 8003678:	617b      	str	r3, [r7, #20]
      break;
 800367a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800367c:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	0e5b      	lsrs	r3, r3, #25
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	3301      	adds	r3, #1
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	fbb2 f3f3 	udiv	r3, r2, r3
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	e001      	b.n	800369c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800369c:	693b      	ldr	r3, [r7, #16]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40021000 	.word	0x40021000
 80036b0:	00f42400 	.word	0x00f42400
 80036b4:	016e3600 	.word	0x016e3600

080036b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036be:	4b1e      	ldr	r3, [pc, #120]	@ (8003738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	091b      	lsrs	r3, r3, #4
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	3301      	adds	r3, #1
 80036d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d10c      	bne.n	80036f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036dc:	4a17      	ldr	r2, [pc, #92]	@ (800373c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e4:	4a14      	ldr	r2, [pc, #80]	@ (8003738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036e6:	68d2      	ldr	r2, [r2, #12]
 80036e8:	0a12      	lsrs	r2, r2, #8
 80036ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036ee:	fb02 f303 	mul.w	r3, r2, r3
 80036f2:	617b      	str	r3, [r7, #20]
    break;
 80036f4:	e00c      	b.n	8003710 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036f6:	4a12      	ldr	r2, [pc, #72]	@ (8003740 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fe:	4a0e      	ldr	r2, [pc, #56]	@ (8003738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003700:	68d2      	ldr	r2, [r2, #12]
 8003702:	0a12      	lsrs	r2, r2, #8
 8003704:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003708:	fb02 f303 	mul.w	r3, r2, r3
 800370c:	617b      	str	r3, [r7, #20]
    break;
 800370e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003710:	4b09      	ldr	r3, [pc, #36]	@ (8003738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	0e5b      	lsrs	r3, r3, #25
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	3301      	adds	r3, #1
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
 8003728:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800372a:	687b      	ldr	r3, [r7, #4]
}
 800372c:	4618      	mov	r0, r3
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	40021000 	.word	0x40021000
 800373c:	016e3600 	.word	0x016e3600
 8003740:	00f42400 	.word	0x00f42400

08003744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800374c:	2300      	movs	r3, #0
 800374e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003750:	2300      	movs	r3, #0
 8003752:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 8098 	beq.w	8003892 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003762:	2300      	movs	r3, #0
 8003764:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003766:	4b43      	ldr	r3, [pc, #268]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10d      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003772:	4b40      	ldr	r3, [pc, #256]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003776:	4a3f      	ldr	r2, [pc, #252]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800377c:	6593      	str	r3, [r2, #88]	@ 0x58
 800377e:	4b3d      	ldr	r3, [pc, #244]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800378a:	2301      	movs	r3, #1
 800378c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800378e:	4b3a      	ldr	r3, [pc, #232]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a39      	ldr	r2, [pc, #228]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003798:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800379a:	f7fd fc87 	bl	80010ac <HAL_GetTick>
 800379e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037a0:	e009      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a2:	f7fd fc83 	bl	80010ac <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d902      	bls.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	74fb      	strb	r3, [r7, #19]
        break;
 80037b4:	e005      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037b6:	4b30      	ldr	r3, [pc, #192]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0ef      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80037c2:	7cfb      	ldrb	r3, [r7, #19]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d159      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037c8:	4b2a      	ldr	r3, [pc, #168]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d01e      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d019      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037e4:	4b23      	ldr	r3, [pc, #140]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037f0:	4b20      	ldr	r3, [pc, #128]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003800:	4b1c      	ldr	r3, [pc, #112]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003806:	4a1b      	ldr	r2, [pc, #108]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800380c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003810:	4a18      	ldr	r2, [pc, #96]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d016      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003822:	f7fd fc43 	bl	80010ac <HAL_GetTick>
 8003826:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003828:	e00b      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fd fc3f 	bl	80010ac <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003838:	4293      	cmp	r3, r2
 800383a:	d902      	bls.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	74fb      	strb	r3, [r7, #19]
            break;
 8003840:	e006      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003842:	4b0c      	ldr	r3, [pc, #48]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0ec      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10b      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003856:	4b07      	ldr	r3, [pc, #28]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003864:	4903      	ldr	r1, [pc, #12]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800386c:	e008      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800386e:	7cfb      	ldrb	r3, [r7, #19]
 8003870:	74bb      	strb	r3, [r7, #18]
 8003872:	e005      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003874:	40021000 	.word	0x40021000
 8003878:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387c:	7cfb      	ldrb	r3, [r7, #19]
 800387e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003880:	7c7b      	ldrb	r3, [r7, #17]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d105      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003886:	4ba7      	ldr	r3, [pc, #668]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800388a:	4aa6      	ldr	r2, [pc, #664]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003890:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800389e:	4ba1      	ldr	r3, [pc, #644]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a4:	f023 0203 	bic.w	r2, r3, #3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	499d      	ldr	r1, [pc, #628]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038c0:	4b98      	ldr	r3, [pc, #608]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c6:	f023 020c 	bic.w	r2, r3, #12
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	4995      	ldr	r1, [pc, #596]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038e2:	4b90      	ldr	r3, [pc, #576]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	498c      	ldr	r1, [pc, #560]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00a      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003904:	4b87      	ldr	r3, [pc, #540]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	4984      	ldr	r1, [pc, #528]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003926:	4b7f      	ldr	r3, [pc, #508]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	497b      	ldr	r1, [pc, #492]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003948:	4b76      	ldr	r3, [pc, #472]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	4973      	ldr	r1, [pc, #460]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800396a:	4b6e      	ldr	r3, [pc, #440]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003970:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	496a      	ldr	r1, [pc, #424]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800398c:	4b65      	ldr	r3, [pc, #404]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003992:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	4962      	ldr	r1, [pc, #392]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039ae:	4b5d      	ldr	r3, [pc, #372]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039bc:	4959      	ldr	r1, [pc, #356]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039d0:	4b54      	ldr	r3, [pc, #336]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039d6:	f023 0203 	bic.w	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039de:	4951      	ldr	r1, [pc, #324]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039f2:	4b4c      	ldr	r3, [pc, #304]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a00:	4948      	ldr	r1, [pc, #288]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d015      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a14:	4b43      	ldr	r3, [pc, #268]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a22:	4940      	ldr	r1, [pc, #256]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a32:	d105      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a34:	4b3b      	ldr	r3, [pc, #236]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a3a      	ldr	r2, [pc, #232]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a3e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d015      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a4c:	4b35      	ldr	r3, [pc, #212]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a52:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a5a:	4932      	ldr	r1, [pc, #200]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a6a:	d105      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4a2c      	ldr	r2, [pc, #176]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a76:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d015      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a84:	4b27      	ldr	r3, [pc, #156]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a92:	4924      	ldr	r1, [pc, #144]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003aa2:	d105      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003aae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d015      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003abc:	4b19      	ldr	r3, [pc, #100]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aca:	4916      	ldr	r1, [pc, #88]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ada:	d105      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003adc:	4b11      	ldr	r3, [pc, #68]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4a10      	ldr	r2, [pc, #64]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ae6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d019      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003af4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b02:	4908      	ldr	r1, [pc, #32]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b12:	d109      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b14:	4b03      	ldr	r3, [pc, #12]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4a02      	ldr	r2, [pc, #8]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b1e:	60d3      	str	r3, [r2, #12]
 8003b20:	e002      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d015      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b34:	4b29      	ldr	r3, [pc, #164]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b3a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b42:	4926      	ldr	r1, [pc, #152]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b52:	d105      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b54:	4b21      	ldr	r3, [pc, #132]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	4a20      	ldr	r2, [pc, #128]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b5e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d015      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b72:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b7a:	4918      	ldr	r1, [pc, #96]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b8a:	d105      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b8c:	4b13      	ldr	r3, [pc, #76]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4a12      	ldr	r2, [pc, #72]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b96:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d015      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003baa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bb2:	490a      	ldr	r1, [pc, #40]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bc2:	d105      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bc4:	4b05      	ldr	r3, [pc, #20]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	4a04      	ldr	r2, [pc, #16]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003bd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40021000 	.word	0x40021000

08003be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e049      	b.n	8003c86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fd f850 	bl	8000cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	f000 ff68 	bl	8004af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d001      	beq.n	8003ca8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e04c      	b.n	8003d42 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a26      	ldr	r2, [pc, #152]	@ (8003d50 <HAL_TIM_Base_Start+0xc0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d022      	beq.n	8003d00 <HAL_TIM_Base_Start+0x70>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cc2:	d01d      	beq.n	8003d00 <HAL_TIM_Base_Start+0x70>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a22      	ldr	r2, [pc, #136]	@ (8003d54 <HAL_TIM_Base_Start+0xc4>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d018      	beq.n	8003d00 <HAL_TIM_Base_Start+0x70>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a21      	ldr	r2, [pc, #132]	@ (8003d58 <HAL_TIM_Base_Start+0xc8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d013      	beq.n	8003d00 <HAL_TIM_Base_Start+0x70>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8003d5c <HAL_TIM_Base_Start+0xcc>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00e      	beq.n	8003d00 <HAL_TIM_Base_Start+0x70>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8003d60 <HAL_TIM_Base_Start+0xd0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d009      	beq.n	8003d00 <HAL_TIM_Base_Start+0x70>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8003d64 <HAL_TIM_Base_Start+0xd4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d004      	beq.n	8003d00 <HAL_TIM_Base_Start+0x70>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8003d68 <HAL_TIM_Base_Start+0xd8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d115      	bne.n	8003d2c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	4b19      	ldr	r3, [pc, #100]	@ (8003d6c <HAL_TIM_Base_Start+0xdc>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b06      	cmp	r3, #6
 8003d10:	d015      	beq.n	8003d3e <HAL_TIM_Base_Start+0xae>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d18:	d011      	beq.n	8003d3e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 0201 	orr.w	r2, r2, #1
 8003d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2a:	e008      	b.n	8003d3e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0201 	orr.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	e000      	b.n	8003d40 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40012c00 	.word	0x40012c00
 8003d54:	40000400 	.word	0x40000400
 8003d58:	40000800 	.word	0x40000800
 8003d5c:	40000c00 	.word	0x40000c00
 8003d60:	40013400 	.word	0x40013400
 8003d64:	40014000 	.word	0x40014000
 8003d68:	40015000 	.word	0x40015000
 8003d6c:	00010007 	.word	0x00010007

08003d70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d001      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e054      	b.n	8003e32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a26      	ldr	r2, [pc, #152]	@ (8003e40 <HAL_TIM_Base_Start_IT+0xd0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d022      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db2:	d01d      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a22      	ldr	r2, [pc, #136]	@ (8003e44 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d018      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a21      	ldr	r2, [pc, #132]	@ (8003e48 <HAL_TIM_Base_Start_IT+0xd8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d013      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8003e4c <HAL_TIM_Base_Start_IT+0xdc>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00e      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8003e50 <HAL_TIM_Base_Start_IT+0xe0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d009      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1c      	ldr	r2, [pc, #112]	@ (8003e54 <HAL_TIM_Base_Start_IT+0xe4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d004      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1b      	ldr	r2, [pc, #108]	@ (8003e58 <HAL_TIM_Base_Start_IT+0xe8>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d115      	bne.n	8003e1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	4b19      	ldr	r3, [pc, #100]	@ (8003e5c <HAL_TIM_Base_Start_IT+0xec>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b06      	cmp	r3, #6
 8003e00:	d015      	beq.n	8003e2e <HAL_TIM_Base_Start_IT+0xbe>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e08:	d011      	beq.n	8003e2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0201 	orr.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1a:	e008      	b.n	8003e2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	e000      	b.n	8003e30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40012c00 	.word	0x40012c00
 8003e44:	40000400 	.word	0x40000400
 8003e48:	40000800 	.word	0x40000800
 8003e4c:	40000c00 	.word	0x40000c00
 8003e50:	40013400 	.word	0x40013400
 8003e54:	40014000 	.word	0x40014000
 8003e58:	40015000 	.word	0x40015000
 8003e5c:	00010007 	.word	0x00010007

08003e60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e049      	b.n	8003f06 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f841 	bl	8003f0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	f000 fe28 	bl	8004af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
	...

08003f24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d109      	bne.n	8003f48 <HAL_TIM_PWM_Start+0x24>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	bf14      	ite	ne
 8003f40:	2301      	movne	r3, #1
 8003f42:	2300      	moveq	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	e03c      	b.n	8003fc2 <HAL_TIM_PWM_Start+0x9e>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d109      	bne.n	8003f62 <HAL_TIM_PWM_Start+0x3e>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	bf14      	ite	ne
 8003f5a:	2301      	movne	r3, #1
 8003f5c:	2300      	moveq	r3, #0
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	e02f      	b.n	8003fc2 <HAL_TIM_PWM_Start+0x9e>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d109      	bne.n	8003f7c <HAL_TIM_PWM_Start+0x58>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	bf14      	ite	ne
 8003f74:	2301      	movne	r3, #1
 8003f76:	2300      	moveq	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	e022      	b.n	8003fc2 <HAL_TIM_PWM_Start+0x9e>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	2b0c      	cmp	r3, #12
 8003f80:	d109      	bne.n	8003f96 <HAL_TIM_PWM_Start+0x72>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	bf14      	ite	ne
 8003f8e:	2301      	movne	r3, #1
 8003f90:	2300      	moveq	r3, #0
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	e015      	b.n	8003fc2 <HAL_TIM_PWM_Start+0x9e>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d109      	bne.n	8003fb0 <HAL_TIM_PWM_Start+0x8c>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	bf14      	ite	ne
 8003fa8:	2301      	movne	r3, #1
 8003faa:	2300      	moveq	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	e008      	b.n	8003fc2 <HAL_TIM_PWM_Start+0x9e>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	bf14      	ite	ne
 8003fbc:	2301      	movne	r3, #1
 8003fbe:	2300      	moveq	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e0a6      	b.n	8004118 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d104      	bne.n	8003fda <HAL_TIM_PWM_Start+0xb6>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fd8:	e023      	b.n	8004022 <HAL_TIM_PWM_Start+0xfe>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d104      	bne.n	8003fea <HAL_TIM_PWM_Start+0xc6>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fe8:	e01b      	b.n	8004022 <HAL_TIM_PWM_Start+0xfe>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d104      	bne.n	8003ffa <HAL_TIM_PWM_Start+0xd6>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ff8:	e013      	b.n	8004022 <HAL_TIM_PWM_Start+0xfe>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b0c      	cmp	r3, #12
 8003ffe:	d104      	bne.n	800400a <HAL_TIM_PWM_Start+0xe6>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004008:	e00b      	b.n	8004022 <HAL_TIM_PWM_Start+0xfe>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b10      	cmp	r3, #16
 800400e:	d104      	bne.n	800401a <HAL_TIM_PWM_Start+0xf6>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004018:	e003      	b.n	8004022 <HAL_TIM_PWM_Start+0xfe>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2202      	movs	r2, #2
 800401e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2201      	movs	r2, #1
 8004028:	6839      	ldr	r1, [r7, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f001 f9dc 	bl	80053e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a3a      	ldr	r2, [pc, #232]	@ (8004120 <HAL_TIM_PWM_Start+0x1fc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d018      	beq.n	800406c <HAL_TIM_PWM_Start+0x148>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a39      	ldr	r2, [pc, #228]	@ (8004124 <HAL_TIM_PWM_Start+0x200>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d013      	beq.n	800406c <HAL_TIM_PWM_Start+0x148>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a37      	ldr	r2, [pc, #220]	@ (8004128 <HAL_TIM_PWM_Start+0x204>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00e      	beq.n	800406c <HAL_TIM_PWM_Start+0x148>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a36      	ldr	r2, [pc, #216]	@ (800412c <HAL_TIM_PWM_Start+0x208>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d009      	beq.n	800406c <HAL_TIM_PWM_Start+0x148>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a34      	ldr	r2, [pc, #208]	@ (8004130 <HAL_TIM_PWM_Start+0x20c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d004      	beq.n	800406c <HAL_TIM_PWM_Start+0x148>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a33      	ldr	r2, [pc, #204]	@ (8004134 <HAL_TIM_PWM_Start+0x210>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d101      	bne.n	8004070 <HAL_TIM_PWM_Start+0x14c>
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <HAL_TIM_PWM_Start+0x14e>
 8004070:	2300      	movs	r3, #0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d007      	beq.n	8004086 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004084:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a25      	ldr	r2, [pc, #148]	@ (8004120 <HAL_TIM_PWM_Start+0x1fc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d022      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x1b2>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004098:	d01d      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x1b2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a26      	ldr	r2, [pc, #152]	@ (8004138 <HAL_TIM_PWM_Start+0x214>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d018      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x1b2>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a24      	ldr	r2, [pc, #144]	@ (800413c <HAL_TIM_PWM_Start+0x218>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d013      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x1b2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a23      	ldr	r2, [pc, #140]	@ (8004140 <HAL_TIM_PWM_Start+0x21c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00e      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x1b2>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a19      	ldr	r2, [pc, #100]	@ (8004124 <HAL_TIM_PWM_Start+0x200>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d009      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x1b2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a18      	ldr	r2, [pc, #96]	@ (8004128 <HAL_TIM_PWM_Start+0x204>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d004      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x1b2>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a18      	ldr	r2, [pc, #96]	@ (8004134 <HAL_TIM_PWM_Start+0x210>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d115      	bne.n	8004102 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	4b19      	ldr	r3, [pc, #100]	@ (8004144 <HAL_TIM_PWM_Start+0x220>)
 80040de:	4013      	ands	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b06      	cmp	r3, #6
 80040e6:	d015      	beq.n	8004114 <HAL_TIM_PWM_Start+0x1f0>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ee:	d011      	beq.n	8004114 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004100:	e008      	b.n	8004114 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0201 	orr.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	e000      	b.n	8004116 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004114:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40012c00 	.word	0x40012c00
 8004124:	40013400 	.word	0x40013400
 8004128:	40014000 	.word	0x40014000
 800412c:	40014400 	.word	0x40014400
 8004130:	40014800 	.word	0x40014800
 8004134:	40015000 	.word	0x40015000
 8004138:	40000400 	.word	0x40000400
 800413c:	40000800 	.word	0x40000800
 8004140:	40000c00 	.word	0x40000c00
 8004144:	00010007 	.word	0x00010007

08004148 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e097      	b.n	800428c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d106      	bne.n	8004176 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7fc fdd3 	bl	8000d1c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2202      	movs	r2, #2
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800418c:	f023 0307 	bic.w	r3, r3, #7
 8004190:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3304      	adds	r3, #4
 800419a:	4619      	mov	r1, r3
 800419c:	4610      	mov	r0, r2
 800419e:	f000 fca9 	bl	8004af4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041ca:	f023 0303 	bic.w	r3, r3, #3
 80041ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	021b      	lsls	r3, r3, #8
 80041da:	4313      	orrs	r3, r2
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80041e8:	f023 030c 	bic.w	r3, r3, #12
 80041ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	021b      	lsls	r3, r3, #8
 8004204:	4313      	orrs	r3, r2
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	011a      	lsls	r2, r3, #4
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	031b      	lsls	r3, r3, #12
 8004218:	4313      	orrs	r3, r2
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004226:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800422e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	4313      	orrs	r3, r2
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80042ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d110      	bne.n	80042e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d102      	bne.n	80042d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80042ca:	7b7b      	ldrb	r3, [r7, #13]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d001      	beq.n	80042d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e069      	b.n	80043a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042e4:	e031      	b.n	800434a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d110      	bne.n	800430e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80042ec:	7bbb      	ldrb	r3, [r7, #14]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d102      	bne.n	80042f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80042f2:	7b3b      	ldrb	r3, [r7, #12]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d001      	beq.n	80042fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e055      	b.n	80043a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800430c:	e01d      	b.n	800434a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d108      	bne.n	8004326 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004314:	7bbb      	ldrb	r3, [r7, #14]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d105      	bne.n	8004326 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800431a:	7b7b      	ldrb	r3, [r7, #13]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d102      	bne.n	8004326 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004320:	7b3b      	ldrb	r3, [r7, #12]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d001      	beq.n	800432a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e03e      	b.n	80043a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2202      	movs	r2, #2
 8004336:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2202      	movs	r2, #2
 800433e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2202      	movs	r2, #2
 8004346:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_TIM_Encoder_Start+0xc4>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b04      	cmp	r3, #4
 8004354:	d008      	beq.n	8004368 <HAL_TIM_Encoder_Start+0xd4>
 8004356:	e00f      	b.n	8004378 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2201      	movs	r2, #1
 800435e:	2100      	movs	r1, #0
 8004360:	4618      	mov	r0, r3
 8004362:	f001 f841 	bl	80053e8 <TIM_CCxChannelCmd>
      break;
 8004366:	e016      	b.n	8004396 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2201      	movs	r2, #1
 800436e:	2104      	movs	r1, #4
 8004370:	4618      	mov	r0, r3
 8004372:	f001 f839 	bl	80053e8 <TIM_CCxChannelCmd>
      break;
 8004376:	e00e      	b.n	8004396 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2201      	movs	r2, #1
 800437e:	2100      	movs	r1, #0
 8004380:	4618      	mov	r0, r3
 8004382:	f001 f831 	bl	80053e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2201      	movs	r2, #1
 800438c:	2104      	movs	r1, #4
 800438e:	4618      	mov	r0, r3
 8004390:	f001 f82a 	bl	80053e8 <TIM_CCxChannelCmd>
      break;
 8004394:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0201 	orr.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d020      	beq.n	8004414 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01b      	beq.n	8004414 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0202 	mvn.w	r2, #2
 80043e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fb5c 	bl	8004ab8 <HAL_TIM_IC_CaptureCallback>
 8004400:	e005      	b.n	800440e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fb4e 	bl	8004aa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fb5f 	bl	8004acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d020      	beq.n	8004460 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01b      	beq.n	8004460 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0204 	mvn.w	r2, #4
 8004430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2202      	movs	r2, #2
 8004436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fb36 	bl	8004ab8 <HAL_TIM_IC_CaptureCallback>
 800444c:	e005      	b.n	800445a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fb28 	bl	8004aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fb39 	bl	8004acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d020      	beq.n	80044ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01b      	beq.n	80044ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0208 	mvn.w	r2, #8
 800447c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2204      	movs	r2, #4
 8004482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fb10 	bl	8004ab8 <HAL_TIM_IC_CaptureCallback>
 8004498:	e005      	b.n	80044a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fb02 	bl	8004aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fb13 	bl	8004acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d020      	beq.n	80044f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01b      	beq.n	80044f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0210 	mvn.w	r2, #16
 80044c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2208      	movs	r2, #8
 80044ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 faea 	bl	8004ab8 <HAL_TIM_IC_CaptureCallback>
 80044e4:	e005      	b.n	80044f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fadc 	bl	8004aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 faed 	bl	8004acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00c      	beq.n	800451c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d007      	beq.n	800451c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0201 	mvn.w	r2, #1
 8004514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fc fad0 	bl	8000abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004522:	2b00      	cmp	r3, #0
 8004524:	d104      	bne.n	8004530 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00c      	beq.n	800454a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004536:	2b00      	cmp	r3, #0
 8004538:	d007      	beq.n	800454a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f001 f8a9 	bl	800569c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00c      	beq.n	800456e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455a:	2b00      	cmp	r3, #0
 800455c:	d007      	beq.n	800456e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f001 f8a1 	bl	80056b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00c      	beq.n	8004592 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d007      	beq.n	8004592 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800458a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 faa7 	bl	8004ae0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00c      	beq.n	80045b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d007      	beq.n	80045b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f06f 0220 	mvn.w	r2, #32
 80045ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f001 f869 	bl	8005688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00c      	beq.n	80045da <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80045d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f001 f875 	bl	80056c4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00c      	beq.n	80045fe <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80045f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f001 f86d 	bl	80056d8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00c      	beq.n	8004622 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d007      	beq.n	8004622 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800461a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f001 f865 	bl	80056ec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00c      	beq.n	8004646 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d007      	beq.n	8004646 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800463e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f001 f85d 	bl	8005700 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004646:	bf00      	nop
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800466a:	2302      	movs	r3, #2
 800466c:	e0ff      	b.n	800486e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b14      	cmp	r3, #20
 800467a:	f200 80f0 	bhi.w	800485e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800467e:	a201      	add	r2, pc, #4	@ (adr r2, 8004684 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004684:	080046d9 	.word	0x080046d9
 8004688:	0800485f 	.word	0x0800485f
 800468c:	0800485f 	.word	0x0800485f
 8004690:	0800485f 	.word	0x0800485f
 8004694:	08004719 	.word	0x08004719
 8004698:	0800485f 	.word	0x0800485f
 800469c:	0800485f 	.word	0x0800485f
 80046a0:	0800485f 	.word	0x0800485f
 80046a4:	0800475b 	.word	0x0800475b
 80046a8:	0800485f 	.word	0x0800485f
 80046ac:	0800485f 	.word	0x0800485f
 80046b0:	0800485f 	.word	0x0800485f
 80046b4:	0800479b 	.word	0x0800479b
 80046b8:	0800485f 	.word	0x0800485f
 80046bc:	0800485f 	.word	0x0800485f
 80046c0:	0800485f 	.word	0x0800485f
 80046c4:	080047dd 	.word	0x080047dd
 80046c8:	0800485f 	.word	0x0800485f
 80046cc:	0800485f 	.word	0x0800485f
 80046d0:	0800485f 	.word	0x0800485f
 80046d4:	0800481d 	.word	0x0800481d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 fabc 	bl	8004c5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0208 	orr.w	r2, r2, #8
 80046f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0204 	bic.w	r2, r2, #4
 8004702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6999      	ldr	r1, [r3, #24]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	691a      	ldr	r2, [r3, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	619a      	str	r2, [r3, #24]
      break;
 8004716:	e0a5      	b.n	8004864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fb36 	bl	8004d90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6999      	ldr	r1, [r3, #24]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	021a      	lsls	r2, r3, #8
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	619a      	str	r2, [r3, #24]
      break;
 8004758:	e084      	b.n	8004864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fba9 	bl	8004eb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69da      	ldr	r2, [r3, #28]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0208 	orr.w	r2, r2, #8
 8004774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69da      	ldr	r2, [r3, #28]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0204 	bic.w	r2, r2, #4
 8004784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69d9      	ldr	r1, [r3, #28]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	61da      	str	r2, [r3, #28]
      break;
 8004798:	e064      	b.n	8004864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fc1b 	bl	8004fdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69d9      	ldr	r1, [r3, #28]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	021a      	lsls	r2, r3, #8
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	61da      	str	r2, [r3, #28]
      break;
 80047da:	e043      	b.n	8004864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fc8e 	bl	8005104 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0208 	orr.w	r2, r2, #8
 80047f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0204 	bic.w	r2, r2, #4
 8004806:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800481a:	e023      	b.n	8004864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fcd8 	bl	80051d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004836:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004846:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	021a      	lsls	r2, r3, #8
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800485c:	e002      	b.n	8004864 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	75fb      	strb	r3, [r7, #23]
      break;
 8004862:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800486c:	7dfb      	ldrb	r3, [r7, #23]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop

08004878 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_TIM_ConfigClockSource+0x1c>
 8004890:	2302      	movs	r3, #2
 8004892:	e0f6      	b.n	8004a82 <HAL_TIM_ConfigClockSource+0x20a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80048b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a6f      	ldr	r2, [pc, #444]	@ (8004a8c <HAL_TIM_ConfigClockSource+0x214>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	f000 80c1 	beq.w	8004a56 <HAL_TIM_ConfigClockSource+0x1de>
 80048d4:	4a6d      	ldr	r2, [pc, #436]	@ (8004a8c <HAL_TIM_ConfigClockSource+0x214>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	f200 80c6 	bhi.w	8004a68 <HAL_TIM_ConfigClockSource+0x1f0>
 80048dc:	4a6c      	ldr	r2, [pc, #432]	@ (8004a90 <HAL_TIM_ConfigClockSource+0x218>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	f000 80b9 	beq.w	8004a56 <HAL_TIM_ConfigClockSource+0x1de>
 80048e4:	4a6a      	ldr	r2, [pc, #424]	@ (8004a90 <HAL_TIM_ConfigClockSource+0x218>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	f200 80be 	bhi.w	8004a68 <HAL_TIM_ConfigClockSource+0x1f0>
 80048ec:	4a69      	ldr	r2, [pc, #420]	@ (8004a94 <HAL_TIM_ConfigClockSource+0x21c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	f000 80b1 	beq.w	8004a56 <HAL_TIM_ConfigClockSource+0x1de>
 80048f4:	4a67      	ldr	r2, [pc, #412]	@ (8004a94 <HAL_TIM_ConfigClockSource+0x21c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	f200 80b6 	bhi.w	8004a68 <HAL_TIM_ConfigClockSource+0x1f0>
 80048fc:	4a66      	ldr	r2, [pc, #408]	@ (8004a98 <HAL_TIM_ConfigClockSource+0x220>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	f000 80a9 	beq.w	8004a56 <HAL_TIM_ConfigClockSource+0x1de>
 8004904:	4a64      	ldr	r2, [pc, #400]	@ (8004a98 <HAL_TIM_ConfigClockSource+0x220>)
 8004906:	4293      	cmp	r3, r2
 8004908:	f200 80ae 	bhi.w	8004a68 <HAL_TIM_ConfigClockSource+0x1f0>
 800490c:	4a63      	ldr	r2, [pc, #396]	@ (8004a9c <HAL_TIM_ConfigClockSource+0x224>)
 800490e:	4293      	cmp	r3, r2
 8004910:	f000 80a1 	beq.w	8004a56 <HAL_TIM_ConfigClockSource+0x1de>
 8004914:	4a61      	ldr	r2, [pc, #388]	@ (8004a9c <HAL_TIM_ConfigClockSource+0x224>)
 8004916:	4293      	cmp	r3, r2
 8004918:	f200 80a6 	bhi.w	8004a68 <HAL_TIM_ConfigClockSource+0x1f0>
 800491c:	4a60      	ldr	r2, [pc, #384]	@ (8004aa0 <HAL_TIM_ConfigClockSource+0x228>)
 800491e:	4293      	cmp	r3, r2
 8004920:	f000 8099 	beq.w	8004a56 <HAL_TIM_ConfigClockSource+0x1de>
 8004924:	4a5e      	ldr	r2, [pc, #376]	@ (8004aa0 <HAL_TIM_ConfigClockSource+0x228>)
 8004926:	4293      	cmp	r3, r2
 8004928:	f200 809e 	bhi.w	8004a68 <HAL_TIM_ConfigClockSource+0x1f0>
 800492c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004930:	f000 8091 	beq.w	8004a56 <HAL_TIM_ConfigClockSource+0x1de>
 8004934:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004938:	f200 8096 	bhi.w	8004a68 <HAL_TIM_ConfigClockSource+0x1f0>
 800493c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004940:	f000 8089 	beq.w	8004a56 <HAL_TIM_ConfigClockSource+0x1de>
 8004944:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004948:	f200 808e 	bhi.w	8004a68 <HAL_TIM_ConfigClockSource+0x1f0>
 800494c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004950:	d03e      	beq.n	80049d0 <HAL_TIM_ConfigClockSource+0x158>
 8004952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004956:	f200 8087 	bhi.w	8004a68 <HAL_TIM_ConfigClockSource+0x1f0>
 800495a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800495e:	f000 8086 	beq.w	8004a6e <HAL_TIM_ConfigClockSource+0x1f6>
 8004962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004966:	d87f      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x1f0>
 8004968:	2b70      	cmp	r3, #112	@ 0x70
 800496a:	d01a      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0x12a>
 800496c:	2b70      	cmp	r3, #112	@ 0x70
 800496e:	d87b      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x1f0>
 8004970:	2b60      	cmp	r3, #96	@ 0x60
 8004972:	d050      	beq.n	8004a16 <HAL_TIM_ConfigClockSource+0x19e>
 8004974:	2b60      	cmp	r3, #96	@ 0x60
 8004976:	d877      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x1f0>
 8004978:	2b50      	cmp	r3, #80	@ 0x50
 800497a:	d03c      	beq.n	80049f6 <HAL_TIM_ConfigClockSource+0x17e>
 800497c:	2b50      	cmp	r3, #80	@ 0x50
 800497e:	d873      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x1f0>
 8004980:	2b40      	cmp	r3, #64	@ 0x40
 8004982:	d058      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0x1be>
 8004984:	2b40      	cmp	r3, #64	@ 0x40
 8004986:	d86f      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x1f0>
 8004988:	2b30      	cmp	r3, #48	@ 0x30
 800498a:	d064      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x1de>
 800498c:	2b30      	cmp	r3, #48	@ 0x30
 800498e:	d86b      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x1f0>
 8004990:	2b20      	cmp	r3, #32
 8004992:	d060      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x1de>
 8004994:	2b20      	cmp	r3, #32
 8004996:	d867      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x1f0>
 8004998:	2b00      	cmp	r3, #0
 800499a:	d05c      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x1de>
 800499c:	2b10      	cmp	r3, #16
 800499e:	d05a      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x1de>
 80049a0:	e062      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049b2:	f000 fcf9 	bl	80053a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	609a      	str	r2, [r3, #8]
      break;
 80049ce:	e04f      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049e0:	f000 fce2 	bl	80053a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049f2:	609a      	str	r2, [r3, #8]
      break;
 80049f4:	e03c      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a02:	461a      	mov	r2, r3
 8004a04:	f000 fc54 	bl	80052b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2150      	movs	r1, #80	@ 0x50
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fcad 	bl	800536e <TIM_ITRx_SetConfig>
      break;
 8004a14:	e02c      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a22:	461a      	mov	r2, r3
 8004a24:	f000 fc73 	bl	800530e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2160      	movs	r1, #96	@ 0x60
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fc9d 	bl	800536e <TIM_ITRx_SetConfig>
      break;
 8004a34:	e01c      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a42:	461a      	mov	r2, r3
 8004a44:	f000 fc34 	bl	80052b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2140      	movs	r1, #64	@ 0x40
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fc8d 	bl	800536e <TIM_ITRx_SetConfig>
      break;
 8004a54:	e00c      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4610      	mov	r0, r2
 8004a62:	f000 fc84 	bl	800536e <TIM_ITRx_SetConfig>
      break;
 8004a66:	e003      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a6c:	e000      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	00100070 	.word	0x00100070
 8004a90:	00100060 	.word	0x00100060
 8004a94:	00100050 	.word	0x00100050
 8004a98:	00100040 	.word	0x00100040
 8004a9c:	00100030 	.word	0x00100030
 8004aa0:	00100020 	.word	0x00100020

08004aa4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a4c      	ldr	r2, [pc, #304]	@ (8004c38 <TIM_Base_SetConfig+0x144>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d017      	beq.n	8004b3c <TIM_Base_SetConfig+0x48>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b12:	d013      	beq.n	8004b3c <TIM_Base_SetConfig+0x48>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a49      	ldr	r2, [pc, #292]	@ (8004c3c <TIM_Base_SetConfig+0x148>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d00f      	beq.n	8004b3c <TIM_Base_SetConfig+0x48>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a48      	ldr	r2, [pc, #288]	@ (8004c40 <TIM_Base_SetConfig+0x14c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00b      	beq.n	8004b3c <TIM_Base_SetConfig+0x48>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a47      	ldr	r2, [pc, #284]	@ (8004c44 <TIM_Base_SetConfig+0x150>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d007      	beq.n	8004b3c <TIM_Base_SetConfig+0x48>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a46      	ldr	r2, [pc, #280]	@ (8004c48 <TIM_Base_SetConfig+0x154>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d003      	beq.n	8004b3c <TIM_Base_SetConfig+0x48>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a45      	ldr	r2, [pc, #276]	@ (8004c4c <TIM_Base_SetConfig+0x158>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d108      	bne.n	8004b4e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a39      	ldr	r2, [pc, #228]	@ (8004c38 <TIM_Base_SetConfig+0x144>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d023      	beq.n	8004b9e <TIM_Base_SetConfig+0xaa>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b5c:	d01f      	beq.n	8004b9e <TIM_Base_SetConfig+0xaa>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a36      	ldr	r2, [pc, #216]	@ (8004c3c <TIM_Base_SetConfig+0x148>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d01b      	beq.n	8004b9e <TIM_Base_SetConfig+0xaa>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a35      	ldr	r2, [pc, #212]	@ (8004c40 <TIM_Base_SetConfig+0x14c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d017      	beq.n	8004b9e <TIM_Base_SetConfig+0xaa>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a34      	ldr	r2, [pc, #208]	@ (8004c44 <TIM_Base_SetConfig+0x150>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d013      	beq.n	8004b9e <TIM_Base_SetConfig+0xaa>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a33      	ldr	r2, [pc, #204]	@ (8004c48 <TIM_Base_SetConfig+0x154>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00f      	beq.n	8004b9e <TIM_Base_SetConfig+0xaa>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a33      	ldr	r2, [pc, #204]	@ (8004c50 <TIM_Base_SetConfig+0x15c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00b      	beq.n	8004b9e <TIM_Base_SetConfig+0xaa>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a32      	ldr	r2, [pc, #200]	@ (8004c54 <TIM_Base_SetConfig+0x160>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d007      	beq.n	8004b9e <TIM_Base_SetConfig+0xaa>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a31      	ldr	r2, [pc, #196]	@ (8004c58 <TIM_Base_SetConfig+0x164>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d003      	beq.n	8004b9e <TIM_Base_SetConfig+0xaa>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a2c      	ldr	r2, [pc, #176]	@ (8004c4c <TIM_Base_SetConfig+0x158>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d108      	bne.n	8004bb0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a18      	ldr	r2, [pc, #96]	@ (8004c38 <TIM_Base_SetConfig+0x144>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d013      	beq.n	8004c04 <TIM_Base_SetConfig+0x110>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a1a      	ldr	r2, [pc, #104]	@ (8004c48 <TIM_Base_SetConfig+0x154>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00f      	beq.n	8004c04 <TIM_Base_SetConfig+0x110>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a1a      	ldr	r2, [pc, #104]	@ (8004c50 <TIM_Base_SetConfig+0x15c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00b      	beq.n	8004c04 <TIM_Base_SetConfig+0x110>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a19      	ldr	r2, [pc, #100]	@ (8004c54 <TIM_Base_SetConfig+0x160>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d007      	beq.n	8004c04 <TIM_Base_SetConfig+0x110>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a18      	ldr	r2, [pc, #96]	@ (8004c58 <TIM_Base_SetConfig+0x164>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <TIM_Base_SetConfig+0x110>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a13      	ldr	r2, [pc, #76]	@ (8004c4c <TIM_Base_SetConfig+0x158>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d103      	bne.n	8004c0c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d105      	bne.n	8004c2a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f023 0201 	bic.w	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	611a      	str	r2, [r3, #16]
  }
}
 8004c2a:	bf00      	nop
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	40012c00 	.word	0x40012c00
 8004c3c:	40000400 	.word	0x40000400
 8004c40:	40000800 	.word	0x40000800
 8004c44:	40000c00 	.word	0x40000c00
 8004c48:	40013400 	.word	0x40013400
 8004c4c:	40015000 	.word	0x40015000
 8004c50:	40014000 	.word	0x40014000
 8004c54:	40014400 	.word	0x40014400
 8004c58:	40014800 	.word	0x40014800

08004c5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	f023 0201 	bic.w	r2, r3, #1
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0303 	bic.w	r3, r3, #3
 8004c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f023 0302 	bic.w	r3, r3, #2
 8004ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a30      	ldr	r2, [pc, #192]	@ (8004d78 <TIM_OC1_SetConfig+0x11c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d013      	beq.n	8004ce4 <TIM_OC1_SetConfig+0x88>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a2f      	ldr	r2, [pc, #188]	@ (8004d7c <TIM_OC1_SetConfig+0x120>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00f      	beq.n	8004ce4 <TIM_OC1_SetConfig+0x88>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a2e      	ldr	r2, [pc, #184]	@ (8004d80 <TIM_OC1_SetConfig+0x124>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00b      	beq.n	8004ce4 <TIM_OC1_SetConfig+0x88>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a2d      	ldr	r2, [pc, #180]	@ (8004d84 <TIM_OC1_SetConfig+0x128>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d007      	beq.n	8004ce4 <TIM_OC1_SetConfig+0x88>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8004d88 <TIM_OC1_SetConfig+0x12c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_OC1_SetConfig+0x88>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a2b      	ldr	r2, [pc, #172]	@ (8004d8c <TIM_OC1_SetConfig+0x130>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d10c      	bne.n	8004cfe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f023 0308 	bic.w	r3, r3, #8
 8004cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f023 0304 	bic.w	r3, r3, #4
 8004cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a1d      	ldr	r2, [pc, #116]	@ (8004d78 <TIM_OC1_SetConfig+0x11c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <TIM_OC1_SetConfig+0xd2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a1c      	ldr	r2, [pc, #112]	@ (8004d7c <TIM_OC1_SetConfig+0x120>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00f      	beq.n	8004d2e <TIM_OC1_SetConfig+0xd2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a1b      	ldr	r2, [pc, #108]	@ (8004d80 <TIM_OC1_SetConfig+0x124>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00b      	beq.n	8004d2e <TIM_OC1_SetConfig+0xd2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a1a      	ldr	r2, [pc, #104]	@ (8004d84 <TIM_OC1_SetConfig+0x128>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d007      	beq.n	8004d2e <TIM_OC1_SetConfig+0xd2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a19      	ldr	r2, [pc, #100]	@ (8004d88 <TIM_OC1_SetConfig+0x12c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d003      	beq.n	8004d2e <TIM_OC1_SetConfig+0xd2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a18      	ldr	r2, [pc, #96]	@ (8004d8c <TIM_OC1_SetConfig+0x130>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d111      	bne.n	8004d52 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	621a      	str	r2, [r3, #32]
}
 8004d6c:	bf00      	nop
 8004d6e:	371c      	adds	r7, #28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	40012c00 	.word	0x40012c00
 8004d7c:	40013400 	.word	0x40013400
 8004d80:	40014000 	.word	0x40014000
 8004d84:	40014400 	.word	0x40014400
 8004d88:	40014800 	.word	0x40014800
 8004d8c:	40015000 	.word	0x40015000

08004d90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	f023 0210 	bic.w	r2, r3, #16
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f023 0320 	bic.w	r3, r3, #32
 8004dde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a2c      	ldr	r2, [pc, #176]	@ (8004ea0 <TIM_OC2_SetConfig+0x110>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d007      	beq.n	8004e04 <TIM_OC2_SetConfig+0x74>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a2b      	ldr	r2, [pc, #172]	@ (8004ea4 <TIM_OC2_SetConfig+0x114>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_OC2_SetConfig+0x74>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a2a      	ldr	r2, [pc, #168]	@ (8004ea8 <TIM_OC2_SetConfig+0x118>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d10d      	bne.n	8004e20 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a1f      	ldr	r2, [pc, #124]	@ (8004ea0 <TIM_OC2_SetConfig+0x110>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d013      	beq.n	8004e50 <TIM_OC2_SetConfig+0xc0>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ea4 <TIM_OC2_SetConfig+0x114>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00f      	beq.n	8004e50 <TIM_OC2_SetConfig+0xc0>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a1e      	ldr	r2, [pc, #120]	@ (8004eac <TIM_OC2_SetConfig+0x11c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00b      	beq.n	8004e50 <TIM_OC2_SetConfig+0xc0>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb0 <TIM_OC2_SetConfig+0x120>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d007      	beq.n	8004e50 <TIM_OC2_SetConfig+0xc0>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a1c      	ldr	r2, [pc, #112]	@ (8004eb4 <TIM_OC2_SetConfig+0x124>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d003      	beq.n	8004e50 <TIM_OC2_SetConfig+0xc0>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a17      	ldr	r2, [pc, #92]	@ (8004ea8 <TIM_OC2_SetConfig+0x118>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d113      	bne.n	8004e78 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	621a      	str	r2, [r3, #32]
}
 8004e92:	bf00      	nop
 8004e94:	371c      	adds	r7, #28
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40012c00 	.word	0x40012c00
 8004ea4:	40013400 	.word	0x40013400
 8004ea8:	40015000 	.word	0x40015000
 8004eac:	40014000 	.word	0x40014000
 8004eb0:	40014400 	.word	0x40014400
 8004eb4:	40014800 	.word	0x40014800

08004eb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0303 	bic.w	r3, r3, #3
 8004ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	021b      	lsls	r3, r3, #8
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a2b      	ldr	r2, [pc, #172]	@ (8004fc4 <TIM_OC3_SetConfig+0x10c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d007      	beq.n	8004f2a <TIM_OC3_SetConfig+0x72>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a2a      	ldr	r2, [pc, #168]	@ (8004fc8 <TIM_OC3_SetConfig+0x110>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d003      	beq.n	8004f2a <TIM_OC3_SetConfig+0x72>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a29      	ldr	r2, [pc, #164]	@ (8004fcc <TIM_OC3_SetConfig+0x114>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d10d      	bne.n	8004f46 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a1e      	ldr	r2, [pc, #120]	@ (8004fc4 <TIM_OC3_SetConfig+0x10c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <TIM_OC3_SetConfig+0xbe>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc8 <TIM_OC3_SetConfig+0x110>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00f      	beq.n	8004f76 <TIM_OC3_SetConfig+0xbe>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd0 <TIM_OC3_SetConfig+0x118>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00b      	beq.n	8004f76 <TIM_OC3_SetConfig+0xbe>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a1c      	ldr	r2, [pc, #112]	@ (8004fd4 <TIM_OC3_SetConfig+0x11c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d007      	beq.n	8004f76 <TIM_OC3_SetConfig+0xbe>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd8 <TIM_OC3_SetConfig+0x120>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d003      	beq.n	8004f76 <TIM_OC3_SetConfig+0xbe>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a16      	ldr	r2, [pc, #88]	@ (8004fcc <TIM_OC3_SetConfig+0x114>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d113      	bne.n	8004f9e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	621a      	str	r2, [r3, #32]
}
 8004fb8:	bf00      	nop
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	40012c00 	.word	0x40012c00
 8004fc8:	40013400 	.word	0x40013400
 8004fcc:	40015000 	.word	0x40015000
 8004fd0:	40014000 	.word	0x40014000
 8004fd4:	40014400 	.word	0x40014400
 8004fd8:	40014800 	.word	0x40014800

08004fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800500a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800500e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	021b      	lsls	r3, r3, #8
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800502a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	031b      	lsls	r3, r3, #12
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a2c      	ldr	r2, [pc, #176]	@ (80050ec <TIM_OC4_SetConfig+0x110>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d007      	beq.n	8005050 <TIM_OC4_SetConfig+0x74>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a2b      	ldr	r2, [pc, #172]	@ (80050f0 <TIM_OC4_SetConfig+0x114>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d003      	beq.n	8005050 <TIM_OC4_SetConfig+0x74>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a2a      	ldr	r2, [pc, #168]	@ (80050f4 <TIM_OC4_SetConfig+0x118>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d10d      	bne.n	800506c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	031b      	lsls	r3, r3, #12
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800506a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a1f      	ldr	r2, [pc, #124]	@ (80050ec <TIM_OC4_SetConfig+0x110>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d013      	beq.n	800509c <TIM_OC4_SetConfig+0xc0>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a1e      	ldr	r2, [pc, #120]	@ (80050f0 <TIM_OC4_SetConfig+0x114>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00f      	beq.n	800509c <TIM_OC4_SetConfig+0xc0>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a1e      	ldr	r2, [pc, #120]	@ (80050f8 <TIM_OC4_SetConfig+0x11c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00b      	beq.n	800509c <TIM_OC4_SetConfig+0xc0>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a1d      	ldr	r2, [pc, #116]	@ (80050fc <TIM_OC4_SetConfig+0x120>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d007      	beq.n	800509c <TIM_OC4_SetConfig+0xc0>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a1c      	ldr	r2, [pc, #112]	@ (8005100 <TIM_OC4_SetConfig+0x124>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d003      	beq.n	800509c <TIM_OC4_SetConfig+0xc0>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a17      	ldr	r2, [pc, #92]	@ (80050f4 <TIM_OC4_SetConfig+0x118>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d113      	bne.n	80050c4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050a2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80050aa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	019b      	lsls	r3, r3, #6
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	019b      	lsls	r3, r3, #6
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	621a      	str	r2, [r3, #32]
}
 80050de:	bf00      	nop
 80050e0:	371c      	adds	r7, #28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	40012c00 	.word	0x40012c00
 80050f0:	40013400 	.word	0x40013400
 80050f4:	40015000 	.word	0x40015000
 80050f8:	40014000 	.word	0x40014000
 80050fc:	40014400 	.word	0x40014400
 8005100:	40014800 	.word	0x40014800

08005104 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800512a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005148:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	041b      	lsls	r3, r3, #16
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4313      	orrs	r3, r2
 8005154:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a19      	ldr	r2, [pc, #100]	@ (80051c0 <TIM_OC5_SetConfig+0xbc>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d013      	beq.n	8005186 <TIM_OC5_SetConfig+0x82>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a18      	ldr	r2, [pc, #96]	@ (80051c4 <TIM_OC5_SetConfig+0xc0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00f      	beq.n	8005186 <TIM_OC5_SetConfig+0x82>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a17      	ldr	r2, [pc, #92]	@ (80051c8 <TIM_OC5_SetConfig+0xc4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00b      	beq.n	8005186 <TIM_OC5_SetConfig+0x82>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a16      	ldr	r2, [pc, #88]	@ (80051cc <TIM_OC5_SetConfig+0xc8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d007      	beq.n	8005186 <TIM_OC5_SetConfig+0x82>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a15      	ldr	r2, [pc, #84]	@ (80051d0 <TIM_OC5_SetConfig+0xcc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d003      	beq.n	8005186 <TIM_OC5_SetConfig+0x82>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a14      	ldr	r2, [pc, #80]	@ (80051d4 <TIM_OC5_SetConfig+0xd0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d109      	bne.n	800519a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800518c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	021b      	lsls	r3, r3, #8
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	621a      	str	r2, [r3, #32]
}
 80051b4:	bf00      	nop
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	40012c00 	.word	0x40012c00
 80051c4:	40013400 	.word	0x40013400
 80051c8:	40014000 	.word	0x40014000
 80051cc:	40014400 	.word	0x40014400
 80051d0:	40014800 	.word	0x40014800
 80051d4:	40015000 	.word	0x40015000

080051d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800520a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	021b      	lsls	r3, r3, #8
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4313      	orrs	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800521e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	051b      	lsls	r3, r3, #20
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4313      	orrs	r3, r2
 800522a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a1a      	ldr	r2, [pc, #104]	@ (8005298 <TIM_OC6_SetConfig+0xc0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d013      	beq.n	800525c <TIM_OC6_SetConfig+0x84>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a19      	ldr	r2, [pc, #100]	@ (800529c <TIM_OC6_SetConfig+0xc4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d00f      	beq.n	800525c <TIM_OC6_SetConfig+0x84>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a18      	ldr	r2, [pc, #96]	@ (80052a0 <TIM_OC6_SetConfig+0xc8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00b      	beq.n	800525c <TIM_OC6_SetConfig+0x84>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a17      	ldr	r2, [pc, #92]	@ (80052a4 <TIM_OC6_SetConfig+0xcc>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d007      	beq.n	800525c <TIM_OC6_SetConfig+0x84>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a16      	ldr	r2, [pc, #88]	@ (80052a8 <TIM_OC6_SetConfig+0xd0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d003      	beq.n	800525c <TIM_OC6_SetConfig+0x84>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a15      	ldr	r2, [pc, #84]	@ (80052ac <TIM_OC6_SetConfig+0xd4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d109      	bne.n	8005270 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005262:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	029b      	lsls	r3, r3, #10
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	621a      	str	r2, [r3, #32]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40012c00 	.word	0x40012c00
 800529c:	40013400 	.word	0x40013400
 80052a0:	40014000 	.word	0x40014000
 80052a4:	40014400 	.word	0x40014400
 80052a8:	40014800 	.word	0x40014800
 80052ac:	40015000 	.word	0x40015000

080052b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	f023 0201 	bic.w	r2, r3, #1
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f023 030a 	bic.w	r3, r3, #10
 80052ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	621a      	str	r2, [r3, #32]
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800530e:	b480      	push	{r7}
 8005310:	b087      	sub	sp, #28
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	f023 0210 	bic.w	r2, r3, #16
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005338:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	031b      	lsls	r3, r3, #12
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800534a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	621a      	str	r2, [r3, #32]
}
 8005362:	bf00      	nop
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800536e:	b480      	push	{r7}
 8005370:	b085      	sub	sp, #20
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005384:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005388:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	f043 0307 	orr.w	r3, r3, #7
 8005394:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	609a      	str	r2, [r3, #8]
}
 800539c:	bf00      	nop
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	021a      	lsls	r2, r3, #8
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	609a      	str	r2, [r3, #8]
}
 80053dc:	bf00      	nop
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f003 031f 	and.w	r3, r3, #31
 80053fa:	2201      	movs	r2, #1
 80053fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005400:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6a1a      	ldr	r2, [r3, #32]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	43db      	mvns	r3, r3
 800540a:	401a      	ands	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a1a      	ldr	r2, [r3, #32]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f003 031f 	and.w	r3, r3, #31
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	fa01 f303 	lsl.w	r3, r1, r3
 8005420:	431a      	orrs	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	621a      	str	r2, [r3, #32]
}
 8005426:	bf00      	nop
 8005428:	371c      	adds	r7, #28
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
	...

08005434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005444:	2b01      	cmp	r3, #1
 8005446:	d101      	bne.n	800544c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005448:	2302      	movs	r3, #2
 800544a:	e074      	b.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a34      	ldr	r2, [pc, #208]	@ (8005544 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d009      	beq.n	800548a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a33      	ldr	r2, [pc, #204]	@ (8005548 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d004      	beq.n	800548a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a31      	ldr	r2, [pc, #196]	@ (800554c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d108      	bne.n	800549c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005490:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	4313      	orrs	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80054a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a21      	ldr	r2, [pc, #132]	@ (8005544 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d022      	beq.n	800550a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054cc:	d01d      	beq.n	800550a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005550 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d018      	beq.n	800550a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005554 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d013      	beq.n	800550a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005558 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d00e      	beq.n	800550a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a15      	ldr	r2, [pc, #84]	@ (8005548 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d009      	beq.n	800550a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a18      	ldr	r2, [pc, #96]	@ (800555c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d004      	beq.n	800550a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a11      	ldr	r2, [pc, #68]	@ (800554c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d10c      	bne.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005510:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	4313      	orrs	r3, r2
 800551a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40012c00 	.word	0x40012c00
 8005548:	40013400 	.word	0x40013400
 800554c:	40015000 	.word	0x40015000
 8005550:	40000400 	.word	0x40000400
 8005554:	40000800 	.word	0x40000800
 8005558:	40000c00 	.word	0x40000c00
 800555c:	40014000 	.word	0x40014000

08005560 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005578:	2302      	movs	r3, #2
 800557a:	e078      	b.n	800566e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	4313      	orrs	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	041b      	lsls	r3, r3, #16
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1c      	ldr	r2, [pc, #112]	@ (800567c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d009      	beq.n	8005622 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1b      	ldr	r2, [pc, #108]	@ (8005680 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d004      	beq.n	8005622 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a19      	ldr	r2, [pc, #100]	@ (8005684 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d11c      	bne.n	800565c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562c:	051b      	lsls	r3, r3, #20
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	4313      	orrs	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	4313      	orrs	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40012c00 	.word	0x40012c00
 8005680:	40013400 	.word	0x40013400
 8005684:	40015000 	.word	0x40015000

08005688 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	ed93 7a06 	vldr	s14, [r3, #24]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	edd3 7a07 	vldr	s15, [r3, #28]
 800572a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	edd3 7a08 	vldr	s15, [r3, #32]
 8005734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	edd3 7a06 	vldr	s15, [r3, #24]
 8005744:	eeb1 7a67 	vneg.f32	s14, s15
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	edd3 7a08 	vldr	s15, [r3, #32]
 800574e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1a      	ldr	r2, [r3, #32]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d006      	beq.n	8005778 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	330c      	adds	r3, #12
 800576e:	220c      	movs	r2, #12
 8005770:	2100      	movs	r1, #0
 8005772:	4618      	mov	r0, r3
 8005774:	f000 f804 	bl	8005780 <memset>
  }

}
 8005778:	bf00      	nop
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <memset>:
 8005780:	4402      	add	r2, r0
 8005782:	4603      	mov	r3, r0
 8005784:	4293      	cmp	r3, r2
 8005786:	d100      	bne.n	800578a <memset+0xa>
 8005788:	4770      	bx	lr
 800578a:	f803 1b01 	strb.w	r1, [r3], #1
 800578e:	e7f9      	b.n	8005784 <memset+0x4>

08005790 <__libc_init_array>:
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	4d0d      	ldr	r5, [pc, #52]	@ (80057c8 <__libc_init_array+0x38>)
 8005794:	4c0d      	ldr	r4, [pc, #52]	@ (80057cc <__libc_init_array+0x3c>)
 8005796:	1b64      	subs	r4, r4, r5
 8005798:	10a4      	asrs	r4, r4, #2
 800579a:	2600      	movs	r6, #0
 800579c:	42a6      	cmp	r6, r4
 800579e:	d109      	bne.n	80057b4 <__libc_init_array+0x24>
 80057a0:	4d0b      	ldr	r5, [pc, #44]	@ (80057d0 <__libc_init_array+0x40>)
 80057a2:	4c0c      	ldr	r4, [pc, #48]	@ (80057d4 <__libc_init_array+0x44>)
 80057a4:	f000 f818 	bl	80057d8 <_init>
 80057a8:	1b64      	subs	r4, r4, r5
 80057aa:	10a4      	asrs	r4, r4, #2
 80057ac:	2600      	movs	r6, #0
 80057ae:	42a6      	cmp	r6, r4
 80057b0:	d105      	bne.n	80057be <__libc_init_array+0x2e>
 80057b2:	bd70      	pop	{r4, r5, r6, pc}
 80057b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057b8:	4798      	blx	r3
 80057ba:	3601      	adds	r6, #1
 80057bc:	e7ee      	b.n	800579c <__libc_init_array+0xc>
 80057be:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c2:	4798      	blx	r3
 80057c4:	3601      	adds	r6, #1
 80057c6:	e7f2      	b.n	80057ae <__libc_init_array+0x1e>
 80057c8:	08005800 	.word	0x08005800
 80057cc:	08005800 	.word	0x08005800
 80057d0:	08005800 	.word	0x08005800
 80057d4:	08005804 	.word	0x08005804

080057d8 <_init>:
 80057d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057da:	bf00      	nop
 80057dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057de:	bc08      	pop	{r3}
 80057e0:	469e      	mov	lr, r3
 80057e2:	4770      	bx	lr

080057e4 <_fini>:
 80057e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e6:	bf00      	nop
 80057e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ea:	bc08      	pop	{r3}
 80057ec:	469e      	mov	lr, r3
 80057ee:	4770      	bx	lr
