
RP_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080059a0  080059a0  000069a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b0  080059b0  00007014  2**0
                  CONTENTS
  4 .ARM          00000000  080059b0  080059b0  00007014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059b0  080059b0  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059b0  080059b0  000069b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059b4  080059b4  000069b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080059b8  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000018  080059cc  00007018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  080059cc  0000727c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001193b  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273a  00000000  00000000  0001897f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0001b0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dee  00000000  00000000  0001c2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282dd  00000000  00000000  0001d0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ad8  00000000  00000000  0004539b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e598  00000000  00000000  00058e73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016740b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e54  00000000  00000000  00167450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0016c2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005988 	.word	0x08005988

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	08005988 	.word	0x08005988

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_d2f>:
 8000590:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000594:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000598:	bf24      	itt	cs
 800059a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800059e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80005a2:	d90d      	bls.n	80005c0 <__aeabi_d2f+0x30>
 80005a4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005b0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80005b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005b8:	bf08      	it	eq
 80005ba:	f020 0001 	biceq.w	r0, r0, #1
 80005be:	4770      	bx	lr
 80005c0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80005c4:	d121      	bne.n	800060a <__aeabi_d2f+0x7a>
 80005c6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005ca:	bfbc      	itt	lt
 80005cc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005d0:	4770      	bxlt	lr
 80005d2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005da:	f1c2 0218 	rsb	r2, r2, #24
 80005de:	f1c2 0c20 	rsb	ip, r2, #32
 80005e2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005e6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ea:	bf18      	it	ne
 80005ec:	f040 0001 	orrne.w	r0, r0, #1
 80005f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005f8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005fc:	ea40 000c 	orr.w	r0, r0, ip
 8000600:	fa23 f302 	lsr.w	r3, r3, r2
 8000604:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000608:	e7cc      	b.n	80005a4 <__aeabi_d2f+0x14>
 800060a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800060e:	d107      	bne.n	8000620 <__aeabi_d2f+0x90>
 8000610:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000614:	bf1e      	ittt	ne
 8000616:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800061a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800061e:	4770      	bxne	lr
 8000620:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000624:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000628:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 fedd 	bl	80013f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f85e 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 fb1c 	bl	8000c78 <MX_GPIO_Init>
  MX_DMA_Init();
 8000640:	f000 faf0 	bl	8000c24 <MX_DMA_Init>
  MX_TIM1_Init();
 8000644:	f000 f92c 	bl	80008a0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000648:	f000 fa40 	bl	8000acc <MX_TIM3_Init>
  MX_TIM4_Init();
 800064c:	f000 fa94 	bl	8000b78 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000650:	f000 f89e 	bl	8000790 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000654:	f000 f9ec 	bl	8000a30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Setup PWM Generator
  HAL_TIM_Base_Start(&htim1);
 8000658:	4820      	ldr	r0, [pc, #128]	@ (80006dc <main+0xac>)
 800065a:	f003 fd07 	bl	800406c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800065e:	2100      	movs	r1, #0
 8000660:	481e      	ldr	r0, [pc, #120]	@ (80006dc <main+0xac>)
 8000662:	f003 fe4d 	bl	8004300 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000666:	2104      	movs	r1, #4
 8000668:	481c      	ldr	r0, [pc, #112]	@ (80006dc <main+0xac>)
 800066a:	f003 fe49 	bl	8004300 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800066e:	2108      	movs	r1, #8
 8000670:	481a      	ldr	r0, [pc, #104]	@ (80006dc <main+0xac>)
 8000672:	f003 fe45 	bl	8004300 <HAL_TIM_PWM_Start>

  // Setup Encoder
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000676:	213c      	movs	r1, #60	@ 0x3c
 8000678:	4819      	ldr	r0, [pc, #100]	@ (80006e0 <main+0xb0>)
 800067a:	f003 fff9 	bl	8004670 <HAL_TIM_Encoder_Start>

  // Setup Timer 2 for sensor reading
  HAL_TIM_Base_Start_IT(&htim3);
 800067e:	4818      	ldr	r0, [pc, #96]	@ (80006e0 <main+0xb0>)
 8000680:	f003 fd64 	bl	800414c <HAL_TIM_Base_Start_IT>

  //PID
  PID.Kp = prismatic_Kp;
 8000684:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <main+0xb4>)
 8000686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800068a:	4610      	mov	r0, r2
 800068c:	4619      	mov	r1, r3
 800068e:	f7ff ff7f 	bl	8000590 <__aeabi_d2f>
 8000692:	4603      	mov	r3, r0
 8000694:	4a14      	ldr	r2, [pc, #80]	@ (80006e8 <main+0xb8>)
 8000696:	6193      	str	r3, [r2, #24]
  PID.Ki = prismatic_Ki;
 8000698:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <main+0xbc>)
 800069a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800069e:	4610      	mov	r0, r2
 80006a0:	4619      	mov	r1, r3
 80006a2:	f7ff ff75 	bl	8000590 <__aeabi_d2f>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a0f      	ldr	r2, [pc, #60]	@ (80006e8 <main+0xb8>)
 80006aa:	61d3      	str	r3, [r2, #28]
  PID.Kd = prismatic_Kd;
 80006ac:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <main+0xc0>)
 80006ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006b2:	4610      	mov	r0, r2
 80006b4:	4619      	mov	r1, r3
 80006b6:	f7ff ff6b 	bl	8000590 <__aeabi_d2f>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a0a      	ldr	r2, [pc, #40]	@ (80006e8 <main+0xb8>)
 80006be:	6213      	str	r3, [r2, #32]
  arm_pid_init_f32(&PID, 0);
 80006c0:	2100      	movs	r1, #0
 80006c2:	4809      	ldr	r0, [pc, #36]	@ (80006e8 <main+0xb8>)
 80006c4:	f005 f8fe 	bl	80058c4 <arm_pid_init_f32>

  SetHomePrismatic();
 80006c8:	f000 fb78 	bl	8000dbc <SetHomePrismatic>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PrismaticPIDControl(prismatic_setposition);
 80006cc:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <main+0xc4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fbd3 	bl	8000e7c <PrismaticPIDControl>
  {
 80006d6:	bf00      	nop
 80006d8:	e7f8      	b.n	80006cc <main+0x9c>
 80006da:	bf00      	nop
 80006dc:	20000100 	.word	0x20000100
 80006e0:	20000198 	.word	0x20000198
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000240 	.word	0x20000240
 80006ec:	20000268 	.word	0x20000268
 80006f0:	20000270 	.word	0x20000270
 80006f4:	20000264 	.word	0x20000264

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	@ 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0318 	add.w	r3, r7, #24
 8000702:	2238      	movs	r2, #56	@ 0x38
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f005 f912 	bl	8005930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800071a:	2000      	movs	r0, #0
 800071c:	f002 fc56 	bl	8002fcc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000728:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072a:	2340      	movs	r3, #64	@ 0x40
 800072c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	2302      	movs	r3, #2
 8000730:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000732:	2302      	movs	r3, #2
 8000734:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000736:	2304      	movs	r3, #4
 8000738:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800073a:	2355      	movs	r3, #85	@ 0x55
 800073c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073e:	2302      	movs	r3, #2
 8000740:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000742:	2302      	movs	r3, #2
 8000744:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000746:	2302      	movs	r3, #2
 8000748:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	f107 0318 	add.w	r3, r7, #24
 800074e:	4618      	mov	r0, r3
 8000750:	f002 fcf0 	bl	8003134 <HAL_RCC_OscConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800075a:	f000 fc35 	bl	8000fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	230f      	movs	r3, #15
 8000760:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2303      	movs	r3, #3
 8000764:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2104      	movs	r1, #4
 8000776:	4618      	mov	r0, r3
 8000778:	f002 ffee 	bl	8003758 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000782:	f000 fc21 	bl	8000fc8 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	@ 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	@ 0x30
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2220      	movs	r2, #32
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f005 f8c1 	bl	8005930 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ae:	4b39      	ldr	r3, [pc, #228]	@ (8000894 <MX_ADC1_Init+0x104>)
 80007b0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007b6:	4b37      	ldr	r3, [pc, #220]	@ (8000894 <MX_ADC1_Init+0x104>)
 80007b8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007be:	4b35      	ldr	r3, [pc, #212]	@ (8000894 <MX_ADC1_Init+0x104>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c4:	4b33      	ldr	r3, [pc, #204]	@ (8000894 <MX_ADC1_Init+0x104>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007ca:	4b32      	ldr	r3, [pc, #200]	@ (8000894 <MX_ADC1_Init+0x104>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007d0:	4b30      	ldr	r3, [pc, #192]	@ (8000894 <MX_ADC1_Init+0x104>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <MX_ADC1_Init+0x104>)
 80007d8:	2204      	movs	r2, #4
 80007da:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000894 <MX_ADC1_Init+0x104>)
 80007de:	2200      	movs	r2, #0
 80007e0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000894 <MX_ADC1_Init+0x104>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80007e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <MX_ADC1_Init+0x104>)
 80007ea:	2202      	movs	r2, #2
 80007ec:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ee:	4b29      	ldr	r3, [pc, #164]	@ (8000894 <MX_ADC1_Init+0x104>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f6:	4b27      	ldr	r3, [pc, #156]	@ (8000894 <MX_ADC1_Init+0x104>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fc:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <MX_ADC1_Init+0x104>)
 80007fe:	2200      	movs	r2, #0
 8000800:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000802:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <MX_ADC1_Init+0x104>)
 8000804:	2201      	movs	r2, #1
 8000806:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800080a:	4b22      	ldr	r3, [pc, #136]	@ (8000894 <MX_ADC1_Init+0x104>)
 800080c:	2200      	movs	r2, #0
 800080e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000810:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <MX_ADC1_Init+0x104>)
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000818:	481e      	ldr	r0, [pc, #120]	@ (8000894 <MX_ADC1_Init+0x104>)
 800081a:	f001 f831 	bl	8001880 <HAL_ADC_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000824:	f000 fbd0 	bl	8000fc8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800082c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000830:	4619      	mov	r1, r3
 8000832:	4818      	ldr	r0, [pc, #96]	@ (8000894 <MX_ADC1_Init+0x104>)
 8000834:	f001 fe46 	bl	80024c4 <HAL_ADCEx_MultiModeConfigChannel>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800083e:	f000 fbc3 	bl	8000fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000842:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <MX_ADC1_Init+0x108>)
 8000844:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000846:	2306      	movs	r3, #6
 8000848:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800084a:	2307      	movs	r3, #7
 800084c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800084e:	237f      	movs	r3, #127	@ 0x7f
 8000850:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000852:	2304      	movs	r3, #4
 8000854:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	4619      	mov	r1, r3
 800085e:	480d      	ldr	r0, [pc, #52]	@ (8000894 <MX_ADC1_Init+0x104>)
 8000860:	f001 f9ca 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800086a:	f000 fbad 	bl	8000fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_ADC1_Init+0x10c>)
 8000870:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000872:	230c      	movs	r3, #12
 8000874:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	@ (8000894 <MX_ADC1_Init+0x104>)
 800087c:	f001 f9bc 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000886:	f000 fb9f 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	3730      	adds	r7, #48	@ 0x30
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000034 	.word	0x20000034
 8000898:	1d500080 	.word	0x1d500080
 800089c:	21800100 	.word	0x21800100

080008a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b09c      	sub	sp, #112	@ 0x70
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
 80008d0:	615a      	str	r2, [r3, #20]
 80008d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2234      	movs	r2, #52	@ 0x34
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f005 f828 	bl	8005930 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008e0:	4b51      	ldr	r3, [pc, #324]	@ (8000a28 <MX_TIM1_Init+0x188>)
 80008e2:	4a52      	ldr	r2, [pc, #328]	@ (8000a2c <MX_TIM1_Init+0x18c>)
 80008e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 80008e6:	4b50      	ldr	r3, [pc, #320]	@ (8000a28 <MX_TIM1_Init+0x188>)
 80008e8:	22a9      	movs	r2, #169	@ 0xa9
 80008ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ec:	4b4e      	ldr	r3, [pc, #312]	@ (8000a28 <MX_TIM1_Init+0x188>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80008f2:	4b4d      	ldr	r3, [pc, #308]	@ (8000a28 <MX_TIM1_Init+0x188>)
 80008f4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80008f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fa:	4b4b      	ldr	r3, [pc, #300]	@ (8000a28 <MX_TIM1_Init+0x188>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000900:	4b49      	ldr	r3, [pc, #292]	@ (8000a28 <MX_TIM1_Init+0x188>)
 8000902:	2200      	movs	r2, #0
 8000904:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000906:	4b48      	ldr	r3, [pc, #288]	@ (8000a28 <MX_TIM1_Init+0x188>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800090c:	4846      	ldr	r0, [pc, #280]	@ (8000a28 <MX_TIM1_Init+0x188>)
 800090e:	f003 fb55 	bl	8003fbc <HAL_TIM_Base_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000918:	f000 fb56 	bl	8000fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000920:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000922:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000926:	4619      	mov	r1, r3
 8000928:	483f      	ldr	r0, [pc, #252]	@ (8000a28 <MX_TIM1_Init+0x188>)
 800092a:	f004 f8eb 	bl	8004b04 <HAL_TIM_ConfigClockSource>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000934:	f000 fb48 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000938:	483b      	ldr	r0, [pc, #236]	@ (8000a28 <MX_TIM1_Init+0x188>)
 800093a:	f003 fc7f 	bl	800423c <HAL_TIM_PWM_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000944:	f000 fb40 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000948:	2300      	movs	r3, #0
 800094a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800094c:	2300      	movs	r3, #0
 800094e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000954:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000958:	4619      	mov	r1, r3
 800095a:	4833      	ldr	r0, [pc, #204]	@ (8000a28 <MX_TIM1_Init+0x188>)
 800095c:	f004 fe88 	bl	8005670 <HAL_TIMEx_MasterConfigSynchronization>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000966:	f000 fb2f 	bl	8000fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800096a:	2360      	movs	r3, #96	@ 0x60
 800096c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000972:	2300      	movs	r3, #0
 8000974:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000976:	2300      	movs	r3, #0
 8000978:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800097e:	2300      	movs	r3, #0
 8000980:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000986:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800098a:	2200      	movs	r2, #0
 800098c:	4619      	mov	r1, r3
 800098e:	4826      	ldr	r0, [pc, #152]	@ (8000a28 <MX_TIM1_Init+0x188>)
 8000990:	f003 ffa4 	bl	80048dc <HAL_TIM_PWM_ConfigChannel>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800099a:	f000 fb15 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800099e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009a2:	2204      	movs	r2, #4
 80009a4:	4619      	mov	r1, r3
 80009a6:	4820      	ldr	r0, [pc, #128]	@ (8000a28 <MX_TIM1_Init+0x188>)
 80009a8:	f003 ff98 	bl	80048dc <HAL_TIM_PWM_ConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80009b2:	f000 fb09 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009ba:	2208      	movs	r2, #8
 80009bc:	4619      	mov	r1, r3
 80009be:	481a      	ldr	r0, [pc, #104]	@ (8000a28 <MX_TIM1_Init+0x188>)
 80009c0:	f003 ff8c 	bl	80048dc <HAL_TIM_PWM_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80009ca:	f000 fafd 	bl	8000fc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4807      	ldr	r0, [pc, #28]	@ (8000a28 <MX_TIM1_Init+0x188>)
 8000a0c:	f004 fec6 	bl	800579c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000a16:	f000 fad7 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a1a:	4803      	ldr	r0, [pc, #12]	@ (8000a28 <MX_TIM1_Init+0x188>)
 8000a1c:	f000 fc28 	bl	8001270 <HAL_TIM_MspPostInit>

}
 8000a20:	bf00      	nop
 8000a22:	3770      	adds	r7, #112	@ 0x70
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000100 	.word	0x20000100
 8000a2c:	40012c00 	.word	0x40012c00

08000a30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac8 <MX_TIM2_Init+0x98>)
 8000a50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17000;
 8000a56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac8 <MX_TIM2_Init+0x98>)
 8000a58:	f244 2268 	movw	r2, #17000	@ 0x4268
 8000a5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <MX_TIM2_Init+0x98>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24999;
 8000a64:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <MX_TIM2_Init+0x98>)
 8000a66:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8000a6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <MX_TIM2_Init+0x98>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <MX_TIM2_Init+0x98>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a78:	4813      	ldr	r0, [pc, #76]	@ (8000ac8 <MX_TIM2_Init+0x98>)
 8000a7a:	f003 fa9f 	bl	8003fbc <HAL_TIM_Base_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a84:	f000 faa0 	bl	8000fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	4619      	mov	r1, r3
 8000a94:	480c      	ldr	r0, [pc, #48]	@ (8000ac8 <MX_TIM2_Init+0x98>)
 8000a96:	f004 f835 	bl	8004b04 <HAL_TIM_ConfigClockSource>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000aa0:	f000 fa92 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <MX_TIM2_Init+0x98>)
 8000ab2:	f004 fddd 	bl	8005670 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000abc:	f000 fa84 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	3720      	adds	r7, #32
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000014c 	.word	0x2000014c

08000acc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	@ 0x30
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	2224      	movs	r2, #36	@ 0x24
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f004 ff28 	bl	8005930 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000aea:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <MX_TIM3_Init+0xa4>)
 8000aec:	4a21      	ldr	r2, [pc, #132]	@ (8000b74 <MX_TIM3_Init+0xa8>)
 8000aee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000af0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <MX_TIM3_Init+0xa4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b70 <MX_TIM3_Init+0xa4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2048;
 8000afc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <MX_TIM3_Init+0xa4>)
 8000afe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b04:	4b1a      	ldr	r3, [pc, #104]	@ (8000b70 <MX_TIM3_Init+0xa4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0a:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <MX_TIM3_Init+0xa4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b10:	2303      	movs	r3, #3
 8000b12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <MX_TIM3_Init+0xa4>)
 8000b3c:	f003 fcf2 	bl	8004524 <HAL_TIM_Encoder_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b46:	f000 fa3f 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b52:	463b      	mov	r3, r7
 8000b54:	4619      	mov	r1, r3
 8000b56:	4806      	ldr	r0, [pc, #24]	@ (8000b70 <MX_TIM3_Init+0xa4>)
 8000b58:	f004 fd8a 	bl	8005670 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b62:	f000 fa31 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	3730      	adds	r7, #48	@ 0x30
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000198 	.word	0x20000198
 8000b74:	40000400 	.word	0x40000400

08000b78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08c      	sub	sp, #48	@ 0x30
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	2224      	movs	r2, #36	@ 0x24
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f004 fed2 	bl	8005930 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b96:	4b21      	ldr	r3, [pc, #132]	@ (8000c1c <MX_TIM4_Init+0xa4>)
 8000b98:	4a21      	ldr	r2, [pc, #132]	@ (8000c20 <MX_TIM4_Init+0xa8>)
 8000b9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <MX_TIM4_Init+0xa4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c1c <MX_TIM4_Init+0xa4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <MX_TIM4_Init+0xa4>)
 8000baa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <MX_TIM4_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <MX_TIM4_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	4619      	mov	r1, r3
 8000be6:	480d      	ldr	r0, [pc, #52]	@ (8000c1c <MX_TIM4_Init+0xa4>)
 8000be8:	f003 fc9c 	bl	8004524 <HAL_TIM_Encoder_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000bf2:	f000 f9e9 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bfe:	463b      	mov	r3, r7
 8000c00:	4619      	mov	r1, r3
 8000c02:	4806      	ldr	r0, [pc, #24]	@ (8000c1c <MX_TIM4_Init+0xa4>)
 8000c04:	f004 fd34 	bl	8005670 <HAL_TIMEx_MasterConfigSynchronization>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000c0e:	f000 f9db 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	3730      	adds	r7, #48	@ 0x30
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200001e4 	.word	0x200001e4
 8000c20:	40000800 	.word	0x40000800

08000c24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c2a:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <MX_DMA_Init+0x50>)
 8000c2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c2e:	4a11      	ldr	r2, [pc, #68]	@ (8000c74 <MX_DMA_Init+0x50>)
 8000c30:	f043 0304 	orr.w	r3, r3, #4
 8000c34:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c36:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <MX_DMA_Init+0x50>)
 8000c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c42:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <MX_DMA_Init+0x50>)
 8000c44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c46:	4a0b      	ldr	r2, [pc, #44]	@ (8000c74 <MX_DMA_Init+0x50>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c4e:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <MX_DMA_Init+0x50>)
 8000c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	200b      	movs	r0, #11
 8000c60:	f001 fe13 	bl	800288a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c64:	200b      	movs	r0, #11
 8000c66:	f001 fe2a 	bl	80028be <HAL_NVIC_EnableIRQ>

}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	@ 0x28
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4b48      	ldr	r3, [pc, #288]	@ (8000db0 <MX_GPIO_Init+0x138>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c92:	4a47      	ldr	r2, [pc, #284]	@ (8000db0 <MX_GPIO_Init+0x138>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c9a:	4b45      	ldr	r3, [pc, #276]	@ (8000db0 <MX_GPIO_Init+0x138>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca6:	4b42      	ldr	r3, [pc, #264]	@ (8000db0 <MX_GPIO_Init+0x138>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000caa:	4a41      	ldr	r2, [pc, #260]	@ (8000db0 <MX_GPIO_Init+0x138>)
 8000cac:	f043 0320 	orr.w	r3, r3, #32
 8000cb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8000db0 <MX_GPIO_Init+0x138>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb6:	f003 0320 	and.w	r3, r3, #32
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b3c      	ldr	r3, [pc, #240]	@ (8000db0 <MX_GPIO_Init+0x138>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc2:	4a3b      	ldr	r2, [pc, #236]	@ (8000db0 <MX_GPIO_Init+0x138>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cca:	4b39      	ldr	r3, [pc, #228]	@ (8000db0 <MX_GPIO_Init+0x138>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4b36      	ldr	r3, [pc, #216]	@ (8000db0 <MX_GPIO_Init+0x138>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	4a35      	ldr	r2, [pc, #212]	@ (8000db0 <MX_GPIO_Init+0x138>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce2:	4b33      	ldr	r3, [pc, #204]	@ (8000db0 <MX_GPIO_Init+0x138>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2120      	movs	r1, #32
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf6:	f002 f939 	bl	8002f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR_Driver_1_Pin|Dir_Driver_2_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	21c0      	movs	r1, #192	@ 0xc0
 8000cfe:	482d      	ldr	r0, [pc, #180]	@ (8000db4 <MX_GPIO_Init+0x13c>)
 8000d00:	f002 f934 	bl	8002f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EMERGENCY_Pin JOY_BUTTON_Pin QEI_1_X_Pin */
  GPIO_InitStruct.Pin = EMERGENCY_Pin|JOY_BUTTON_Pin|QEI_1_X_Pin;
 8000d04:	2319      	movs	r3, #25
 8000d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d08:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4826      	ldr	r0, [pc, #152]	@ (8000db4 <MX_GPIO_Init+0x13c>)
 8000d1a:	f001 ffa5 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000d1e:	230c      	movs	r3, #12
 8000d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d2e:	230c      	movs	r3, #12
 8000d30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3c:	f001 ff94 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d40:	2320      	movs	r3, #32
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d5a:	f001 ff85 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prismatic_right_limit_Pin Prismatic_left_limit_Pin step_one_plotter_Pin step_two_plotter_Pin */
  GPIO_InitStruct.Pin = Prismatic_right_limit_Pin|Prismatic_left_limit_Pin|step_one_plotter_Pin|step_two_plotter_Pin;
 8000d5e:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d64:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	4810      	ldr	r0, [pc, #64]	@ (8000db8 <MX_GPIO_Init+0x140>)
 8000d76:	f001 ff77 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Driver_1_Pin Dir_Driver_2_Pin */
  GPIO_InitStruct.Pin = DIR_Driver_1_Pin|Dir_Driver_2_Pin;
 8000d7a:	23c0      	movs	r3, #192	@ 0xc0
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4808      	ldr	r0, [pc, #32]	@ (8000db4 <MX_GPIO_Init+0x13c>)
 8000d92:	f001 ff69 	bl	8002c68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2028      	movs	r0, #40	@ 0x28
 8000d9c:	f001 fd75 	bl	800288a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000da0:	2028      	movs	r0, #40	@ 0x28
 8000da2:	f001 fd8c 	bl	80028be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	@ 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000
 8000db4:	48000800 	.word	0x48000800
 8000db8:	48000400 	.word	0x48000400

08000dbc <SetHomePrismatic>:

/* USER CODE BEGIN 4 */

// Set Prismatic to home
void SetHomePrismatic()
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	while (prismatic_left_sw == false)
 8000dc0:	e003      	b.n	8000dca <SetHomePrismatic+0xe>
	{
		PrismaticMotorControl(10, 0);
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	200a      	movs	r0, #10
 8000dc6:	f000 f82b 	bl	8000e20 <PrismaticMotorControl>
	while (prismatic_left_sw == false)
 8000dca:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <SetHomePrismatic+0x50>)
 8000dcc:	f993 3000 	ldrsb.w	r3, [r3]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0f6      	beq.n	8000dc2 <SetHomePrismatic+0x6>
	}
	PrismaticMotorControl(0, 0);
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f000 f822 	bl	8000e20 <PrismaticMotorControl>

	//reset encoder val
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8000ddc:	213c      	movs	r1, #60	@ 0x3c
 8000dde:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <SetHomePrismatic+0x54>)
 8000de0:	f003 fcd4 	bl	800478c <HAL_TIM_Encoder_Stop>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000de4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <SetHomePrismatic+0x54>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2200      	movs	r2, #0
 8000dea:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_raw_encoder_val = 0;
 8000dec:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <SetHomePrismatic+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
	prismatic_raw_encoder_prev = 0;
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <SetHomePrismatic+0x5c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
	prismatic_encoder_val = 0;
 8000df8:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <SetHomePrismatic+0x60>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000dfe:	213c      	movs	r1, #60	@ 0x3c
 8000e00:	4803      	ldr	r0, [pc, #12]	@ (8000e10 <SetHomePrismatic+0x54>)
 8000e02:	f003 fc35 	bl	8004670 <HAL_TIM_Encoder_Start>
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000230 	.word	0x20000230
 8000e10:	20000198 	.word	0x20000198
 8000e14:	20000234 	.word	0x20000234
 8000e18:	20000238 	.word	0x20000238
 8000e1c:	2000023c 	.word	0x2000023c

08000e20 <PrismaticMotorControl>:

void PrismaticMotorControl(int speed, int dir)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af02      	add	r7, sp, #8
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	// Saturation
	speed = (speed > 100) ? 100 : speed;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b64      	cmp	r3, #100	@ 0x64
 8000e2e:	bfa8      	it	ge
 8000e30:	2364      	movge	r3, #100	@ 0x64
 8000e32:	607b      	str	r3, [r7, #4]

	if (dir == 0)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d105      	bne.n	8000e46 <PrismaticMotorControl+0x26>
	{
		// Set motor2 direction to ___
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2180      	movs	r1, #128	@ 0x80
 8000e3e:	480d      	ldr	r0, [pc, #52]	@ (8000e74 <PrismaticMotorControl+0x54>)
 8000e40:	f002 f894 	bl	8002f6c <HAL_GPIO_WritePin>
 8000e44:	e004      	b.n	8000e50 <PrismaticMotorControl+0x30>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2180      	movs	r1, #128	@ 0x80
 8000e4a:	480a      	ldr	r0, [pc, #40]	@ (8000e74 <PrismaticMotorControl+0x54>)
 8000e4c:	f002 f88e 	bl	8002f6c <HAL_GPIO_WritePin>
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, map(speed,0,100,0,19999));
 8000e50:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2300      	movs	r3, #0
 8000e58:	2264      	movs	r2, #100	@ 0x64
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f000 f879 	bl	8000f54 <map>
 8000e62:	4602      	mov	r2, r0
 8000e64:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <PrismaticMotorControl+0x58>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	48000800 	.word	0x48000800
 8000e78:	20000100 	.word	0x20000100

08000e7c <PrismaticPIDControl>:

void PrismaticPIDControl(double set_point)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	@ 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	ed87 0b00 	vstr	d0, [r7]
	double position = (prismatic_encoder_val * 16)/2048;
 8000e86:	4b31      	ldr	r3, [pc, #196]	@ (8000f4c <PrismaticPIDControl+0xd0>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	da00      	bge.n	8000e90 <PrismaticPIDControl+0x14>
 8000e8e:	337f      	adds	r3, #127	@ 0x7f
 8000e90:	11db      	asrs	r3, r3, #7
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fb12 	bl	80004bc <__aeabi_i2d>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int speed = arm_pid_f32(&PID, set_point  - position);
 8000ea0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ea4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ea8:	f7ff f9ba 	bl	8000220 <__aeabi_dsub>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f7ff fb6c 	bl	8000590 <__aeabi_d2f>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4a25      	ldr	r2, [pc, #148]	@ (8000f50 <PrismaticPIDControl+0xd4>)
 8000ebc:	617a      	str	r2, [r7, #20]
 8000ebe:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	ed93 7a00 	vldr	s14, [r3]
 8000ec6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eca:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	edd3 6a01 	vldr	s13, [r3, #4]
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000ede:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	edd3 6a02 	vldr	s13, [r3, #8]
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	edd3 7a04 	vldr	s15, [r3, #16]
 8000eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ef2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f00:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	68da      	ldr	r2, [r3, #12]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000f18:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f20:	ee17 3a90 	vmov	r3, s15
 8000f24:	61fb      	str	r3, [r7, #28]
	int dir = (speed > 0) ? 1:0;
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	bfcc      	ite	gt
 8000f2c:	2301      	movgt	r3, #1
 8000f2e:	2300      	movle	r3, #0
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	61bb      	str	r3, [r7, #24]
	PrismaticMotorControl(abs(speed), dir);
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	bfb8      	it	lt
 8000f3a:	425b      	neglt	r3, r3
 8000f3c:	69b9      	ldr	r1, [r7, #24]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff6e 	bl	8000e20 <PrismaticMotorControl>
}
 8000f44:	bf00      	nop
 8000f46:	3728      	adds	r7, #40	@ 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000023c 	.word	0x2000023c
 8000f50:	20000240 	.word	0x20000240

08000f54 <map>:

int map(int x, int in_min, int in_max, int out_min, int out_max)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	603b      	str	r3, [r7, #0]
      return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	69b9      	ldr	r1, [r7, #24]
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	1a8a      	subs	r2, r1, r2
 8000f6e:	fb03 f202 	mul.w	r2, r3, r2
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	1acb      	subs	r3, r1, r3
 8000f78:	fb92 f2f3 	sdiv	r2, r2, r3
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	4413      	add	r3, r2
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <HAL_GPIO_EXTI_Callback>:


// External Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12)
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f9c:	d103      	bne.n	8000fa6 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		prismatic_left_sw = 1;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <HAL_GPIO_EXTI_Callback+0x34>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
	}
	else if (GPIO_Pin == GPIO_PIN_11)
	{
		prismatic_right_sw = 1;
	}
}
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_EXTI_Callback+0x28>
	else if (GPIO_Pin == GPIO_PIN_11)
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000fac:	d102      	bne.n	8000fb4 <HAL_GPIO_EXTI_Callback+0x28>
		prismatic_right_sw = 1;
 8000fae:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	701a      	strb	r2, [r3, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	20000230 	.word	0x20000230
 8000fc4:	20000231 	.word	0x20000231

08000fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fcc:	b672      	cpsid	i
}
 8000fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <Error_Handler+0x8>

08000fd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <HAL_MspInit+0x44>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fde:	4a0e      	ldr	r2, [pc, #56]	@ (8001018 <HAL_MspInit+0x44>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <HAL_MspInit+0x44>)
 8000fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <HAL_MspInit+0x44>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff6:	4a08      	ldr	r2, [pc, #32]	@ (8001018 <HAL_MspInit+0x44>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ffc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ffe:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <HAL_MspInit+0x44>)
 8001000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800100a:	f002 f883 	bl	8003114 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000

0800101c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b09e      	sub	sp, #120	@ 0x78
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	2254      	movs	r2, #84	@ 0x54
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f004 fc77 	bl	8005930 <memset>
  if(hadc->Instance==ADC1)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800104a:	d15e      	bne.n	800110a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800104c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001050:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001052:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001056:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4618      	mov	r0, r3
 800105e:	f002 fd5f 	bl	8003b20 <HAL_RCCEx_PeriphCLKConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001068:	f7ff ffae 	bl	8000fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800106c:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <HAL_ADC_MspInit+0xf8>)
 800106e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001070:	4a28      	ldr	r2, [pc, #160]	@ (8001114 <HAL_ADC_MspInit+0xf8>)
 8001072:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001076:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001078:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <HAL_ADC_MspInit+0xf8>)
 800107a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001084:	4b23      	ldr	r3, [pc, #140]	@ (8001114 <HAL_ADC_MspInit+0xf8>)
 8001086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001088:	4a22      	ldr	r2, [pc, #136]	@ (8001114 <HAL_ADC_MspInit+0xf8>)
 800108a:	f043 0304 	orr.w	r3, r3, #4
 800108e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001090:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <HAL_ADC_MspInit+0xf8>)
 8001092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = JOY_X_AXIS_Pin|JOY_Y_AXIS_Pin;
 800109c:	2306      	movs	r3, #6
 800109e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a0:	2303      	movs	r3, #3
 80010a2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010ac:	4619      	mov	r1, r3
 80010ae:	481a      	ldr	r0, [pc, #104]	@ (8001118 <HAL_ADC_MspInit+0xfc>)
 80010b0:	f001 fdda 	bl	8002c68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <HAL_ADC_MspInit+0x100>)
 80010b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001120 <HAL_ADC_MspInit+0x104>)
 80010b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80010ba:	4b18      	ldr	r3, [pc, #96]	@ (800111c <HAL_ADC_MspInit+0x100>)
 80010bc:	2205      	movs	r2, #5
 80010be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010c0:	4b16      	ldr	r3, [pc, #88]	@ (800111c <HAL_ADC_MspInit+0x100>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <HAL_ADC_MspInit+0x100>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010cc:	4b13      	ldr	r3, [pc, #76]	@ (800111c <HAL_ADC_MspInit+0x100>)
 80010ce:	2280      	movs	r2, #128	@ 0x80
 80010d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010d2:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_ADC_MspInit+0x100>)
 80010d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010da:	4b10      	ldr	r3, [pc, #64]	@ (800111c <HAL_ADC_MspInit+0x100>)
 80010dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <HAL_ADC_MspInit+0x100>)
 80010e4:	2220      	movs	r2, #32
 80010e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <HAL_ADC_MspInit+0x100>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010ee:	480b      	ldr	r0, [pc, #44]	@ (800111c <HAL_ADC_MspInit+0x100>)
 80010f0:	f001 fc00 	bl	80028f4 <HAL_DMA_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 80010fa:	f7ff ff65 	bl	8000fc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a06      	ldr	r2, [pc, #24]	@ (800111c <HAL_ADC_MspInit+0x100>)
 8001102:	655a      	str	r2, [r3, #84]	@ 0x54
 8001104:	4a05      	ldr	r2, [pc, #20]	@ (800111c <HAL_ADC_MspInit+0x100>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800110a:	bf00      	nop
 800110c:	3778      	adds	r7, #120	@ 0x78
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	48000800 	.word	0x48000800
 800111c:	200000a0 	.word	0x200000a0
 8001120:	40020008 	.word	0x40020008

08001124 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a13      	ldr	r2, [pc, #76]	@ (8001180 <HAL_TIM_Base_MspInit+0x5c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d10c      	bne.n	8001150 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001136:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <HAL_TIM_Base_MspInit+0x60>)
 8001138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800113a:	4a12      	ldr	r2, [pc, #72]	@ (8001184 <HAL_TIM_Base_MspInit+0x60>)
 800113c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001140:	6613      	str	r3, [r2, #96]	@ 0x60
 8001142:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <HAL_TIM_Base_MspInit+0x60>)
 8001144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001146:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800114e:	e010      	b.n	8001172 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001158:	d10b      	bne.n	8001172 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800115a:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <HAL_TIM_Base_MspInit+0x60>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115e:	4a09      	ldr	r2, [pc, #36]	@ (8001184 <HAL_TIM_Base_MspInit+0x60>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6593      	str	r3, [r2, #88]	@ 0x58
 8001166:	4b07      	ldr	r3, [pc, #28]	@ (8001184 <HAL_TIM_Base_MspInit+0x60>)
 8001168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
}
 8001172:	bf00      	nop
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40012c00 	.word	0x40012c00
 8001184:	40021000 	.word	0x40021000

08001188 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	@ 0x30
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a2e      	ldr	r2, [pc, #184]	@ (8001260 <HAL_TIM_Encoder_MspInit+0xd8>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d129      	bne.n	80011fe <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001264 <HAL_TIM_Encoder_MspInit+0xdc>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ae:	4a2d      	ldr	r2, [pc, #180]	@ (8001264 <HAL_TIM_Encoder_MspInit+0xdc>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001264 <HAL_TIM_Encoder_MspInit+0xdc>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	61bb      	str	r3, [r7, #24]
 80011c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b28      	ldr	r3, [pc, #160]	@ (8001264 <HAL_TIM_Encoder_MspInit+0xdc>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a27      	ldr	r2, [pc, #156]	@ (8001264 <HAL_TIM_Encoder_MspInit+0xdc>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b25      	ldr	r3, [pc, #148]	@ (8001264 <HAL_TIM_Encoder_MspInit+0xdc>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = QEI_1_A_Pin|QEI_1_B_Pin;
 80011da:	23c0      	movs	r3, #192	@ 0xc0
 80011dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011ea:	2302      	movs	r3, #2
 80011ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f8:	f001 fd36 	bl	8002c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011fc:	e02c      	b.n	8001258 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a19      	ldr	r2, [pc, #100]	@ (8001268 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d127      	bne.n	8001258 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001208:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <HAL_TIM_Encoder_MspInit+0xdc>)
 800120a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800120c:	4a15      	ldr	r2, [pc, #84]	@ (8001264 <HAL_TIM_Encoder_MspInit+0xdc>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	6593      	str	r3, [r2, #88]	@ 0x58
 8001214:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001220:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001224:	4a0f      	ldr	r2, [pc, #60]	@ (8001264 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001226:	f043 0302 	orr.w	r3, r3, #2
 800122a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122c:	4b0d      	ldr	r3, [pc, #52]	@ (8001264 <HAL_TIM_Encoder_MspInit+0xdc>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = QEI_2_A_Pin|QEI_2_B_Pin;
 8001238:	23c0      	movs	r3, #192	@ 0xc0
 800123a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001248:	2302      	movs	r3, #2
 800124a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	@ (800126c <HAL_TIM_Encoder_MspInit+0xe4>)
 8001254:	f001 fd08 	bl	8002c68 <HAL_GPIO_Init>
}
 8001258:	bf00      	nop
 800125a:	3730      	adds	r7, #48	@ 0x30
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40000400 	.word	0x40000400
 8001264:	40021000 	.word	0x40021000
 8001268:	40000800 	.word	0x40000800
 800126c:	48000400 	.word	0x48000400

08001270 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a12      	ldr	r2, [pc, #72]	@ (80012d8 <HAL_TIM_MspPostInit+0x68>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d11d      	bne.n	80012ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <HAL_TIM_MspPostInit+0x6c>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	4a11      	ldr	r2, [pc, #68]	@ (80012dc <HAL_TIM_MspPostInit+0x6c>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129e:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <HAL_TIM_MspPostInit+0x6c>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Servo_PWM_Pin|Motor_1_PWM_Pin|Motor_2_PWM_Pin;
 80012aa:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80012ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012bc:	2306      	movs	r3, #6
 80012be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4619      	mov	r1, r3
 80012c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ca:	f001 fccd 	bl	8002c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012ce:	bf00      	nop
 80012d0:	3720      	adds	r7, #32
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40012c00 	.word	0x40012c00
 80012dc:	40021000 	.word	0x40021000

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <NMI_Handler+0x4>

080012e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <HardFault_Handler+0x4>

080012f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <MemManage_Handler+0x4>

080012f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <UsageFault_Handler+0x4>

08001308 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001336:	f000 f8af 	bl	8001498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <DMA1_Channel1_IRQHandler+0x10>)
 8001346:	f001 fb7d 	bl	8002a44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200000a0 	.word	0x200000a0

08001354 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Prismatic_right_limit_Pin);
 8001358:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800135c:	f001 fe1e 	bl	8002f9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Prismatic_left_limit_Pin);
 8001360:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001364:	f001 fe1a 	bl	8002f9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(step_one_plotter_Pin);
 8001368:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800136c:	f001 fe16 	bl	8002f9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(step_two_plotter_Pin);
 8001370:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001374:	f001 fe12 	bl	8002f9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001380:	4b06      	ldr	r3, [pc, #24]	@ (800139c <SystemInit+0x20>)
 8001382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001386:	4a05      	ldr	r2, [pc, #20]	@ (800139c <SystemInit+0x20>)
 8001388:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800138c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013a0:	480d      	ldr	r0, [pc, #52]	@ (80013d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a4:	f7ff ffea 	bl	800137c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a8:	480c      	ldr	r0, [pc, #48]	@ (80013dc <LoopForever+0x6>)
  ldr r1, =_edata
 80013aa:	490d      	ldr	r1, [pc, #52]	@ (80013e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013ac:	4a0d      	ldr	r2, [pc, #52]	@ (80013e4 <LoopForever+0xe>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013b0:	e002      	b.n	80013b8 <LoopCopyDataInit>

080013b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b6:	3304      	adds	r3, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013bc:	d3f9      	bcc.n	80013b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c0:	4c0a      	ldr	r4, [pc, #40]	@ (80013ec <LoopForever+0x16>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c4:	e001      	b.n	80013ca <LoopFillZerobss>

080013c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c8:	3204      	adds	r2, #4

080013ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013cc:	d3fb      	bcc.n	80013c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ce:	f004 fab7 	bl	8005940 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013d2:	f7ff f92d 	bl	8000630 <main>

080013d6 <LoopForever>:

LoopForever:
    b LoopForever
 80013d6:	e7fe      	b.n	80013d6 <LoopForever>
  ldr   r0, =_estack
 80013d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80013e4:	080059b8 	.word	0x080059b8
  ldr r2, =_sbss
 80013e8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80013ec:	2000027c 	.word	0x2000027c

080013f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013f0:	e7fe      	b.n	80013f0 <ADC1_2_IRQHandler>

080013f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fc:	2003      	movs	r0, #3
 80013fe:	f001 fa39 	bl	8002874 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001402:	2000      	movs	r0, #0
 8001404:	f000 f80e 	bl	8001424 <HAL_InitTick>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	71fb      	strb	r3, [r7, #7]
 8001412:	e001      	b.n	8001418 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001414:	f7ff fdde 	bl	8000fd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001418:	79fb      	ldrb	r3, [r7, #7]

}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001430:	4b16      	ldr	r3, [pc, #88]	@ (800148c <HAL_InitTick+0x68>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d022      	beq.n	800147e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001438:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <HAL_InitTick+0x6c>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b13      	ldr	r3, [pc, #76]	@ (800148c <HAL_InitTick+0x68>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001444:	fbb1 f3f3 	udiv	r3, r1, r3
 8001448:	fbb2 f3f3 	udiv	r3, r2, r3
 800144c:	4618      	mov	r0, r3
 800144e:	f001 fa44 	bl	80028da <HAL_SYSTICK_Config>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10f      	bne.n	8001478 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b0f      	cmp	r3, #15
 800145c:	d809      	bhi.n	8001472 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800145e:	2200      	movs	r2, #0
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	f04f 30ff 	mov.w	r0, #4294967295
 8001466:	f001 fa10 	bl	800288a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800146a:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <HAL_InitTick+0x70>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	e007      	b.n	8001482 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	73fb      	strb	r3, [r7, #15]
 8001476:	e004      	b.n	8001482 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	73fb      	strb	r3, [r7, #15]
 800147c:	e001      	b.n	8001482 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001482:	7bfb      	ldrb	r3, [r7, #15]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000010 	.word	0x20000010
 8001490:	20000008 	.word	0x20000008
 8001494:	2000000c 	.word	0x2000000c

08001498 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <HAL_IncTick+0x1c>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <HAL_IncTick+0x20>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4413      	add	r3, r2
 80014a6:	4a03      	ldr	r2, [pc, #12]	@ (80014b4 <HAL_IncTick+0x1c>)
 80014a8:	6013      	str	r3, [r2, #0]
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	20000278 	.word	0x20000278
 80014b8:	20000010 	.word	0x20000010

080014bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b03      	ldr	r3, [pc, #12]	@ (80014d0 <HAL_GetTick+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000278 	.word	0x20000278

080014d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	609a      	str	r2, [r3, #8]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800153c:	b480      	push	{r7}
 800153e:	b087      	sub	sp, #28
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3360      	adds	r3, #96	@ 0x60
 800154e:	461a      	mov	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <LL_ADC_SetOffset+0x44>)
 800155e:	4013      	ands	r3, r2
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	4313      	orrs	r3, r2
 800156c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001574:	bf00      	nop
 8001576:	371c      	adds	r7, #28
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	03fff000 	.word	0x03fff000

08001584 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3360      	adds	r3, #96	@ 0x60
 8001592:	461a      	mov	r2, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	3360      	adds	r3, #96	@ 0x60
 80015c0:	461a      	mov	r2, r3
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	431a      	orrs	r2, r3
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015da:	bf00      	nop
 80015dc:	371c      	adds	r7, #28
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b087      	sub	sp, #28
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3360      	adds	r3, #96	@ 0x60
 80015f6:	461a      	mov	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	431a      	orrs	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001610:	bf00      	nop
 8001612:	371c      	adds	r7, #28
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3360      	adds	r3, #96	@ 0x60
 800162c:	461a      	mov	r2, r3
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	431a      	orrs	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001646:	bf00      	nop
 8001648:	371c      	adds	r7, #28
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	615a      	str	r2, [r3, #20]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001678:	b480      	push	{r7}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	3330      	adds	r3, #48	@ 0x30
 8001688:	461a      	mov	r2, r3
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	f003 030c 	and.w	r3, r3, #12
 8001694:	4413      	add	r3, r2
 8001696:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	211f      	movs	r1, #31
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	401a      	ands	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	0e9b      	lsrs	r3, r3, #26
 80016b0:	f003 011f 	and.w	r1, r3, #31
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	f003 031f 	and.w	r3, r3, #31
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	431a      	orrs	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016c4:	bf00      	nop
 80016c6:	371c      	adds	r7, #28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3314      	adds	r3, #20
 80016e0:	461a      	mov	r2, r3
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	0e5b      	lsrs	r3, r3, #25
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	4413      	add	r3, r2
 80016ee:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	0d1b      	lsrs	r3, r3, #20
 80016f8:	f003 031f 	and.w	r3, r3, #31
 80016fc:	2107      	movs	r1, #7
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	401a      	ands	r2, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	0d1b      	lsrs	r3, r3, #20
 800170a:	f003 031f 	and.w	r3, r3, #31
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	fa01 f303 	lsl.w	r3, r1, r3
 8001714:	431a      	orrs	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800171a:	bf00      	nop
 800171c:	371c      	adds	r7, #28
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001740:	43db      	mvns	r3, r3
 8001742:	401a      	ands	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0318 	and.w	r3, r3, #24
 800174a:	4908      	ldr	r1, [pc, #32]	@ (800176c <LL_ADC_SetChannelSingleDiff+0x44>)
 800174c:	40d9      	lsrs	r1, r3
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	400b      	ands	r3, r1
 8001752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001756:	431a      	orrs	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	0007ffff 	.word	0x0007ffff

08001770 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001780:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6093      	str	r3, [r2, #8]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017a8:	d101      	bne.n	80017ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80017cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80017f8:	d101      	bne.n	80017fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <LL_ADC_IsEnabled+0x18>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <LL_ADC_IsEnabled+0x1a>
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	2b04      	cmp	r3, #4
 8001844:	d101      	bne.n	800184a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b08      	cmp	r3, #8
 800186a:	d101      	bne.n	8001870 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b089      	sub	sp, #36	@ 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001888:	2300      	movs	r3, #0
 800188a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e1a9      	b.n	8001bee <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d109      	bne.n	80018bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff fbb7 	bl	800101c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff67 	bl	8001794 <LL_ADC_IsDeepPowerDownEnabled>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d004      	beq.n	80018d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff4d 	bl	8001770 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ff82 	bl	80017e4 <LL_ADC_IsInternalRegulatorEnabled>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d115      	bne.n	8001912 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff66 	bl	80017bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018f0:	4b9c      	ldr	r3, [pc, #624]	@ (8001b64 <HAL_ADC_Init+0x2e4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	099b      	lsrs	r3, r3, #6
 80018f6:	4a9c      	ldr	r2, [pc, #624]	@ (8001b68 <HAL_ADC_Init+0x2e8>)
 80018f8:	fba2 2303 	umull	r2, r3, r2, r3
 80018fc:	099b      	lsrs	r3, r3, #6
 80018fe:	3301      	adds	r3, #1
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001904:	e002      	b.n	800190c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3b01      	subs	r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f9      	bne.n	8001906 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ff64 	bl	80017e4 <LL_ADC_IsInternalRegulatorEnabled>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10d      	bne.n	800193e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001926:	f043 0210 	orr.w	r2, r3, #16
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001932:	f043 0201 	orr.w	r2, r3, #1
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ff75 	bl	8001832 <LL_ADC_REG_IsConversionOngoing>
 8001948:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	2b00      	cmp	r3, #0
 8001954:	f040 8142 	bne.w	8001bdc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2b00      	cmp	r3, #0
 800195c:	f040 813e 	bne.w	8001bdc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001964:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001968:	f043 0202 	orr.w	r2, r3, #2
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff49 	bl	800180c <LL_ADC_IsEnabled>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d141      	bne.n	8001a04 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001988:	d004      	beq.n	8001994 <HAL_ADC_Init+0x114>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a77      	ldr	r2, [pc, #476]	@ (8001b6c <HAL_ADC_Init+0x2ec>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d10f      	bne.n	80019b4 <HAL_ADC_Init+0x134>
 8001994:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001998:	f7ff ff38 	bl	800180c <LL_ADC_IsEnabled>
 800199c:	4604      	mov	r4, r0
 800199e:	4873      	ldr	r0, [pc, #460]	@ (8001b6c <HAL_ADC_Init+0x2ec>)
 80019a0:	f7ff ff34 	bl	800180c <LL_ADC_IsEnabled>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4323      	orrs	r3, r4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bf0c      	ite	eq
 80019ac:	2301      	moveq	r3, #1
 80019ae:	2300      	movne	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	e012      	b.n	80019da <HAL_ADC_Init+0x15a>
 80019b4:	486e      	ldr	r0, [pc, #440]	@ (8001b70 <HAL_ADC_Init+0x2f0>)
 80019b6:	f7ff ff29 	bl	800180c <LL_ADC_IsEnabled>
 80019ba:	4604      	mov	r4, r0
 80019bc:	486d      	ldr	r0, [pc, #436]	@ (8001b74 <HAL_ADC_Init+0x2f4>)
 80019be:	f7ff ff25 	bl	800180c <LL_ADC_IsEnabled>
 80019c2:	4603      	mov	r3, r0
 80019c4:	431c      	orrs	r4, r3
 80019c6:	486c      	ldr	r0, [pc, #432]	@ (8001b78 <HAL_ADC_Init+0x2f8>)
 80019c8:	f7ff ff20 	bl	800180c <LL_ADC_IsEnabled>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4323      	orrs	r3, r4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf0c      	ite	eq
 80019d4:	2301      	moveq	r3, #1
 80019d6:	2300      	movne	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d012      	beq.n	8001a04 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019e6:	d004      	beq.n	80019f2 <HAL_ADC_Init+0x172>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a5f      	ldr	r2, [pc, #380]	@ (8001b6c <HAL_ADC_Init+0x2ec>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d101      	bne.n	80019f6 <HAL_ADC_Init+0x176>
 80019f2:	4a62      	ldr	r2, [pc, #392]	@ (8001b7c <HAL_ADC_Init+0x2fc>)
 80019f4:	e000      	b.n	80019f8 <HAL_ADC_Init+0x178>
 80019f6:	4a62      	ldr	r2, [pc, #392]	@ (8001b80 <HAL_ADC_Init+0x300>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	4619      	mov	r1, r3
 80019fe:	4610      	mov	r0, r2
 8001a00:	f7ff fd68 	bl	80014d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7f5b      	ldrb	r3, [r3, #29]
 8001a08:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a0e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001a14:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001a1a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a22:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d106      	bne.n	8001a40 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a36:	3b01      	subs	r3, #1
 8001a38:	045b      	lsls	r3, r3, #17
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d009      	beq.n	8001a5c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a54:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	4b48      	ldr	r3, [pc, #288]	@ (8001b84 <HAL_ADC_Init+0x304>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	69b9      	ldr	r1, [r7, #24]
 8001a6c:	430b      	orrs	r3, r1
 8001a6e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fee4 	bl	8001858 <LL_ADC_INJ_IsConversionOngoing>
 8001a90:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d17f      	bne.n	8001b98 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d17c      	bne.n	8001b98 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001aa2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001aaa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001aba:	f023 0302 	bic.w	r3, r3, #2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	69b9      	ldr	r1, [r7, #24]
 8001ac4:	430b      	orrs	r3, r1
 8001ac6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d017      	beq.n	8001b00 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	691a      	ldr	r2, [r3, #16]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001ade:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ae8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001aec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6911      	ldr	r1, [r2, #16]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	430b      	orrs	r3, r1
 8001afa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001afe:	e013      	b.n	8001b28 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001b0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b24:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d12a      	bne.n	8001b88 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001b3c:	f023 0304 	bic.w	r3, r3, #4
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b48:	4311      	orrs	r1, r2
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001b4e:	4311      	orrs	r1, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b54:	430a      	orrs	r2, r1
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0201 	orr.w	r2, r2, #1
 8001b60:	611a      	str	r2, [r3, #16]
 8001b62:	e019      	b.n	8001b98 <HAL_ADC_Init+0x318>
 8001b64:	20000008 	.word	0x20000008
 8001b68:	053e2d63 	.word	0x053e2d63
 8001b6c:	50000100 	.word	0x50000100
 8001b70:	50000400 	.word	0x50000400
 8001b74:	50000500 	.word	0x50000500
 8001b78:	50000600 	.word	0x50000600
 8001b7c:	50000300 	.word	0x50000300
 8001b80:	50000700 	.word	0x50000700
 8001b84:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d10c      	bne.n	8001bba <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	f023 010f 	bic.w	r1, r3, #15
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	1e5a      	subs	r2, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bb8:	e007      	b.n	8001bca <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 020f 	bic.w	r2, r2, #15
 8001bc8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bce:	f023 0303 	bic.w	r3, r3, #3
 8001bd2:	f043 0201 	orr.w	r2, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bda:	e007      	b.n	8001bec <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be0:	f043 0210 	orr.w	r2, r3, #16
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bec:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3724      	adds	r7, #36	@ 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd90      	pop	{r4, r7, pc}
 8001bf6:	bf00      	nop

08001bf8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b0b6      	sub	sp, #216	@ 0xd8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d102      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x24>
 8001c16:	2302      	movs	r3, #2
 8001c18:	f000 bc13 	b.w	8002442 <HAL_ADC_ConfigChannel+0x84a>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fe02 	bl	8001832 <LL_ADC_REG_IsConversionOngoing>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f040 83f3 	bne.w	800241c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	6859      	ldr	r1, [r3, #4]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	f7ff fd18 	bl	8001678 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fdf0 	bl	8001832 <LL_ADC_REG_IsConversionOngoing>
 8001c52:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fdfc 	bl	8001858 <LL_ADC_INJ_IsConversionOngoing>
 8001c60:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f040 81d9 	bne.w	8002020 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f040 81d4 	bne.w	8002020 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c80:	d10f      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f7ff fd1f 	bl	80016d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fcd9 	bl	8001652 <LL_ADC_SetSamplingTimeCommonConfig>
 8001ca0:	e00e      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	6819      	ldr	r1, [r3, #0]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f7ff fd0e 	bl	80016d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fcc9 	bl	8001652 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	695a      	ldr	r2, [r3, #20]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	08db      	lsrs	r3, r3, #3
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d022      	beq.n	8001d28 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	6919      	ldr	r1, [r3, #16]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001cf2:	f7ff fc23 	bl	800153c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	6919      	ldr	r1, [r3, #16]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	461a      	mov	r2, r3
 8001d04:	f7ff fc6f 	bl	80015e6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6818      	ldr	r0, [r3, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d102      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x126>
 8001d18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d1c:	e000      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x128>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	461a      	mov	r2, r3
 8001d22:	f7ff fc7b 	bl	800161c <LL_ADC_SetOffsetSaturation>
 8001d26:	e17b      	b.n	8002020 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fc28 	bl	8001584 <LL_ADC_GetOffsetChannel>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10a      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x15c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fc1d 	bl	8001584 <LL_ADC_GetOffsetChannel>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	0e9b      	lsrs	r3, r3, #26
 8001d4e:	f003 021f 	and.w	r2, r3, #31
 8001d52:	e01e      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x19a>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fc12 	bl	8001584 <LL_ADC_GetOffsetChannel>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d6a:	fa93 f3a3 	rbit	r3, r3
 8001d6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001d82:	2320      	movs	r3, #32
 8001d84:	e004      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001d86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d105      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x1b2>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	0e9b      	lsrs	r3, r3, #26
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	e018      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x1e4>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001dbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001dc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001dc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001dce:	2320      	movs	r3, #32
 8001dd0:	e004      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001dd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d106      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2200      	movs	r2, #0
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fbe1 	bl	80015b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2101      	movs	r1, #1
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fbc5 	bl	8001584 <LL_ADC_GetOffsetChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10a      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x222>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2101      	movs	r1, #1
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fbba 	bl	8001584 <LL_ADC_GetOffsetChannel>
 8001e10:	4603      	mov	r3, r0
 8001e12:	0e9b      	lsrs	r3, r3, #26
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	e01e      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x260>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2101      	movs	r1, #1
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fbaf 	bl	8001584 <LL_ADC_GetOffsetChannel>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001e38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001e40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001e48:	2320      	movs	r3, #32
 8001e4a:	e004      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001e4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e50:	fab3 f383 	clz	r3, r3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d105      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x278>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	0e9b      	lsrs	r3, r3, #26
 8001e6a:	f003 031f 	and.w	r3, r3, #31
 8001e6e:	e018      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x2aa>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001e84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001e8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001e94:	2320      	movs	r3, #32
 8001e96:	e004      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001e98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e9c:	fab3 f383 	clz	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d106      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2101      	movs	r1, #1
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fb7e 	bl	80015b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2102      	movs	r1, #2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fb62 	bl	8001584 <LL_ADC_GetOffsetChannel>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10a      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x2e8>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2102      	movs	r1, #2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fb57 	bl	8001584 <LL_ADC_GetOffsetChannel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	0e9b      	lsrs	r3, r3, #26
 8001eda:	f003 021f 	and.w	r2, r3, #31
 8001ede:	e01e      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x326>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fb4c 	bl	8001584 <LL_ADC_GetOffsetChannel>
 8001eec:	4603      	mov	r3, r0
 8001eee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001efe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001f06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001f0e:	2320      	movs	r3, #32
 8001f10:	e004      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001f12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d105      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x33e>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	0e9b      	lsrs	r3, r3, #26
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	e016      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x36c>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001f48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001f4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001f56:	2320      	movs	r3, #32
 8001f58:	e004      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001f5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d106      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2102      	movs	r1, #2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fb1d 	bl	80015b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2103      	movs	r1, #3
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fb01 	bl	8001584 <LL_ADC_GetOffsetChannel>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10a      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x3aa>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2103      	movs	r1, #3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff faf6 	bl	8001584 <LL_ADC_GetOffsetChannel>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	0e9b      	lsrs	r3, r3, #26
 8001f9c:	f003 021f 	and.w	r2, r3, #31
 8001fa0:	e017      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x3da>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2103      	movs	r1, #3
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff faeb 	bl	8001584 <LL_ADC_GetOffsetChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fb4:	fa93 f3a3 	rbit	r3, r3
 8001fb8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001fba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fbc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001fbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001fc4:	2320      	movs	r3, #32
 8001fc6:	e003      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001fc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d105      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x3f2>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	0e9b      	lsrs	r3, r3, #26
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	e011      	b.n	800200e <HAL_ADC_ConfigChannel+0x416>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001ff8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ffa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001ffc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002002:	2320      	movs	r3, #32
 8002004:	e003      	b.n	800200e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800200e:	429a      	cmp	r2, r3
 8002010:	d106      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2200      	movs	r2, #0
 8002018:	2103      	movs	r1, #3
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fac8 	bl	80015b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fbf1 	bl	800180c <LL_ADC_IsEnabled>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	f040 813d 	bne.w	80022ac <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	6819      	ldr	r1, [r3, #0]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	461a      	mov	r2, r3
 8002040:	f7ff fb72 	bl	8001728 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4aa2      	ldr	r2, [pc, #648]	@ (80022d4 <HAL_ADC_ConfigChannel+0x6dc>)
 800204a:	4293      	cmp	r3, r2
 800204c:	f040 812e 	bne.w	80022ac <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10b      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x480>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	0e9b      	lsrs	r3, r3, #26
 8002066:	3301      	adds	r3, #1
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	2b09      	cmp	r3, #9
 800206e:	bf94      	ite	ls
 8002070:	2301      	movls	r3, #1
 8002072:	2300      	movhi	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	e019      	b.n	80020ac <HAL_ADC_ConfigChannel+0x4b4>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002086:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002088:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800208a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002090:	2320      	movs	r3, #32
 8002092:	e003      	b.n	800209c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002094:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	3301      	adds	r3, #1
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	2b09      	cmp	r3, #9
 80020a4:	bf94      	ite	ls
 80020a6:	2301      	movls	r3, #1
 80020a8:	2300      	movhi	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d079      	beq.n	80021a4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d107      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x4d4>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0e9b      	lsrs	r3, r3, #26
 80020c2:	3301      	adds	r3, #1
 80020c4:	069b      	lsls	r3, r3, #26
 80020c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020ca:	e015      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x500>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020d4:	fa93 f3a3 	rbit	r3, r3
 80020d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80020da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020dc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80020de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80020e4:	2320      	movs	r3, #32
 80020e6:	e003      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80020e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	3301      	adds	r3, #1
 80020f2:	069b      	lsls	r3, r3, #26
 80020f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002100:	2b00      	cmp	r3, #0
 8002102:	d109      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x520>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	0e9b      	lsrs	r3, r3, #26
 800210a:	3301      	adds	r3, #1
 800210c:	f003 031f 	and.w	r3, r3, #31
 8002110:	2101      	movs	r1, #1
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	e017      	b.n	8002148 <HAL_ADC_ConfigChannel+0x550>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002128:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800212a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002130:	2320      	movs	r3, #32
 8002132:	e003      	b.n	800213c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002134:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	3301      	adds	r3, #1
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	2101      	movs	r1, #1
 8002144:	fa01 f303 	lsl.w	r3, r1, r3
 8002148:	ea42 0103 	orr.w	r1, r2, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10a      	bne.n	800216e <HAL_ADC_ConfigChannel+0x576>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0e9b      	lsrs	r3, r3, #26
 800215e:	3301      	adds	r3, #1
 8002160:	f003 021f 	and.w	r2, r3, #31
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	051b      	lsls	r3, r3, #20
 800216c:	e018      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x5a8>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800217c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800217e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002186:	2320      	movs	r3, #32
 8002188:	e003      	b.n	8002192 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800218a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800218c:	fab3 f383 	clz	r3, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	3301      	adds	r3, #1
 8002194:	f003 021f 	and.w	r2, r3, #31
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021a0:	430b      	orrs	r3, r1
 80021a2:	e07e      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d107      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x5c8>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	0e9b      	lsrs	r3, r3, #26
 80021b6:	3301      	adds	r3, #1
 80021b8:	069b      	lsls	r3, r3, #26
 80021ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021be:	e015      	b.n	80021ec <HAL_ADC_ConfigChannel+0x5f4>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80021ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80021d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80021d8:	2320      	movs	r3, #32
 80021da:	e003      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80021dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	3301      	adds	r3, #1
 80021e6:	069b      	lsls	r3, r3, #26
 80021e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d109      	bne.n	800220c <HAL_ADC_ConfigChannel+0x614>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0e9b      	lsrs	r3, r3, #26
 80021fe:	3301      	adds	r3, #1
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	2101      	movs	r1, #1
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	e017      	b.n	800223c <HAL_ADC_ConfigChannel+0x644>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	61fb      	str	r3, [r7, #28]
  return result;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800221e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002224:	2320      	movs	r3, #32
 8002226:	e003      	b.n	8002230 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	3301      	adds	r3, #1
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	2101      	movs	r1, #1
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	ea42 0103 	orr.w	r1, r2, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10d      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x670>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0e9b      	lsrs	r3, r3, #26
 8002252:	3301      	adds	r3, #1
 8002254:	f003 021f 	and.w	r2, r3, #31
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	3b1e      	subs	r3, #30
 8002260:	051b      	lsls	r3, r3, #20
 8002262:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002266:	e01b      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x6a8>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	613b      	str	r3, [r7, #16]
  return result;
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002280:	2320      	movs	r3, #32
 8002282:	e003      	b.n	800228c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	3301      	adds	r3, #1
 800228e:	f003 021f 	and.w	r2, r3, #31
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	3b1e      	subs	r3, #30
 800229a:	051b      	lsls	r3, r3, #20
 800229c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022a0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022a6:	4619      	mov	r1, r3
 80022a8:	f7ff fa12 	bl	80016d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b09      	ldr	r3, [pc, #36]	@ (80022d8 <HAL_ADC_ConfigChannel+0x6e0>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80be 	beq.w	8002436 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022c2:	d004      	beq.n	80022ce <HAL_ADC_ConfigChannel+0x6d6>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a04      	ldr	r2, [pc, #16]	@ (80022dc <HAL_ADC_ConfigChannel+0x6e4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d10a      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x6ec>
 80022ce:	4b04      	ldr	r3, [pc, #16]	@ (80022e0 <HAL_ADC_ConfigChannel+0x6e8>)
 80022d0:	e009      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6ee>
 80022d2:	bf00      	nop
 80022d4:	407f0000 	.word	0x407f0000
 80022d8:	80080000 	.word	0x80080000
 80022dc:	50000100 	.word	0x50000100
 80022e0:	50000300 	.word	0x50000300
 80022e4:	4b59      	ldr	r3, [pc, #356]	@ (800244c <HAL_ADC_ConfigChannel+0x854>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff f91a 	bl	8001520 <LL_ADC_GetCommonPathInternalCh>
 80022ec:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a56      	ldr	r2, [pc, #344]	@ (8002450 <HAL_ADC_ConfigChannel+0x858>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d004      	beq.n	8002304 <HAL_ADC_ConfigChannel+0x70c>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a55      	ldr	r2, [pc, #340]	@ (8002454 <HAL_ADC_ConfigChannel+0x85c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d13a      	bne.n	800237a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002304:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002308:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d134      	bne.n	800237a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002318:	d005      	beq.n	8002326 <HAL_ADC_ConfigChannel+0x72e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a4e      	ldr	r2, [pc, #312]	@ (8002458 <HAL_ADC_ConfigChannel+0x860>)
 8002320:	4293      	cmp	r3, r2
 8002322:	f040 8085 	bne.w	8002430 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800232e:	d004      	beq.n	800233a <HAL_ADC_ConfigChannel+0x742>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a49      	ldr	r2, [pc, #292]	@ (800245c <HAL_ADC_ConfigChannel+0x864>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d101      	bne.n	800233e <HAL_ADC_ConfigChannel+0x746>
 800233a:	4a49      	ldr	r2, [pc, #292]	@ (8002460 <HAL_ADC_ConfigChannel+0x868>)
 800233c:	e000      	b.n	8002340 <HAL_ADC_ConfigChannel+0x748>
 800233e:	4a43      	ldr	r2, [pc, #268]	@ (800244c <HAL_ADC_ConfigChannel+0x854>)
 8002340:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002344:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002348:	4619      	mov	r1, r3
 800234a:	4610      	mov	r0, r2
 800234c:	f7ff f8d5 	bl	80014fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002350:	4b44      	ldr	r3, [pc, #272]	@ (8002464 <HAL_ADC_ConfigChannel+0x86c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	099b      	lsrs	r3, r3, #6
 8002356:	4a44      	ldr	r2, [pc, #272]	@ (8002468 <HAL_ADC_ConfigChannel+0x870>)
 8002358:	fba2 2303 	umull	r2, r3, r2, r3
 800235c:	099b      	lsrs	r3, r3, #6
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	4613      	mov	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800236a:	e002      	b.n	8002372 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	3b01      	subs	r3, #1
 8002370:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f9      	bne.n	800236c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002378:	e05a      	b.n	8002430 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a3b      	ldr	r2, [pc, #236]	@ (800246c <HAL_ADC_ConfigChannel+0x874>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d125      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002384:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002388:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d11f      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a31      	ldr	r2, [pc, #196]	@ (800245c <HAL_ADC_ConfigChannel+0x864>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d104      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x7ac>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a34      	ldr	r2, [pc, #208]	@ (8002470 <HAL_ADC_ConfigChannel+0x878>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d047      	beq.n	8002434 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023ac:	d004      	beq.n	80023b8 <HAL_ADC_ConfigChannel+0x7c0>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a2a      	ldr	r2, [pc, #168]	@ (800245c <HAL_ADC_ConfigChannel+0x864>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x7c4>
 80023b8:	4a29      	ldr	r2, [pc, #164]	@ (8002460 <HAL_ADC_ConfigChannel+0x868>)
 80023ba:	e000      	b.n	80023be <HAL_ADC_ConfigChannel+0x7c6>
 80023bc:	4a23      	ldr	r2, [pc, #140]	@ (800244c <HAL_ADC_ConfigChannel+0x854>)
 80023be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023c6:	4619      	mov	r1, r3
 80023c8:	4610      	mov	r0, r2
 80023ca:	f7ff f896 	bl	80014fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023ce:	e031      	b.n	8002434 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a27      	ldr	r2, [pc, #156]	@ (8002474 <HAL_ADC_ConfigChannel+0x87c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d12d      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d127      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a1c      	ldr	r2, [pc, #112]	@ (800245c <HAL_ADC_ConfigChannel+0x864>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d022      	beq.n	8002436 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023f8:	d004      	beq.n	8002404 <HAL_ADC_ConfigChannel+0x80c>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a17      	ldr	r2, [pc, #92]	@ (800245c <HAL_ADC_ConfigChannel+0x864>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d101      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x810>
 8002404:	4a16      	ldr	r2, [pc, #88]	@ (8002460 <HAL_ADC_ConfigChannel+0x868>)
 8002406:	e000      	b.n	800240a <HAL_ADC_ConfigChannel+0x812>
 8002408:	4a10      	ldr	r2, [pc, #64]	@ (800244c <HAL_ADC_ConfigChannel+0x854>)
 800240a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800240e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002412:	4619      	mov	r1, r3
 8002414:	4610      	mov	r0, r2
 8002416:	f7ff f870 	bl	80014fa <LL_ADC_SetCommonPathInternalCh>
 800241a:	e00c      	b.n	8002436 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002420:	f043 0220 	orr.w	r2, r3, #32
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800242e:	e002      	b.n	8002436 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002430:	bf00      	nop
 8002432:	e000      	b.n	8002436 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002434:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800243e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002442:	4618      	mov	r0, r3
 8002444:	37d8      	adds	r7, #216	@ 0xd8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	50000700 	.word	0x50000700
 8002450:	c3210000 	.word	0xc3210000
 8002454:	90c00010 	.word	0x90c00010
 8002458:	50000600 	.word	0x50000600
 800245c:	50000100 	.word	0x50000100
 8002460:	50000300 	.word	0x50000300
 8002464:	20000008 	.word	0x20000008
 8002468:	053e2d63 	.word	0x053e2d63
 800246c:	c7520000 	.word	0xc7520000
 8002470:	50000500 	.word	0x50000500
 8002474:	cb840000 	.word	0xcb840000

08002478 <LL_ADC_IsEnabled>:
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <LL_ADC_IsEnabled+0x18>
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <LL_ADC_IsEnabled+0x1a>
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <LL_ADC_REG_IsConversionOngoing>:
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d101      	bne.n	80024b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b0a1      	sub	sp, #132	@ 0x84
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024de:	2302      	movs	r3, #2
 80024e0:	e0e7      	b.n	80026b2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80024ea:	2300      	movs	r3, #0
 80024ec:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80024ee:	2300      	movs	r3, #0
 80024f0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024fa:	d102      	bne.n	8002502 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80024fc:	4b6f      	ldr	r3, [pc, #444]	@ (80026bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	e009      	b.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a6e      	ldr	r2, [pc, #440]	@ (80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d102      	bne.n	8002512 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800250c:	4b6d      	ldr	r3, [pc, #436]	@ (80026c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	e001      	b.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10b      	bne.n	8002534 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002520:	f043 0220 	orr.w	r2, r3, #32
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0be      	b.n	80026b2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff ffb1 	bl	800249e <LL_ADC_REG_IsConversionOngoing>
 800253c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff ffab 	bl	800249e <LL_ADC_REG_IsConversionOngoing>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 80a0 	bne.w	8002690 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002550:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002552:	2b00      	cmp	r3, #0
 8002554:	f040 809c 	bne.w	8002690 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002560:	d004      	beq.n	800256c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a55      	ldr	r2, [pc, #340]	@ (80026bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d101      	bne.n	8002570 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800256c:	4b56      	ldr	r3, [pc, #344]	@ (80026c8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800256e:	e000      	b.n	8002572 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002570:	4b56      	ldr	r3, [pc, #344]	@ (80026cc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002572:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d04b      	beq.n	8002614 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800257c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800258e:	035b      	lsls	r3, r3, #13
 8002590:	430b      	orrs	r3, r1
 8002592:	431a      	orrs	r2, r3
 8002594:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002596:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025a0:	d004      	beq.n	80025ac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a45      	ldr	r2, [pc, #276]	@ (80026bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d10f      	bne.n	80025cc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80025ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80025b0:	f7ff ff62 	bl	8002478 <LL_ADC_IsEnabled>
 80025b4:	4604      	mov	r4, r0
 80025b6:	4841      	ldr	r0, [pc, #260]	@ (80026bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025b8:	f7ff ff5e 	bl	8002478 <LL_ADC_IsEnabled>
 80025bc:	4603      	mov	r3, r0
 80025be:	4323      	orrs	r3, r4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf0c      	ite	eq
 80025c4:	2301      	moveq	r3, #1
 80025c6:	2300      	movne	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	e012      	b.n	80025f2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80025cc:	483c      	ldr	r0, [pc, #240]	@ (80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80025ce:	f7ff ff53 	bl	8002478 <LL_ADC_IsEnabled>
 80025d2:	4604      	mov	r4, r0
 80025d4:	483b      	ldr	r0, [pc, #236]	@ (80026c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80025d6:	f7ff ff4f 	bl	8002478 <LL_ADC_IsEnabled>
 80025da:	4603      	mov	r3, r0
 80025dc:	431c      	orrs	r4, r3
 80025de:	483c      	ldr	r0, [pc, #240]	@ (80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80025e0:	f7ff ff4a 	bl	8002478 <LL_ADC_IsEnabled>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4323      	orrs	r3, r4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bf0c      	ite	eq
 80025ec:	2301      	moveq	r3, #1
 80025ee:	2300      	movne	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d056      	beq.n	80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80025fe:	f023 030f 	bic.w	r3, r3, #15
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	6811      	ldr	r1, [r2, #0]
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	6892      	ldr	r2, [r2, #8]
 800260a:	430a      	orrs	r2, r1
 800260c:	431a      	orrs	r2, r3
 800260e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002610:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002612:	e047      	b.n	80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002614:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800261c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800261e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002628:	d004      	beq.n	8002634 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a23      	ldr	r2, [pc, #140]	@ (80026bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d10f      	bne.n	8002654 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002634:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002638:	f7ff ff1e 	bl	8002478 <LL_ADC_IsEnabled>
 800263c:	4604      	mov	r4, r0
 800263e:	481f      	ldr	r0, [pc, #124]	@ (80026bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002640:	f7ff ff1a 	bl	8002478 <LL_ADC_IsEnabled>
 8002644:	4603      	mov	r3, r0
 8002646:	4323      	orrs	r3, r4
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf0c      	ite	eq
 800264c:	2301      	moveq	r3, #1
 800264e:	2300      	movne	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	e012      	b.n	800267a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002654:	481a      	ldr	r0, [pc, #104]	@ (80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002656:	f7ff ff0f 	bl	8002478 <LL_ADC_IsEnabled>
 800265a:	4604      	mov	r4, r0
 800265c:	4819      	ldr	r0, [pc, #100]	@ (80026c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800265e:	f7ff ff0b 	bl	8002478 <LL_ADC_IsEnabled>
 8002662:	4603      	mov	r3, r0
 8002664:	431c      	orrs	r4, r3
 8002666:	481a      	ldr	r0, [pc, #104]	@ (80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002668:	f7ff ff06 	bl	8002478 <LL_ADC_IsEnabled>
 800266c:	4603      	mov	r3, r0
 800266e:	4323      	orrs	r3, r4
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf0c      	ite	eq
 8002674:	2301      	moveq	r3, #1
 8002676:	2300      	movne	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d012      	beq.n	80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800267e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002686:	f023 030f 	bic.w	r3, r3, #15
 800268a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800268c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800268e:	e009      	b.n	80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002694:	f043 0220 	orr.w	r2, r3, #32
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80026a2:	e000      	b.n	80026a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80026ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3784      	adds	r7, #132	@ 0x84
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd90      	pop	{r4, r7, pc}
 80026ba:	bf00      	nop
 80026bc:	50000100 	.word	0x50000100
 80026c0:	50000400 	.word	0x50000400
 80026c4:	50000500 	.word	0x50000500
 80026c8:	50000300 	.word	0x50000300
 80026cc:	50000700 	.word	0x50000700
 80026d0:	50000600 	.word	0x50000600

080026d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002718 <__NVIC_SetPriorityGrouping+0x44>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026f0:	4013      	ands	r3, r2
 80026f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002706:	4a04      	ldr	r2, [pc, #16]	@ (8002718 <__NVIC_SetPriorityGrouping+0x44>)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	60d3      	str	r3, [r2, #12]
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002720:	4b04      	ldr	r3, [pc, #16]	@ (8002734 <__NVIC_GetPriorityGrouping+0x18>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	0a1b      	lsrs	r3, r3, #8
 8002726:	f003 0307 	and.w	r3, r3, #7
}
 800272a:	4618      	mov	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	2b00      	cmp	r3, #0
 8002748:	db0b      	blt.n	8002762 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	f003 021f 	and.w	r2, r3, #31
 8002750:	4907      	ldr	r1, [pc, #28]	@ (8002770 <__NVIC_EnableIRQ+0x38>)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	2001      	movs	r0, #1
 800275a:	fa00 f202 	lsl.w	r2, r0, r2
 800275e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	e000e100 	.word	0xe000e100

08002774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	6039      	str	r1, [r7, #0]
 800277e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002784:	2b00      	cmp	r3, #0
 8002786:	db0a      	blt.n	800279e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	b2da      	uxtb	r2, r3
 800278c:	490c      	ldr	r1, [pc, #48]	@ (80027c0 <__NVIC_SetPriority+0x4c>)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	0112      	lsls	r2, r2, #4
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	440b      	add	r3, r1
 8002798:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800279c:	e00a      	b.n	80027b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	4908      	ldr	r1, [pc, #32]	@ (80027c4 <__NVIC_SetPriority+0x50>)
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	3b04      	subs	r3, #4
 80027ac:	0112      	lsls	r2, r2, #4
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	440b      	add	r3, r1
 80027b2:	761a      	strb	r2, [r3, #24]
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000e100 	.word	0xe000e100
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b089      	sub	sp, #36	@ 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f1c3 0307 	rsb	r3, r3, #7
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	bf28      	it	cs
 80027e6:	2304      	movcs	r3, #4
 80027e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	3304      	adds	r3, #4
 80027ee:	2b06      	cmp	r3, #6
 80027f0:	d902      	bls.n	80027f8 <NVIC_EncodePriority+0x30>
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3b03      	subs	r3, #3
 80027f6:	e000      	b.n	80027fa <NVIC_EncodePriority+0x32>
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43da      	mvns	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	401a      	ands	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002810:	f04f 31ff 	mov.w	r1, #4294967295
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	fa01 f303 	lsl.w	r3, r1, r3
 800281a:	43d9      	mvns	r1, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002820:	4313      	orrs	r3, r2
         );
}
 8002822:	4618      	mov	r0, r3
 8002824:	3724      	adds	r7, #36	@ 0x24
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3b01      	subs	r3, #1
 800283c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002840:	d301      	bcc.n	8002846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002842:	2301      	movs	r3, #1
 8002844:	e00f      	b.n	8002866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002846:	4a0a      	ldr	r2, [pc, #40]	@ (8002870 <SysTick_Config+0x40>)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3b01      	subs	r3, #1
 800284c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800284e:	210f      	movs	r1, #15
 8002850:	f04f 30ff 	mov.w	r0, #4294967295
 8002854:	f7ff ff8e 	bl	8002774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002858:	4b05      	ldr	r3, [pc, #20]	@ (8002870 <SysTick_Config+0x40>)
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800285e:	4b04      	ldr	r3, [pc, #16]	@ (8002870 <SysTick_Config+0x40>)
 8002860:	2207      	movs	r2, #7
 8002862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	e000e010 	.word	0xe000e010

08002874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff ff29 	bl	80026d4 <__NVIC_SetPriorityGrouping>
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b086      	sub	sp, #24
 800288e:	af00      	add	r7, sp, #0
 8002890:	4603      	mov	r3, r0
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607a      	str	r2, [r7, #4]
 8002896:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002898:	f7ff ff40 	bl	800271c <__NVIC_GetPriorityGrouping>
 800289c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	6978      	ldr	r0, [r7, #20]
 80028a4:	f7ff ff90 	bl	80027c8 <NVIC_EncodePriority>
 80028a8:	4602      	mov	r2, r0
 80028aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff5f 	bl	8002774 <__NVIC_SetPriority>
}
 80028b6:	bf00      	nop
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	4603      	mov	r3, r0
 80028c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff33 	bl	8002738 <__NVIC_EnableIRQ>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ffa4 	bl	8002830 <SysTick_Config>
 80028e8:	4603      	mov	r3, r0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e08d      	b.n	8002a22 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	4b47      	ldr	r3, [pc, #284]	@ (8002a2c <HAL_DMA_Init+0x138>)
 800290e:	429a      	cmp	r2, r3
 8002910:	d80f      	bhi.n	8002932 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	4b45      	ldr	r3, [pc, #276]	@ (8002a30 <HAL_DMA_Init+0x13c>)
 800291a:	4413      	add	r3, r2
 800291c:	4a45      	ldr	r2, [pc, #276]	@ (8002a34 <HAL_DMA_Init+0x140>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	009a      	lsls	r2, r3, #2
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a42      	ldr	r2, [pc, #264]	@ (8002a38 <HAL_DMA_Init+0x144>)
 800292e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002930:	e00e      	b.n	8002950 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	4b40      	ldr	r3, [pc, #256]	@ (8002a3c <HAL_DMA_Init+0x148>)
 800293a:	4413      	add	r3, r2
 800293c:	4a3d      	ldr	r2, [pc, #244]	@ (8002a34 <HAL_DMA_Init+0x140>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	009a      	lsls	r2, r3, #2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a40 <HAL_DMA_Init+0x14c>)
 800294e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800296a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002974:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002980:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800298c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f8fe 	bl	8002ba4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029b0:	d102      	bne.n	80029b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029cc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d010      	beq.n	80029f8 <HAL_DMA_Init+0x104>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d80c      	bhi.n	80029f8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f91e 	bl	8002c20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	e008      	b.n	8002a0a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40020407 	.word	0x40020407
 8002a30:	bffdfff8 	.word	0xbffdfff8
 8002a34:	cccccccd 	.word	0xcccccccd
 8002a38:	40020000 	.word	0x40020000
 8002a3c:	bffdfbf8 	.word	0xbffdfbf8
 8002a40:	40020400 	.word	0x40020400

08002a44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a60:	f003 031f 	and.w	r3, r3, #31
 8002a64:	2204      	movs	r2, #4
 8002a66:	409a      	lsls	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d026      	beq.n	8002abe <HAL_DMA_IRQHandler+0x7a>
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d021      	beq.n	8002abe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d107      	bne.n	8002a98 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0204 	bic.w	r2, r2, #4
 8002a96:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9c:	f003 021f 	and.w	r2, r3, #31
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa4:	2104      	movs	r1, #4
 8002aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aaa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d071      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002abc:	e06c      	b.n	8002b98 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d02e      	beq.n	8002b30 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d029      	beq.n	8002b30 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10b      	bne.n	8002b02 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 020a 	bic.w	r2, r2, #10
 8002af8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b06:	f003 021f 	and.w	r2, r3, #31
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	2102      	movs	r1, #2
 8002b10:	fa01 f202 	lsl.w	r2, r1, r2
 8002b14:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d038      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002b2e:	e033      	b.n	8002b98 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	2208      	movs	r2, #8
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d02a      	beq.n	8002b9a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d025      	beq.n	8002b9a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 020e 	bic.w	r2, r2, #14
 8002b5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	f003 021f 	and.w	r2, r3, #31
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b70:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d004      	beq.n	8002b9a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b98:	bf00      	nop
 8002b9a:	bf00      	nop
}
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4b16      	ldr	r3, [pc, #88]	@ (8002c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d802      	bhi.n	8002bbe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002bb8:	4b15      	ldr	r3, [pc, #84]	@ (8002c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	e001      	b.n	8002bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002bbe:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002bc0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	3b08      	subs	r3, #8
 8002bce:	4a12      	ldr	r2, [pc, #72]	@ (8002c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	009a      	lsls	r2, r3, #2
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4413      	add	r3, r2
 8002be4:	461a      	mov	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a0b      	ldr	r2, [pc, #44]	@ (8002c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002bee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 031f 	and.w	r3, r3, #31
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40020407 	.word	0x40020407
 8002c10:	40020800 	.word	0x40020800
 8002c14:	40020820 	.word	0x40020820
 8002c18:	cccccccd 	.word	0xcccccccd
 8002c1c:	40020880 	.word	0x40020880

08002c20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	461a      	mov	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a08      	ldr	r2, [pc, #32]	@ (8002c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c42:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	f003 031f 	and.w	r3, r3, #31
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	1000823f 	.word	0x1000823f
 8002c64:	40020940 	.word	0x40020940

08002c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c76:	e15a      	b.n	8002f2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	4013      	ands	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 814c 	beq.w	8002f28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d005      	beq.n	8002ca8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d130      	bne.n	8002d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cde:	2201      	movs	r2, #1
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	091b      	lsrs	r3, r3, #4
 8002cf4:	f003 0201 	and.w	r2, r3, #1
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d017      	beq.n	8002d46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	2203      	movs	r2, #3
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d123      	bne.n	8002d9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	08da      	lsrs	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3208      	adds	r2, #8
 8002d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	220f      	movs	r2, #15
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	08da      	lsrs	r2, r3, #3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3208      	adds	r2, #8
 8002d94:	6939      	ldr	r1, [r7, #16]
 8002d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	2203      	movs	r2, #3
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4013      	ands	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 0203 	and.w	r2, r3, #3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 80a6 	beq.w	8002f28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ddc:	4b5b      	ldr	r3, [pc, #364]	@ (8002f4c <HAL_GPIO_Init+0x2e4>)
 8002dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de0:	4a5a      	ldr	r2, [pc, #360]	@ (8002f4c <HAL_GPIO_Init+0x2e4>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002de8:	4b58      	ldr	r3, [pc, #352]	@ (8002f4c <HAL_GPIO_Init+0x2e4>)
 8002dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002df4:	4a56      	ldr	r2, [pc, #344]	@ (8002f50 <HAL_GPIO_Init+0x2e8>)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e1e:	d01f      	beq.n	8002e60 <HAL_GPIO_Init+0x1f8>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a4c      	ldr	r2, [pc, #304]	@ (8002f54 <HAL_GPIO_Init+0x2ec>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d019      	beq.n	8002e5c <HAL_GPIO_Init+0x1f4>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a4b      	ldr	r2, [pc, #300]	@ (8002f58 <HAL_GPIO_Init+0x2f0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d013      	beq.n	8002e58 <HAL_GPIO_Init+0x1f0>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a4a      	ldr	r2, [pc, #296]	@ (8002f5c <HAL_GPIO_Init+0x2f4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d00d      	beq.n	8002e54 <HAL_GPIO_Init+0x1ec>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a49      	ldr	r2, [pc, #292]	@ (8002f60 <HAL_GPIO_Init+0x2f8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d007      	beq.n	8002e50 <HAL_GPIO_Init+0x1e8>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a48      	ldr	r2, [pc, #288]	@ (8002f64 <HAL_GPIO_Init+0x2fc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d101      	bne.n	8002e4c <HAL_GPIO_Init+0x1e4>
 8002e48:	2305      	movs	r3, #5
 8002e4a:	e00a      	b.n	8002e62 <HAL_GPIO_Init+0x1fa>
 8002e4c:	2306      	movs	r3, #6
 8002e4e:	e008      	b.n	8002e62 <HAL_GPIO_Init+0x1fa>
 8002e50:	2304      	movs	r3, #4
 8002e52:	e006      	b.n	8002e62 <HAL_GPIO_Init+0x1fa>
 8002e54:	2303      	movs	r3, #3
 8002e56:	e004      	b.n	8002e62 <HAL_GPIO_Init+0x1fa>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e002      	b.n	8002e62 <HAL_GPIO_Init+0x1fa>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <HAL_GPIO_Init+0x1fa>
 8002e60:	2300      	movs	r3, #0
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	f002 0203 	and.w	r2, r2, #3
 8002e68:	0092      	lsls	r2, r2, #2
 8002e6a:	4093      	lsls	r3, r2
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e72:	4937      	ldr	r1, [pc, #220]	@ (8002f50 <HAL_GPIO_Init+0x2e8>)
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	089b      	lsrs	r3, r3, #2
 8002e78:	3302      	adds	r3, #2
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e80:	4b39      	ldr	r3, [pc, #228]	@ (8002f68 <HAL_GPIO_Init+0x300>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ea4:	4a30      	ldr	r2, [pc, #192]	@ (8002f68 <HAL_GPIO_Init+0x300>)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002eaa:	4b2f      	ldr	r3, [pc, #188]	@ (8002f68 <HAL_GPIO_Init+0x300>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ece:	4a26      	ldr	r2, [pc, #152]	@ (8002f68 <HAL_GPIO_Init+0x300>)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002ed4:	4b24      	ldr	r3, [pc, #144]	@ (8002f68 <HAL_GPIO_Init+0x300>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	43db      	mvns	r3, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f68 <HAL_GPIO_Init+0x300>)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002efe:	4b1a      	ldr	r3, [pc, #104]	@ (8002f68 <HAL_GPIO_Init+0x300>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f22:	4a11      	ldr	r2, [pc, #68]	@ (8002f68 <HAL_GPIO_Init+0x300>)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f47f ae9d 	bne.w	8002c78 <HAL_GPIO_Init+0x10>
  }
}
 8002f3e:	bf00      	nop
 8002f40:	bf00      	nop
 8002f42:	371c      	adds	r7, #28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40010000 	.word	0x40010000
 8002f54:	48000400 	.word	0x48000400
 8002f58:	48000800 	.word	0x48000800
 8002f5c:	48000c00 	.word	0x48000c00
 8002f60:	48001000 	.word	0x48001000
 8002f64:	48001400 	.word	0x48001400
 8002f68:	40010400 	.word	0x40010400

08002f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	807b      	strh	r3, [r7, #2]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f7c:	787b      	ldrb	r3, [r7, #1]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f82:	887a      	ldrh	r2, [r7, #2]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f88:	e002      	b.n	8002f90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f8a:	887a      	ldrh	r2, [r7, #2]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fa6:	4b08      	ldr	r3, [pc, #32]	@ (8002fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d006      	beq.n	8002fc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fb2:	4a05      	ldr	r2, [pc, #20]	@ (8002fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd ffe6 	bl	8000f8c <HAL_GPIO_EXTI_Callback>
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40010400 	.word	0x40010400

08002fcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d141      	bne.n	800305e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fda:	4b4b      	ldr	r3, [pc, #300]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe6:	d131      	bne.n	800304c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fe8:	4b47      	ldr	r3, [pc, #284]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fee:	4a46      	ldr	r2, [pc, #280]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ff4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ff8:	4b43      	ldr	r3, [pc, #268]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003000:	4a41      	ldr	r2, [pc, #260]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003002:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003006:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003008:	4b40      	ldr	r3, [pc, #256]	@ (800310c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2232      	movs	r2, #50	@ 0x32
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	4a3f      	ldr	r2, [pc, #252]	@ (8003110 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003014:	fba2 2303 	umull	r2, r3, r2, r3
 8003018:	0c9b      	lsrs	r3, r3, #18
 800301a:	3301      	adds	r3, #1
 800301c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800301e:	e002      	b.n	8003026 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	3b01      	subs	r3, #1
 8003024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003026:	4b38      	ldr	r3, [pc, #224]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003032:	d102      	bne.n	800303a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f2      	bne.n	8003020 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800303a:	4b33      	ldr	r3, [pc, #204]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003046:	d158      	bne.n	80030fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e057      	b.n	80030fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800304c:	4b2e      	ldr	r3, [pc, #184]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800304e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003052:	4a2d      	ldr	r2, [pc, #180]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003054:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003058:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800305c:	e04d      	b.n	80030fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003064:	d141      	bne.n	80030ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003066:	4b28      	ldr	r3, [pc, #160]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800306e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003072:	d131      	bne.n	80030d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003074:	4b24      	ldr	r3, [pc, #144]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800307a:	4a23      	ldr	r2, [pc, #140]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003080:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003084:	4b20      	ldr	r3, [pc, #128]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800308c:	4a1e      	ldr	r2, [pc, #120]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003092:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003094:	4b1d      	ldr	r3, [pc, #116]	@ (800310c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2232      	movs	r2, #50	@ 0x32
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	4a1c      	ldr	r2, [pc, #112]	@ (8003110 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	0c9b      	lsrs	r3, r3, #18
 80030a6:	3301      	adds	r3, #1
 80030a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030aa:	e002      	b.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030b2:	4b15      	ldr	r3, [pc, #84]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030be:	d102      	bne.n	80030c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f2      	bne.n	80030ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030c6:	4b10      	ldr	r3, [pc, #64]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030d2:	d112      	bne.n	80030fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e011      	b.n	80030fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030de:	4a0a      	ldr	r2, [pc, #40]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80030e8:	e007      	b.n	80030fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030ea:	4b07      	ldr	r3, [pc, #28]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030f2:	4a05      	ldr	r2, [pc, #20]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	40007000 	.word	0x40007000
 800310c:	20000008 	.word	0x20000008
 8003110:	431bde83 	.word	0x431bde83

08003114 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003118:	4b05      	ldr	r3, [pc, #20]	@ (8003130 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	4a04      	ldr	r2, [pc, #16]	@ (8003130 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800311e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003122:	6093      	str	r3, [r2, #8]
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40007000 	.word	0x40007000

08003134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e2fe      	b.n	8003744 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d075      	beq.n	800323e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003152:	4b97      	ldr	r3, [pc, #604]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800315c:	4b94      	ldr	r3, [pc, #592]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	2b0c      	cmp	r3, #12
 800316a:	d102      	bne.n	8003172 <HAL_RCC_OscConfig+0x3e>
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2b03      	cmp	r3, #3
 8003170:	d002      	beq.n	8003178 <HAL_RCC_OscConfig+0x44>
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b08      	cmp	r3, #8
 8003176:	d10b      	bne.n	8003190 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003178:	4b8d      	ldr	r3, [pc, #564]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d05b      	beq.n	800323c <HAL_RCC_OscConfig+0x108>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d157      	bne.n	800323c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e2d9      	b.n	8003744 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003198:	d106      	bne.n	80031a8 <HAL_RCC_OscConfig+0x74>
 800319a:	4b85      	ldr	r3, [pc, #532]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a84      	ldr	r2, [pc, #528]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e01d      	b.n	80031e4 <HAL_RCC_OscConfig+0xb0>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0x98>
 80031b2:	4b7f      	ldr	r3, [pc, #508]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a7e      	ldr	r2, [pc, #504]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 80031b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b7c      	ldr	r3, [pc, #496]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a7b      	ldr	r2, [pc, #492]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 80031c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e00b      	b.n	80031e4 <HAL_RCC_OscConfig+0xb0>
 80031cc:	4b78      	ldr	r3, [pc, #480]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a77      	ldr	r2, [pc, #476]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 80031d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b75      	ldr	r3, [pc, #468]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a74      	ldr	r2, [pc, #464]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 80031de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d013      	beq.n	8003214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fe f966 	bl	80014bc <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f4:	f7fe f962 	bl	80014bc <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	@ 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e29e      	b.n	8003744 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003206:	4b6a      	ldr	r3, [pc, #424]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0xc0>
 8003212:	e014      	b.n	800323e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fe f952 	bl	80014bc <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800321c:	f7fe f94e 	bl	80014bc <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	@ 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e28a      	b.n	8003744 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800322e:	4b60      	ldr	r3, [pc, #384]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0xe8>
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d075      	beq.n	8003336 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800324a:	4b59      	ldr	r3, [pc, #356]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003254:	4b56      	ldr	r3, [pc, #344]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b0c      	cmp	r3, #12
 8003262:	d102      	bne.n	800326a <HAL_RCC_OscConfig+0x136>
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d002      	beq.n	8003270 <HAL_RCC_OscConfig+0x13c>
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2b04      	cmp	r3, #4
 800326e:	d11f      	bne.n	80032b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003270:	4b4f      	ldr	r3, [pc, #316]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_RCC_OscConfig+0x154>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e25d      	b.n	8003744 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003288:	4b49      	ldr	r3, [pc, #292]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	061b      	lsls	r3, r3, #24
 8003296:	4946      	ldr	r1, [pc, #280]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 8003298:	4313      	orrs	r3, r2
 800329a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800329c:	4b45      	ldr	r3, [pc, #276]	@ (80033b4 <HAL_RCC_OscConfig+0x280>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fe f8bf 	bl	8001424 <HAL_InitTick>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d043      	beq.n	8003334 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e249      	b.n	8003744 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d023      	beq.n	8003300 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b8:	4b3d      	ldr	r3, [pc, #244]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a3c      	ldr	r2, [pc, #240]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 80032be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe f8fa 	bl	80014bc <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032cc:	f7fe f8f6 	bl	80014bc <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e232      	b.n	8003744 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032de:	4b34      	ldr	r3, [pc, #208]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ea:	4b31      	ldr	r3, [pc, #196]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	061b      	lsls	r3, r3, #24
 80032f8:	492d      	ldr	r1, [pc, #180]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]
 80032fe:	e01a      	b.n	8003336 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003300:	4b2b      	ldr	r3, [pc, #172]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a2a      	ldr	r2, [pc, #168]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 8003306:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800330a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fe f8d6 	bl	80014bc <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003314:	f7fe f8d2 	bl	80014bc <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e20e      	b.n	8003744 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003326:	4b22      	ldr	r3, [pc, #136]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x1e0>
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003334:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d041      	beq.n	80033c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01c      	beq.n	8003384 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800334a:	4b19      	ldr	r3, [pc, #100]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 800334c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003350:	4a17      	ldr	r2, [pc, #92]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335a:	f7fe f8af 	bl	80014bc <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003362:	f7fe f8ab 	bl	80014bc <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e1e7      	b.n	8003744 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003374:	4b0e      	ldr	r3, [pc, #56]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 8003376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0ef      	beq.n	8003362 <HAL_RCC_OscConfig+0x22e>
 8003382:	e020      	b.n	80033c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003384:	4b0a      	ldr	r3, [pc, #40]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 8003386:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800338a:	4a09      	ldr	r2, [pc, #36]	@ (80033b0 <HAL_RCC_OscConfig+0x27c>)
 800338c:	f023 0301 	bic.w	r3, r3, #1
 8003390:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003394:	f7fe f892 	bl	80014bc <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800339a:	e00d      	b.n	80033b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339c:	f7fe f88e 	bl	80014bc <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d906      	bls.n	80033b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e1ca      	b.n	8003744 <HAL_RCC_OscConfig+0x610>
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000
 80033b4:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033b8:	4b8c      	ldr	r3, [pc, #560]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 80033ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1ea      	bne.n	800339c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80a6 	beq.w	8003520 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d4:	2300      	movs	r3, #0
 80033d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033d8:	4b84      	ldr	r3, [pc, #528]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 80033da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_OscConfig+0x2b4>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <HAL_RCC_OscConfig+0x2b6>
 80033e8:	2300      	movs	r3, #0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00d      	beq.n	800340a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ee:	4b7f      	ldr	r3, [pc, #508]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 80033f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f2:	4a7e      	ldr	r2, [pc, #504]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 80033f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80033fa:	4b7c      	ldr	r3, [pc, #496]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 80033fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003406:	2301      	movs	r3, #1
 8003408:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800340a:	4b79      	ldr	r3, [pc, #484]	@ (80035f0 <HAL_RCC_OscConfig+0x4bc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d118      	bne.n	8003448 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003416:	4b76      	ldr	r3, [pc, #472]	@ (80035f0 <HAL_RCC_OscConfig+0x4bc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a75      	ldr	r2, [pc, #468]	@ (80035f0 <HAL_RCC_OscConfig+0x4bc>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003422:	f7fe f84b 	bl	80014bc <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342a:	f7fe f847 	bl	80014bc <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e183      	b.n	8003744 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800343c:	4b6c      	ldr	r3, [pc, #432]	@ (80035f0 <HAL_RCC_OscConfig+0x4bc>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d108      	bne.n	8003462 <HAL_RCC_OscConfig+0x32e>
 8003450:	4b66      	ldr	r3, [pc, #408]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003456:	4a65      	ldr	r2, [pc, #404]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003460:	e024      	b.n	80034ac <HAL_RCC_OscConfig+0x378>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b05      	cmp	r3, #5
 8003468:	d110      	bne.n	800348c <HAL_RCC_OscConfig+0x358>
 800346a:	4b60      	ldr	r3, [pc, #384]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 800346c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003470:	4a5e      	ldr	r2, [pc, #376]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 8003472:	f043 0304 	orr.w	r3, r3, #4
 8003476:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800347a:	4b5c      	ldr	r3, [pc, #368]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003480:	4a5a      	ldr	r2, [pc, #360]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800348a:	e00f      	b.n	80034ac <HAL_RCC_OscConfig+0x378>
 800348c:	4b57      	ldr	r3, [pc, #348]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003492:	4a56      	ldr	r2, [pc, #344]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800349c:	4b53      	ldr	r3, [pc, #332]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a2:	4a52      	ldr	r2, [pc, #328]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 80034a4:	f023 0304 	bic.w	r3, r3, #4
 80034a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d016      	beq.n	80034e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7fe f802 	bl	80014bc <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ba:	e00a      	b.n	80034d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034bc:	f7fd fffe 	bl	80014bc <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e138      	b.n	8003744 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d2:	4b46      	ldr	r3, [pc, #280]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0ed      	beq.n	80034bc <HAL_RCC_OscConfig+0x388>
 80034e0:	e015      	b.n	800350e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e2:	f7fd ffeb 	bl	80014bc <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034e8:	e00a      	b.n	8003500 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ea:	f7fd ffe7 	bl	80014bc <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e121      	b.n	8003744 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003500:	4b3a      	ldr	r3, [pc, #232]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1ed      	bne.n	80034ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800350e:	7ffb      	ldrb	r3, [r7, #31]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d105      	bne.n	8003520 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003514:	4b35      	ldr	r3, [pc, #212]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 8003516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003518:	4a34      	ldr	r2, [pc, #208]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 800351a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800351e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d03c      	beq.n	80035a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d01c      	beq.n	800356e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003534:	4b2d      	ldr	r3, [pc, #180]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 8003536:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800353a:	4a2c      	ldr	r2, [pc, #176]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003544:	f7fd ffba 	bl	80014bc <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800354c:	f7fd ffb6 	bl	80014bc <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e0f2      	b.n	8003744 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800355e:	4b23      	ldr	r3, [pc, #140]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 8003560:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0ef      	beq.n	800354c <HAL_RCC_OscConfig+0x418>
 800356c:	e01b      	b.n	80035a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800356e:	4b1f      	ldr	r3, [pc, #124]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 8003570:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003574:	4a1d      	ldr	r2, [pc, #116]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357e:	f7fd ff9d 	bl	80014bc <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003586:	f7fd ff99 	bl	80014bc <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e0d5      	b.n	8003744 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003598:	4b14      	ldr	r3, [pc, #80]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 800359a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1ef      	bne.n	8003586 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80c9 	beq.w	8003742 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035b0:	4b0e      	ldr	r3, [pc, #56]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 030c 	and.w	r3, r3, #12
 80035b8:	2b0c      	cmp	r3, #12
 80035ba:	f000 8083 	beq.w	80036c4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d15e      	bne.n	8003684 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c6:	4b09      	ldr	r3, [pc, #36]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a08      	ldr	r2, [pc, #32]	@ (80035ec <HAL_RCC_OscConfig+0x4b8>)
 80035cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d2:	f7fd ff73 	bl	80014bc <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d8:	e00c      	b.n	80035f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035da:	f7fd ff6f 	bl	80014bc <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d905      	bls.n	80035f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e0ab      	b.n	8003744 <HAL_RCC_OscConfig+0x610>
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f4:	4b55      	ldr	r3, [pc, #340]	@ (800374c <HAL_RCC_OscConfig+0x618>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1ec      	bne.n	80035da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003600:	4b52      	ldr	r3, [pc, #328]	@ (800374c <HAL_RCC_OscConfig+0x618>)
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	4b52      	ldr	r3, [pc, #328]	@ (8003750 <HAL_RCC_OscConfig+0x61c>)
 8003606:	4013      	ands	r3, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6a11      	ldr	r1, [r2, #32]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003610:	3a01      	subs	r2, #1
 8003612:	0112      	lsls	r2, r2, #4
 8003614:	4311      	orrs	r1, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800361a:	0212      	lsls	r2, r2, #8
 800361c:	4311      	orrs	r1, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003622:	0852      	lsrs	r2, r2, #1
 8003624:	3a01      	subs	r2, #1
 8003626:	0552      	lsls	r2, r2, #21
 8003628:	4311      	orrs	r1, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800362e:	0852      	lsrs	r2, r2, #1
 8003630:	3a01      	subs	r2, #1
 8003632:	0652      	lsls	r2, r2, #25
 8003634:	4311      	orrs	r1, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800363a:	06d2      	lsls	r2, r2, #27
 800363c:	430a      	orrs	r2, r1
 800363e:	4943      	ldr	r1, [pc, #268]	@ (800374c <HAL_RCC_OscConfig+0x618>)
 8003640:	4313      	orrs	r3, r2
 8003642:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003644:	4b41      	ldr	r3, [pc, #260]	@ (800374c <HAL_RCC_OscConfig+0x618>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a40      	ldr	r2, [pc, #256]	@ (800374c <HAL_RCC_OscConfig+0x618>)
 800364a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800364e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003650:	4b3e      	ldr	r3, [pc, #248]	@ (800374c <HAL_RCC_OscConfig+0x618>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4a3d      	ldr	r2, [pc, #244]	@ (800374c <HAL_RCC_OscConfig+0x618>)
 8003656:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800365a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fd ff2e 	bl	80014bc <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003664:	f7fd ff2a 	bl	80014bc <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e066      	b.n	8003744 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003676:	4b35      	ldr	r3, [pc, #212]	@ (800374c <HAL_RCC_OscConfig+0x618>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCC_OscConfig+0x530>
 8003682:	e05e      	b.n	8003742 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003684:	4b31      	ldr	r3, [pc, #196]	@ (800374c <HAL_RCC_OscConfig+0x618>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a30      	ldr	r2, [pc, #192]	@ (800374c <HAL_RCC_OscConfig+0x618>)
 800368a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800368e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fd ff14 	bl	80014bc <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003698:	f7fd ff10 	bl	80014bc <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e04c      	b.n	8003744 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036aa:	4b28      	ldr	r3, [pc, #160]	@ (800374c <HAL_RCC_OscConfig+0x618>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80036b6:	4b25      	ldr	r3, [pc, #148]	@ (800374c <HAL_RCC_OscConfig+0x618>)
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	4924      	ldr	r1, [pc, #144]	@ (800374c <HAL_RCC_OscConfig+0x618>)
 80036bc:	4b25      	ldr	r3, [pc, #148]	@ (8003754 <HAL_RCC_OscConfig+0x620>)
 80036be:	4013      	ands	r3, r2
 80036c0:	60cb      	str	r3, [r1, #12]
 80036c2:	e03e      	b.n	8003742 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e039      	b.n	8003744 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80036d0:	4b1e      	ldr	r3, [pc, #120]	@ (800374c <HAL_RCC_OscConfig+0x618>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f003 0203 	and.w	r2, r3, #3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d12c      	bne.n	800373e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	3b01      	subs	r3, #1
 80036f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d123      	bne.n	800373e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003700:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003702:	429a      	cmp	r2, r3
 8003704:	d11b      	bne.n	800373e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003710:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d113      	bne.n	800373e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	3b01      	subs	r3, #1
 8003724:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003726:	429a      	cmp	r2, r3
 8003728:	d109      	bne.n	800373e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003734:	085b      	lsrs	r3, r3, #1
 8003736:	3b01      	subs	r3, #1
 8003738:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800373a:	429a      	cmp	r2, r3
 800373c:	d001      	beq.n	8003742 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3720      	adds	r7, #32
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000
 8003750:	019f800c 	.word	0x019f800c
 8003754:	feeefffc 	.word	0xfeeefffc

08003758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e11e      	b.n	80039ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003770:	4b91      	ldr	r3, [pc, #580]	@ (80039b8 <HAL_RCC_ClockConfig+0x260>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d910      	bls.n	80037a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377e:	4b8e      	ldr	r3, [pc, #568]	@ (80039b8 <HAL_RCC_ClockConfig+0x260>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 020f 	bic.w	r2, r3, #15
 8003786:	498c      	ldr	r1, [pc, #560]	@ (80039b8 <HAL_RCC_ClockConfig+0x260>)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800378e:	4b8a      	ldr	r3, [pc, #552]	@ (80039b8 <HAL_RCC_ClockConfig+0x260>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e106      	b.n	80039ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d073      	beq.n	8003894 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d129      	bne.n	8003808 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b4:	4b81      	ldr	r3, [pc, #516]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0f4      	b.n	80039ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80037c4:	f000 f966 	bl	8003a94 <RCC_GetSysClockFreqFromPLLSource>
 80037c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4a7c      	ldr	r2, [pc, #496]	@ (80039c0 <HAL_RCC_ClockConfig+0x268>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d93f      	bls.n	8003852 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037d2:	4b7a      	ldr	r3, [pc, #488]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d009      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d033      	beq.n	8003852 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d12f      	bne.n	8003852 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037f2:	4b72      	ldr	r3, [pc, #456]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037fa:	4a70      	ldr	r2, [pc, #448]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 80037fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003800:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003802:	2380      	movs	r3, #128	@ 0x80
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	e024      	b.n	8003852 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b02      	cmp	r3, #2
 800380e:	d107      	bne.n	8003820 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003810:	4b6a      	ldr	r3, [pc, #424]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d109      	bne.n	8003830 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0c6      	b.n	80039ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003820:	4b66      	ldr	r3, [pc, #408]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0be      	b.n	80039ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003830:	f000 f8ce 	bl	80039d0 <HAL_RCC_GetSysClockFreq>
 8003834:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4a61      	ldr	r2, [pc, #388]	@ (80039c0 <HAL_RCC_ClockConfig+0x268>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d909      	bls.n	8003852 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800383e:	4b5f      	ldr	r3, [pc, #380]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003846:	4a5d      	ldr	r2, [pc, #372]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 8003848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800384c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800384e:	2380      	movs	r3, #128	@ 0x80
 8003850:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003852:	4b5a      	ldr	r3, [pc, #360]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f023 0203 	bic.w	r2, r3, #3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4957      	ldr	r1, [pc, #348]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 8003860:	4313      	orrs	r3, r2
 8003862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003864:	f7fd fe2a 	bl	80014bc <HAL_GetTick>
 8003868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386a:	e00a      	b.n	8003882 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800386c:	f7fd fe26 	bl	80014bc <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e095      	b.n	80039ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	4b4e      	ldr	r3, [pc, #312]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 020c 	and.w	r2, r3, #12
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	429a      	cmp	r2, r3
 8003892:	d1eb      	bne.n	800386c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d023      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038ac:	4b43      	ldr	r3, [pc, #268]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4a42      	ldr	r2, [pc, #264]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 80038b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d007      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80038c4:	4b3d      	ldr	r3, [pc, #244]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80038cc:	4a3b      	ldr	r2, [pc, #236]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 80038ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d4:	4b39      	ldr	r3, [pc, #228]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4936      	ldr	r1, [pc, #216]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	608b      	str	r3, [r1, #8]
 80038e6:	e008      	b.n	80038fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2b80      	cmp	r3, #128	@ 0x80
 80038ec:	d105      	bne.n	80038fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80038ee:	4b33      	ldr	r3, [pc, #204]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	4a32      	ldr	r2, [pc, #200]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 80038f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038fa:	4b2f      	ldr	r3, [pc, #188]	@ (80039b8 <HAL_RCC_ClockConfig+0x260>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d21d      	bcs.n	8003944 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003908:	4b2b      	ldr	r3, [pc, #172]	@ (80039b8 <HAL_RCC_ClockConfig+0x260>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f023 020f 	bic.w	r2, r3, #15
 8003910:	4929      	ldr	r1, [pc, #164]	@ (80039b8 <HAL_RCC_ClockConfig+0x260>)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	4313      	orrs	r3, r2
 8003916:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003918:	f7fd fdd0 	bl	80014bc <HAL_GetTick>
 800391c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391e:	e00a      	b.n	8003936 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003920:	f7fd fdcc 	bl	80014bc <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800392e:	4293      	cmp	r3, r2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e03b      	b.n	80039ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	4b20      	ldr	r3, [pc, #128]	@ (80039b8 <HAL_RCC_ClockConfig+0x260>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d1ed      	bne.n	8003920 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003950:	4b1a      	ldr	r3, [pc, #104]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4917      	ldr	r1, [pc, #92]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800396e:	4b13      	ldr	r3, [pc, #76]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	490f      	ldr	r1, [pc, #60]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 800397e:	4313      	orrs	r3, r2
 8003980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003982:	f000 f825 	bl	80039d0 <HAL_RCC_GetSysClockFreq>
 8003986:	4602      	mov	r2, r0
 8003988:	4b0c      	ldr	r3, [pc, #48]	@ (80039bc <HAL_RCC_ClockConfig+0x264>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	490c      	ldr	r1, [pc, #48]	@ (80039c4 <HAL_RCC_ClockConfig+0x26c>)
 8003994:	5ccb      	ldrb	r3, [r1, r3]
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	fa22 f303 	lsr.w	r3, r2, r3
 800399e:	4a0a      	ldr	r2, [pc, #40]	@ (80039c8 <HAL_RCC_ClockConfig+0x270>)
 80039a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039a2:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <HAL_RCC_ClockConfig+0x274>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fd fd3c 	bl	8001424 <HAL_InitTick>
 80039ac:	4603      	mov	r3, r0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40022000 	.word	0x40022000
 80039bc:	40021000 	.word	0x40021000
 80039c0:	04c4b400 	.word	0x04c4b400
 80039c4:	080059a0 	.word	0x080059a0
 80039c8:	20000008 	.word	0x20000008
 80039cc:	2000000c 	.word	0x2000000c

080039d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d102      	bne.n	80039e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039e2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	e047      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80039e8:	4b27      	ldr	r3, [pc, #156]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d102      	bne.n	80039fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039f4:	4b26      	ldr	r3, [pc, #152]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	e03e      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80039fa:	4b23      	ldr	r3, [pc, #140]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 030c 	and.w	r3, r3, #12
 8003a02:	2b0c      	cmp	r3, #12
 8003a04:	d136      	bne.n	8003a74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a06:	4b20      	ldr	r3, [pc, #128]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a10:	4b1d      	ldr	r3, [pc, #116]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d10c      	bne.n	8003a3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a24:	4a1a      	ldr	r2, [pc, #104]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	4a16      	ldr	r2, [pc, #88]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a2e:	68d2      	ldr	r2, [r2, #12]
 8003a30:	0a12      	lsrs	r2, r2, #8
 8003a32:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a36:	fb02 f303 	mul.w	r3, r2, r3
 8003a3a:	617b      	str	r3, [r7, #20]
      break;
 8003a3c:	e00c      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a3e:	4a13      	ldr	r2, [pc, #76]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a46:	4a10      	ldr	r2, [pc, #64]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a48:	68d2      	ldr	r2, [r2, #12]
 8003a4a:	0a12      	lsrs	r2, r2, #8
 8003a4c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a50:	fb02 f303 	mul.w	r3, r2, r3
 8003a54:	617b      	str	r3, [r7, #20]
      break;
 8003a56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a58:	4b0b      	ldr	r3, [pc, #44]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	0e5b      	lsrs	r3, r3, #25
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	3301      	adds	r3, #1
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a70:	613b      	str	r3, [r7, #16]
 8003a72:	e001      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a78:	693b      	ldr	r3, [r7, #16]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	00f42400 	.word	0x00f42400
 8003a90:	016e3600 	.word	0x016e3600

08003a94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	3301      	adds	r3, #1
 8003ab0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d10c      	bne.n	8003ad2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ab8:	4a17      	ldr	r2, [pc, #92]	@ (8003b18 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	4a14      	ldr	r2, [pc, #80]	@ (8003b14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ac2:	68d2      	ldr	r2, [r2, #12]
 8003ac4:	0a12      	lsrs	r2, r2, #8
 8003ac6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003aca:	fb02 f303 	mul.w	r3, r2, r3
 8003ace:	617b      	str	r3, [r7, #20]
    break;
 8003ad0:	e00c      	b.n	8003aec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ad2:	4a12      	ldr	r2, [pc, #72]	@ (8003b1c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ada:	4a0e      	ldr	r2, [pc, #56]	@ (8003b14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003adc:	68d2      	ldr	r2, [r2, #12]
 8003ade:	0a12      	lsrs	r2, r2, #8
 8003ae0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ae4:	fb02 f303 	mul.w	r3, r2, r3
 8003ae8:	617b      	str	r3, [r7, #20]
    break;
 8003aea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aec:	4b09      	ldr	r3, [pc, #36]	@ (8003b14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	0e5b      	lsrs	r3, r3, #25
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	3301      	adds	r3, #1
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b06:	687b      	ldr	r3, [r7, #4]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	40021000 	.word	0x40021000
 8003b18:	016e3600 	.word	0x016e3600
 8003b1c:	00f42400 	.word	0x00f42400

08003b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b28:	2300      	movs	r3, #0
 8003b2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8098 	beq.w	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b42:	4b43      	ldr	r3, [pc, #268]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10d      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4e:	4b40      	ldr	r3, [pc, #256]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b52:	4a3f      	ldr	r2, [pc, #252]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b5a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b62:	60bb      	str	r3, [r7, #8]
 8003b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b66:	2301      	movs	r3, #1
 8003b68:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b6a:	4b3a      	ldr	r3, [pc, #232]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a39      	ldr	r2, [pc, #228]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b76:	f7fd fca1 	bl	80014bc <HAL_GetTick>
 8003b7a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b7c:	e009      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7e:	f7fd fc9d 	bl	80014bc <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d902      	bls.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	74fb      	strb	r3, [r7, #19]
        break;
 8003b90:	e005      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b92:	4b30      	ldr	r3, [pc, #192]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0ef      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d159      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003baa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d01e      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d019      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bc0:	4b23      	ldr	r3, [pc, #140]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bcc:	4b20      	ldr	r3, [pc, #128]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bec:	4a18      	ldr	r2, [pc, #96]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d016      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfe:	f7fd fc5d 	bl	80014bc <HAL_GetTick>
 8003c02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c04:	e00b      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c06:	f7fd fc59 	bl	80014bc <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d902      	bls.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	74fb      	strb	r3, [r7, #19]
            break;
 8003c1c:	e006      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0ec      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c2c:	7cfb      	ldrb	r3, [r7, #19]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10b      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c32:	4b07      	ldr	r3, [pc, #28]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c40:	4903      	ldr	r1, [pc, #12]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c48:	e008      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c4a:	7cfb      	ldrb	r3, [r7, #19]
 8003c4c:	74bb      	strb	r3, [r7, #18]
 8003c4e:	e005      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c50:	40021000 	.word	0x40021000
 8003c54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c58:	7cfb      	ldrb	r3, [r7, #19]
 8003c5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c5c:	7c7b      	ldrb	r3, [r7, #17]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d105      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c62:	4ba7      	ldr	r3, [pc, #668]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c66:	4aa6      	ldr	r2, [pc, #664]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c6c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c7a:	4ba1      	ldr	r3, [pc, #644]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c80:	f023 0203 	bic.w	r2, r3, #3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	499d      	ldr	r1, [pc, #628]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c9c:	4b98      	ldr	r3, [pc, #608]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca2:	f023 020c 	bic.w	r2, r3, #12
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	4995      	ldr	r1, [pc, #596]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cbe:	4b90      	ldr	r3, [pc, #576]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	498c      	ldr	r1, [pc, #560]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ce0:	4b87      	ldr	r3, [pc, #540]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	4984      	ldr	r1, [pc, #528]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0310 	and.w	r3, r3, #16
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d02:	4b7f      	ldr	r3, [pc, #508]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	497b      	ldr	r1, [pc, #492]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d24:	4b76      	ldr	r3, [pc, #472]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	4973      	ldr	r1, [pc, #460]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d46:	4b6e      	ldr	r3, [pc, #440]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	496a      	ldr	r1, [pc, #424]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d68:	4b65      	ldr	r3, [pc, #404]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	4962      	ldr	r1, [pc, #392]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d98:	4959      	ldr	r1, [pc, #356]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dac:	4b54      	ldr	r3, [pc, #336]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003db2:	f023 0203 	bic.w	r2, r3, #3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dba:	4951      	ldr	r1, [pc, #324]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dce:	4b4c      	ldr	r3, [pc, #304]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ddc:	4948      	ldr	r1, [pc, #288]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d015      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003df0:	4b43      	ldr	r3, [pc, #268]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	4940      	ldr	r1, [pc, #256]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e10:	4b3b      	ldr	r3, [pc, #236]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	4a3a      	ldr	r2, [pc, #232]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e1a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d015      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e28:	4b35      	ldr	r3, [pc, #212]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e36:	4932      	ldr	r1, [pc, #200]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e46:	d105      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e48:	4b2d      	ldr	r3, [pc, #180]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a2c      	ldr	r2, [pc, #176]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e52:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d015      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e60:	4b27      	ldr	r3, [pc, #156]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e66:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6e:	4924      	ldr	r1, [pc, #144]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e7e:	d105      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e80:	4b1f      	ldr	r3, [pc, #124]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4a1e      	ldr	r2, [pc, #120]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d015      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e98:	4b19      	ldr	r3, [pc, #100]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea6:	4916      	ldr	r1, [pc, #88]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eb6:	d105      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eb8:	4b11      	ldr	r3, [pc, #68]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4a10      	ldr	r2, [pc, #64]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ebe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ec2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d019      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ede:	4908      	ldr	r1, [pc, #32]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eee:	d109      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef0:	4b03      	ldr	r3, [pc, #12]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a02      	ldr	r2, [pc, #8]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003efa:	60d3      	str	r3, [r2, #12]
 8003efc:	e002      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003efe:	bf00      	nop
 8003f00:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d015      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f10:	4b29      	ldr	r3, [pc, #164]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f16:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1e:	4926      	ldr	r1, [pc, #152]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f2e:	d105      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f30:	4b21      	ldr	r3, [pc, #132]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4a20      	ldr	r2, [pc, #128]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f3a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d015      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003f48:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f56:	4918      	ldr	r1, [pc, #96]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f66:	d105      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f68:	4b13      	ldr	r3, [pc, #76]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4a12      	ldr	r2, [pc, #72]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f72:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d015      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f80:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f8e:	490a      	ldr	r1, [pc, #40]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f9e:	d105      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fa0:	4b05      	ldr	r3, [pc, #20]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4a04      	ldr	r2, [pc, #16]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003faa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003fac:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40021000 	.word	0x40021000

08003fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e049      	b.n	8004062 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d106      	bne.n	8003fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fd f89e 	bl	8001124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	f000 fe98 	bl	8004d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b01      	cmp	r3, #1
 800407e:	d001      	beq.n	8004084 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e04c      	b.n	800411e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a26      	ldr	r2, [pc, #152]	@ (800412c <HAL_TIM_Base_Start+0xc0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d022      	beq.n	80040dc <HAL_TIM_Base_Start+0x70>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800409e:	d01d      	beq.n	80040dc <HAL_TIM_Base_Start+0x70>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a22      	ldr	r2, [pc, #136]	@ (8004130 <HAL_TIM_Base_Start+0xc4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d018      	beq.n	80040dc <HAL_TIM_Base_Start+0x70>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a21      	ldr	r2, [pc, #132]	@ (8004134 <HAL_TIM_Base_Start+0xc8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d013      	beq.n	80040dc <HAL_TIM_Base_Start+0x70>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004138 <HAL_TIM_Base_Start+0xcc>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00e      	beq.n	80040dc <HAL_TIM_Base_Start+0x70>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1e      	ldr	r2, [pc, #120]	@ (800413c <HAL_TIM_Base_Start+0xd0>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d009      	beq.n	80040dc <HAL_TIM_Base_Start+0x70>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004140 <HAL_TIM_Base_Start+0xd4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <HAL_TIM_Base_Start+0x70>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004144 <HAL_TIM_Base_Start+0xd8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d115      	bne.n	8004108 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	4b19      	ldr	r3, [pc, #100]	@ (8004148 <HAL_TIM_Base_Start+0xdc>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b06      	cmp	r3, #6
 80040ec:	d015      	beq.n	800411a <HAL_TIM_Base_Start+0xae>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f4:	d011      	beq.n	800411a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0201 	orr.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004106:	e008      	b.n	800411a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e000      	b.n	800411c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40012c00 	.word	0x40012c00
 8004130:	40000400 	.word	0x40000400
 8004134:	40000800 	.word	0x40000800
 8004138:	40000c00 	.word	0x40000c00
 800413c:	40013400 	.word	0x40013400
 8004140:	40014000 	.word	0x40014000
 8004144:	40015000 	.word	0x40015000
 8004148:	00010007 	.word	0x00010007

0800414c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b01      	cmp	r3, #1
 800415e:	d001      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e054      	b.n	800420e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a26      	ldr	r2, [pc, #152]	@ (800421c <HAL_TIM_Base_Start_IT+0xd0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d022      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x80>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800418e:	d01d      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x80>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a22      	ldr	r2, [pc, #136]	@ (8004220 <HAL_TIM_Base_Start_IT+0xd4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d018      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x80>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a21      	ldr	r2, [pc, #132]	@ (8004224 <HAL_TIM_Base_Start_IT+0xd8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d013      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x80>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004228 <HAL_TIM_Base_Start_IT+0xdc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00e      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x80>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a1e      	ldr	r2, [pc, #120]	@ (800422c <HAL_TIM_Base_Start_IT+0xe0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d009      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x80>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004230 <HAL_TIM_Base_Start_IT+0xe4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d004      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x80>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004234 <HAL_TIM_Base_Start_IT+0xe8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d115      	bne.n	80041f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	4b19      	ldr	r3, [pc, #100]	@ (8004238 <HAL_TIM_Base_Start_IT+0xec>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b06      	cmp	r3, #6
 80041dc:	d015      	beq.n	800420a <HAL_TIM_Base_Start_IT+0xbe>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041e4:	d011      	beq.n	800420a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0201 	orr.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f6:	e008      	b.n	800420a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	e000      	b.n	800420c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40012c00 	.word	0x40012c00
 8004220:	40000400 	.word	0x40000400
 8004224:	40000800 	.word	0x40000800
 8004228:	40000c00 	.word	0x40000c00
 800422c:	40013400 	.word	0x40013400
 8004230:	40014000 	.word	0x40014000
 8004234:	40015000 	.word	0x40015000
 8004238:	00010007 	.word	0x00010007

0800423c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e049      	b.n	80042e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f841 	bl	80042ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3304      	adds	r3, #4
 8004278:	4619      	mov	r1, r3
 800427a:	4610      	mov	r0, r2
 800427c:	f000 fd58 	bl	8004d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d109      	bne.n	8004324 <HAL_TIM_PWM_Start+0x24>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b01      	cmp	r3, #1
 800431a:	bf14      	ite	ne
 800431c:	2301      	movne	r3, #1
 800431e:	2300      	moveq	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	e03c      	b.n	800439e <HAL_TIM_PWM_Start+0x9e>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2b04      	cmp	r3, #4
 8004328:	d109      	bne.n	800433e <HAL_TIM_PWM_Start+0x3e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b01      	cmp	r3, #1
 8004334:	bf14      	ite	ne
 8004336:	2301      	movne	r3, #1
 8004338:	2300      	moveq	r3, #0
 800433a:	b2db      	uxtb	r3, r3
 800433c:	e02f      	b.n	800439e <HAL_TIM_PWM_Start+0x9e>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b08      	cmp	r3, #8
 8004342:	d109      	bne.n	8004358 <HAL_TIM_PWM_Start+0x58>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	bf14      	ite	ne
 8004350:	2301      	movne	r3, #1
 8004352:	2300      	moveq	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	e022      	b.n	800439e <HAL_TIM_PWM_Start+0x9e>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b0c      	cmp	r3, #12
 800435c:	d109      	bne.n	8004372 <HAL_TIM_PWM_Start+0x72>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b01      	cmp	r3, #1
 8004368:	bf14      	ite	ne
 800436a:	2301      	movne	r3, #1
 800436c:	2300      	moveq	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	e015      	b.n	800439e <HAL_TIM_PWM_Start+0x9e>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b10      	cmp	r3, #16
 8004376:	d109      	bne.n	800438c <HAL_TIM_PWM_Start+0x8c>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	bf14      	ite	ne
 8004384:	2301      	movne	r3, #1
 8004386:	2300      	moveq	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	e008      	b.n	800439e <HAL_TIM_PWM_Start+0x9e>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e0a6      	b.n	80044f4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d104      	bne.n	80043b6 <HAL_TIM_PWM_Start+0xb6>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043b4:	e023      	b.n	80043fe <HAL_TIM_PWM_Start+0xfe>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d104      	bne.n	80043c6 <HAL_TIM_PWM_Start+0xc6>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043c4:	e01b      	b.n	80043fe <HAL_TIM_PWM_Start+0xfe>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d104      	bne.n	80043d6 <HAL_TIM_PWM_Start+0xd6>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043d4:	e013      	b.n	80043fe <HAL_TIM_PWM_Start+0xfe>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b0c      	cmp	r3, #12
 80043da:	d104      	bne.n	80043e6 <HAL_TIM_PWM_Start+0xe6>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043e4:	e00b      	b.n	80043fe <HAL_TIM_PWM_Start+0xfe>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d104      	bne.n	80043f6 <HAL_TIM_PWM_Start+0xf6>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043f4:	e003      	b.n	80043fe <HAL_TIM_PWM_Start+0xfe>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2202      	movs	r2, #2
 80043fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2201      	movs	r2, #1
 8004404:	6839      	ldr	r1, [r7, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f001 f90c 	bl	8005624 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a3a      	ldr	r2, [pc, #232]	@ (80044fc <HAL_TIM_PWM_Start+0x1fc>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d018      	beq.n	8004448 <HAL_TIM_PWM_Start+0x148>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a39      	ldr	r2, [pc, #228]	@ (8004500 <HAL_TIM_PWM_Start+0x200>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d013      	beq.n	8004448 <HAL_TIM_PWM_Start+0x148>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a37      	ldr	r2, [pc, #220]	@ (8004504 <HAL_TIM_PWM_Start+0x204>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00e      	beq.n	8004448 <HAL_TIM_PWM_Start+0x148>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a36      	ldr	r2, [pc, #216]	@ (8004508 <HAL_TIM_PWM_Start+0x208>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d009      	beq.n	8004448 <HAL_TIM_PWM_Start+0x148>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a34      	ldr	r2, [pc, #208]	@ (800450c <HAL_TIM_PWM_Start+0x20c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <HAL_TIM_PWM_Start+0x148>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a33      	ldr	r2, [pc, #204]	@ (8004510 <HAL_TIM_PWM_Start+0x210>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d101      	bne.n	800444c <HAL_TIM_PWM_Start+0x14c>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <HAL_TIM_PWM_Start+0x14e>
 800444c:	2300      	movs	r3, #0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d007      	beq.n	8004462 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004460:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a25      	ldr	r2, [pc, #148]	@ (80044fc <HAL_TIM_PWM_Start+0x1fc>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d022      	beq.n	80044b2 <HAL_TIM_PWM_Start+0x1b2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004474:	d01d      	beq.n	80044b2 <HAL_TIM_PWM_Start+0x1b2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a26      	ldr	r2, [pc, #152]	@ (8004514 <HAL_TIM_PWM_Start+0x214>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d018      	beq.n	80044b2 <HAL_TIM_PWM_Start+0x1b2>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a24      	ldr	r2, [pc, #144]	@ (8004518 <HAL_TIM_PWM_Start+0x218>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d013      	beq.n	80044b2 <HAL_TIM_PWM_Start+0x1b2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a23      	ldr	r2, [pc, #140]	@ (800451c <HAL_TIM_PWM_Start+0x21c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00e      	beq.n	80044b2 <HAL_TIM_PWM_Start+0x1b2>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a19      	ldr	r2, [pc, #100]	@ (8004500 <HAL_TIM_PWM_Start+0x200>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d009      	beq.n	80044b2 <HAL_TIM_PWM_Start+0x1b2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a18      	ldr	r2, [pc, #96]	@ (8004504 <HAL_TIM_PWM_Start+0x204>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d004      	beq.n	80044b2 <HAL_TIM_PWM_Start+0x1b2>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a18      	ldr	r2, [pc, #96]	@ (8004510 <HAL_TIM_PWM_Start+0x210>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d115      	bne.n	80044de <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	4b19      	ldr	r3, [pc, #100]	@ (8004520 <HAL_TIM_PWM_Start+0x220>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b06      	cmp	r3, #6
 80044c2:	d015      	beq.n	80044f0 <HAL_TIM_PWM_Start+0x1f0>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ca:	d011      	beq.n	80044f0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044dc:	e008      	b.n	80044f0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0201 	orr.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	e000      	b.n	80044f2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40012c00 	.word	0x40012c00
 8004500:	40013400 	.word	0x40013400
 8004504:	40014000 	.word	0x40014000
 8004508:	40014400 	.word	0x40014400
 800450c:	40014800 	.word	0x40014800
 8004510:	40015000 	.word	0x40015000
 8004514:	40000400 	.word	0x40000400
 8004518:	40000800 	.word	0x40000800
 800451c:	40000c00 	.word	0x40000c00
 8004520:	00010007 	.word	0x00010007

08004524 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e097      	b.n	8004668 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d106      	bne.n	8004552 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7fc fe1b 	bl	8001188 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2202      	movs	r2, #2
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004568:	f023 0307 	bic.w	r3, r3, #7
 800456c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3304      	adds	r3, #4
 8004576:	4619      	mov	r1, r3
 8004578:	4610      	mov	r0, r2
 800457a:	f000 fbd9 	bl	8004d30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045a6:	f023 0303 	bic.w	r3, r3, #3
 80045aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	4313      	orrs	r3, r2
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80045c4:	f023 030c 	bic.w	r3, r3, #12
 80045c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	4313      	orrs	r3, r2
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	011a      	lsls	r2, r3, #4
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	031b      	lsls	r3, r3, #12
 80045f4:	4313      	orrs	r3, r2
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004602:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800460a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	4313      	orrs	r3, r2
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004680:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004688:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004690:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004698:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d110      	bne.n	80046c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d102      	bne.n	80046ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80046a6:	7b7b      	ldrb	r3, [r7, #13]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d001      	beq.n	80046b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e069      	b.n	8004784 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046c0:	e031      	b.n	8004726 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d110      	bne.n	80046ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046c8:	7bbb      	ldrb	r3, [r7, #14]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d102      	bne.n	80046d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046ce:	7b3b      	ldrb	r3, [r7, #12]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d001      	beq.n	80046d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e055      	b.n	8004784 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046e8:	e01d      	b.n	8004726 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d108      	bne.n	8004702 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046f0:	7bbb      	ldrb	r3, [r7, #14]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d105      	bne.n	8004702 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046f6:	7b7b      	ldrb	r3, [r7, #13]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d102      	bne.n	8004702 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046fc:	7b3b      	ldrb	r3, [r7, #12]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d001      	beq.n	8004706 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e03e      	b.n	8004784 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2202      	movs	r2, #2
 8004712:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2202      	movs	r2, #2
 800471a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2202      	movs	r2, #2
 8004722:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_TIM_Encoder_Start+0xc4>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2b04      	cmp	r3, #4
 8004730:	d008      	beq.n	8004744 <HAL_TIM_Encoder_Start+0xd4>
 8004732:	e00f      	b.n	8004754 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2201      	movs	r2, #1
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f000 ff71 	bl	8005624 <TIM_CCxChannelCmd>
      break;
 8004742:	e016      	b.n	8004772 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2201      	movs	r2, #1
 800474a:	2104      	movs	r1, #4
 800474c:	4618      	mov	r0, r3
 800474e:	f000 ff69 	bl	8005624 <TIM_CCxChannelCmd>
      break;
 8004752:	e00e      	b.n	8004772 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2201      	movs	r2, #1
 800475a:	2100      	movs	r1, #0
 800475c:	4618      	mov	r0, r3
 800475e:	f000 ff61 	bl	8005624 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2201      	movs	r2, #1
 8004768:	2104      	movs	r1, #4
 800476a:	4618      	mov	r0, r3
 800476c:	f000 ff5a 	bl	8005624 <TIM_CCxChannelCmd>
      break;
 8004770:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f042 0201 	orr.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_TIM_Encoder_Stop+0x18>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d008      	beq.n	80047b4 <HAL_TIM_Encoder_Stop+0x28>
 80047a2:	e00f      	b.n	80047c4 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2200      	movs	r2, #0
 80047aa:	2100      	movs	r1, #0
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 ff39 	bl	8005624 <TIM_CCxChannelCmd>
      break;
 80047b2:	e016      	b.n	80047e2 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2200      	movs	r2, #0
 80047ba:	2104      	movs	r1, #4
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 ff31 	bl	8005624 <TIM_CCxChannelCmd>
      break;
 80047c2:	e00e      	b.n	80047e2 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2200      	movs	r2, #0
 80047ca:	2100      	movs	r1, #0
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 ff29 	bl	8005624 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2200      	movs	r2, #0
 80047d8:	2104      	movs	r1, #4
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 ff22 	bl	8005624 <TIM_CCxChannelCmd>
      break;
 80047e0:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6a1a      	ldr	r2, [r3, #32]
 80047e8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10f      	bne.n	8004812 <HAL_TIM_Encoder_Stop+0x86>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6a1a      	ldr	r2, [r3, #32]
 80047f8:	f244 4344 	movw	r3, #17476	@ 0x4444
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d107      	bne.n	8004812 <HAL_TIM_Encoder_Stop+0x86>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0201 	bic.w	r2, r2, #1
 8004810:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <HAL_TIM_Encoder_Stop+0x92>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b04      	cmp	r3, #4
 800481c:	d148      	bne.n	80048b0 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d104      	bne.n	800482e <HAL_TIM_Encoder_Stop+0xa2>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800482c:	e023      	b.n	8004876 <HAL_TIM_Encoder_Stop+0xea>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b04      	cmp	r3, #4
 8004832:	d104      	bne.n	800483e <HAL_TIM_Encoder_Stop+0xb2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800483c:	e01b      	b.n	8004876 <HAL_TIM_Encoder_Stop+0xea>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b08      	cmp	r3, #8
 8004842:	d104      	bne.n	800484e <HAL_TIM_Encoder_Stop+0xc2>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800484c:	e013      	b.n	8004876 <HAL_TIM_Encoder_Stop+0xea>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b0c      	cmp	r3, #12
 8004852:	d104      	bne.n	800485e <HAL_TIM_Encoder_Stop+0xd2>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800485c:	e00b      	b.n	8004876 <HAL_TIM_Encoder_Stop+0xea>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b10      	cmp	r3, #16
 8004862:	d104      	bne.n	800486e <HAL_TIM_Encoder_Stop+0xe2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800486c:	e003      	b.n	8004876 <HAL_TIM_Encoder_Stop+0xea>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d104      	bne.n	8004886 <HAL_TIM_Encoder_Stop+0xfa>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004884:	e024      	b.n	80048d0 <HAL_TIM_Encoder_Stop+0x144>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b04      	cmp	r3, #4
 800488a:	d104      	bne.n	8004896 <HAL_TIM_Encoder_Stop+0x10a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004894:	e01c      	b.n	80048d0 <HAL_TIM_Encoder_Stop+0x144>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b08      	cmp	r3, #8
 800489a:	d104      	bne.n	80048a6 <HAL_TIM_Encoder_Stop+0x11a>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80048a4:	e014      	b.n	80048d0 <HAL_TIM_Encoder_Stop+0x144>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 80048ae:	e00f      	b.n	80048d0 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048e8:	2300      	movs	r3, #0
 80048ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e0ff      	b.n	8004afa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b14      	cmp	r3, #20
 8004906:	f200 80f0 	bhi.w	8004aea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800490a:	a201      	add	r2, pc, #4	@ (adr r2, 8004910 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800490c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004910:	08004965 	.word	0x08004965
 8004914:	08004aeb 	.word	0x08004aeb
 8004918:	08004aeb 	.word	0x08004aeb
 800491c:	08004aeb 	.word	0x08004aeb
 8004920:	080049a5 	.word	0x080049a5
 8004924:	08004aeb 	.word	0x08004aeb
 8004928:	08004aeb 	.word	0x08004aeb
 800492c:	08004aeb 	.word	0x08004aeb
 8004930:	080049e7 	.word	0x080049e7
 8004934:	08004aeb 	.word	0x08004aeb
 8004938:	08004aeb 	.word	0x08004aeb
 800493c:	08004aeb 	.word	0x08004aeb
 8004940:	08004a27 	.word	0x08004a27
 8004944:	08004aeb 	.word	0x08004aeb
 8004948:	08004aeb 	.word	0x08004aeb
 800494c:	08004aeb 	.word	0x08004aeb
 8004950:	08004a69 	.word	0x08004a69
 8004954:	08004aeb 	.word	0x08004aeb
 8004958:	08004aeb 	.word	0x08004aeb
 800495c:	08004aeb 	.word	0x08004aeb
 8004960:	08004aa9 	.word	0x08004aa9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68b9      	ldr	r1, [r7, #8]
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fa94 	bl	8004e98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699a      	ldr	r2, [r3, #24]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0208 	orr.w	r2, r2, #8
 800497e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0204 	bic.w	r2, r2, #4
 800498e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6999      	ldr	r1, [r3, #24]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	619a      	str	r2, [r3, #24]
      break;
 80049a2:	e0a5      	b.n	8004af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68b9      	ldr	r1, [r7, #8]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 fb0e 	bl	8004fcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6999      	ldr	r1, [r3, #24]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	021a      	lsls	r2, r3, #8
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	619a      	str	r2, [r3, #24]
      break;
 80049e4:	e084      	b.n	8004af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68b9      	ldr	r1, [r7, #8]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 fb81 	bl	80050f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69da      	ldr	r2, [r3, #28]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f042 0208 	orr.w	r2, r2, #8
 8004a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	69da      	ldr	r2, [r3, #28]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0204 	bic.w	r2, r2, #4
 8004a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69d9      	ldr	r1, [r3, #28]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	61da      	str	r2, [r3, #28]
      break;
 8004a24:	e064      	b.n	8004af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fbf3 	bl	8005218 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69da      	ldr	r2, [r3, #28]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69da      	ldr	r2, [r3, #28]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69d9      	ldr	r1, [r3, #28]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	021a      	lsls	r2, r3, #8
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	61da      	str	r2, [r3, #28]
      break;
 8004a66:	e043      	b.n	8004af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fc66 	bl	8005340 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0208 	orr.w	r2, r2, #8
 8004a82:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0204 	bic.w	r2, r2, #4
 8004a92:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	691a      	ldr	r2, [r3, #16]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004aa6:	e023      	b.n	8004af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fcb0 	bl	8005414 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ac2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ad2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	021a      	lsls	r2, r3, #8
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004ae8:	e002      	b.n	8004af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	75fb      	strb	r3, [r7, #23]
      break;
 8004aee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop

08004b04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d101      	bne.n	8004b20 <HAL_TIM_ConfigClockSource+0x1c>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e0f6      	b.n	8004d0e <HAL_TIM_ConfigClockSource+0x20a>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004b3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a6f      	ldr	r2, [pc, #444]	@ (8004d18 <HAL_TIM_ConfigClockSource+0x214>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	f000 80c1 	beq.w	8004ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8004b60:	4a6d      	ldr	r2, [pc, #436]	@ (8004d18 <HAL_TIM_ConfigClockSource+0x214>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	f200 80c6 	bhi.w	8004cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b68:	4a6c      	ldr	r2, [pc, #432]	@ (8004d1c <HAL_TIM_ConfigClockSource+0x218>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	f000 80b9 	beq.w	8004ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8004b70:	4a6a      	ldr	r2, [pc, #424]	@ (8004d1c <HAL_TIM_ConfigClockSource+0x218>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	f200 80be 	bhi.w	8004cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b78:	4a69      	ldr	r2, [pc, #420]	@ (8004d20 <HAL_TIM_ConfigClockSource+0x21c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	f000 80b1 	beq.w	8004ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8004b80:	4a67      	ldr	r2, [pc, #412]	@ (8004d20 <HAL_TIM_ConfigClockSource+0x21c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	f200 80b6 	bhi.w	8004cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b88:	4a66      	ldr	r2, [pc, #408]	@ (8004d24 <HAL_TIM_ConfigClockSource+0x220>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	f000 80a9 	beq.w	8004ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8004b90:	4a64      	ldr	r2, [pc, #400]	@ (8004d24 <HAL_TIM_ConfigClockSource+0x220>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	f200 80ae 	bhi.w	8004cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b98:	4a63      	ldr	r2, [pc, #396]	@ (8004d28 <HAL_TIM_ConfigClockSource+0x224>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	f000 80a1 	beq.w	8004ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8004ba0:	4a61      	ldr	r2, [pc, #388]	@ (8004d28 <HAL_TIM_ConfigClockSource+0x224>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	f200 80a6 	bhi.w	8004cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ba8:	4a60      	ldr	r2, [pc, #384]	@ (8004d2c <HAL_TIM_ConfigClockSource+0x228>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	f000 8099 	beq.w	8004ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8004bb0:	4a5e      	ldr	r2, [pc, #376]	@ (8004d2c <HAL_TIM_ConfigClockSource+0x228>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	f200 809e 	bhi.w	8004cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bb8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004bbc:	f000 8091 	beq.w	8004ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8004bc0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004bc4:	f200 8096 	bhi.w	8004cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bcc:	f000 8089 	beq.w	8004ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8004bd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bd4:	f200 808e 	bhi.w	8004cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bdc:	d03e      	beq.n	8004c5c <HAL_TIM_ConfigClockSource+0x158>
 8004bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004be2:	f200 8087 	bhi.w	8004cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bea:	f000 8086 	beq.w	8004cfa <HAL_TIM_ConfigClockSource+0x1f6>
 8004bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bf2:	d87f      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bf4:	2b70      	cmp	r3, #112	@ 0x70
 8004bf6:	d01a      	beq.n	8004c2e <HAL_TIM_ConfigClockSource+0x12a>
 8004bf8:	2b70      	cmp	r3, #112	@ 0x70
 8004bfa:	d87b      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bfc:	2b60      	cmp	r3, #96	@ 0x60
 8004bfe:	d050      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0x19e>
 8004c00:	2b60      	cmp	r3, #96	@ 0x60
 8004c02:	d877      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c04:	2b50      	cmp	r3, #80	@ 0x50
 8004c06:	d03c      	beq.n	8004c82 <HAL_TIM_ConfigClockSource+0x17e>
 8004c08:	2b50      	cmp	r3, #80	@ 0x50
 8004c0a:	d873      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c0c:	2b40      	cmp	r3, #64	@ 0x40
 8004c0e:	d058      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x1be>
 8004c10:	2b40      	cmp	r3, #64	@ 0x40
 8004c12:	d86f      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c14:	2b30      	cmp	r3, #48	@ 0x30
 8004c16:	d064      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8004c18:	2b30      	cmp	r3, #48	@ 0x30
 8004c1a:	d86b      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	d060      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d867      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d05c      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8004c28:	2b10      	cmp	r3, #16
 8004c2a:	d05a      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8004c2c:	e062      	b.n	8004cf4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c3e:	f000 fcd1 	bl	80055e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	609a      	str	r2, [r3, #8]
      break;
 8004c5a:	e04f      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c6c:	f000 fcba 	bl	80055e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c7e:	609a      	str	r2, [r3, #8]
      break;
 8004c80:	e03c      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f000 fc2c 	bl	80054ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2150      	movs	r1, #80	@ 0x50
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fc85 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8004ca0:	e02c      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f000 fc4b 	bl	800554a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2160      	movs	r1, #96	@ 0x60
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fc75 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8004cc0:	e01c      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f000 fc0c 	bl	80054ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2140      	movs	r1, #64	@ 0x40
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fc65 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8004ce0:	e00c      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4619      	mov	r1, r3
 8004cec:	4610      	mov	r0, r2
 8004cee:	f000 fc5c 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8004cf2:	e003      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf8:	e000      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004cfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	00100070 	.word	0x00100070
 8004d1c:	00100060 	.word	0x00100060
 8004d20:	00100050 	.word	0x00100050
 8004d24:	00100040 	.word	0x00100040
 8004d28:	00100030 	.word	0x00100030
 8004d2c:	00100020 	.word	0x00100020

08004d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a4c      	ldr	r2, [pc, #304]	@ (8004e74 <TIM_Base_SetConfig+0x144>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d017      	beq.n	8004d78 <TIM_Base_SetConfig+0x48>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d4e:	d013      	beq.n	8004d78 <TIM_Base_SetConfig+0x48>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a49      	ldr	r2, [pc, #292]	@ (8004e78 <TIM_Base_SetConfig+0x148>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d00f      	beq.n	8004d78 <TIM_Base_SetConfig+0x48>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a48      	ldr	r2, [pc, #288]	@ (8004e7c <TIM_Base_SetConfig+0x14c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00b      	beq.n	8004d78 <TIM_Base_SetConfig+0x48>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a47      	ldr	r2, [pc, #284]	@ (8004e80 <TIM_Base_SetConfig+0x150>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d007      	beq.n	8004d78 <TIM_Base_SetConfig+0x48>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a46      	ldr	r2, [pc, #280]	@ (8004e84 <TIM_Base_SetConfig+0x154>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d003      	beq.n	8004d78 <TIM_Base_SetConfig+0x48>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a45      	ldr	r2, [pc, #276]	@ (8004e88 <TIM_Base_SetConfig+0x158>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d108      	bne.n	8004d8a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a39      	ldr	r2, [pc, #228]	@ (8004e74 <TIM_Base_SetConfig+0x144>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d023      	beq.n	8004dda <TIM_Base_SetConfig+0xaa>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d98:	d01f      	beq.n	8004dda <TIM_Base_SetConfig+0xaa>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a36      	ldr	r2, [pc, #216]	@ (8004e78 <TIM_Base_SetConfig+0x148>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d01b      	beq.n	8004dda <TIM_Base_SetConfig+0xaa>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a35      	ldr	r2, [pc, #212]	@ (8004e7c <TIM_Base_SetConfig+0x14c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d017      	beq.n	8004dda <TIM_Base_SetConfig+0xaa>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a34      	ldr	r2, [pc, #208]	@ (8004e80 <TIM_Base_SetConfig+0x150>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d013      	beq.n	8004dda <TIM_Base_SetConfig+0xaa>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a33      	ldr	r2, [pc, #204]	@ (8004e84 <TIM_Base_SetConfig+0x154>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00f      	beq.n	8004dda <TIM_Base_SetConfig+0xaa>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a33      	ldr	r2, [pc, #204]	@ (8004e8c <TIM_Base_SetConfig+0x15c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00b      	beq.n	8004dda <TIM_Base_SetConfig+0xaa>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a32      	ldr	r2, [pc, #200]	@ (8004e90 <TIM_Base_SetConfig+0x160>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d007      	beq.n	8004dda <TIM_Base_SetConfig+0xaa>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a31      	ldr	r2, [pc, #196]	@ (8004e94 <TIM_Base_SetConfig+0x164>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d003      	beq.n	8004dda <TIM_Base_SetConfig+0xaa>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a2c      	ldr	r2, [pc, #176]	@ (8004e88 <TIM_Base_SetConfig+0x158>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d108      	bne.n	8004dec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a18      	ldr	r2, [pc, #96]	@ (8004e74 <TIM_Base_SetConfig+0x144>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d013      	beq.n	8004e40 <TIM_Base_SetConfig+0x110>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8004e84 <TIM_Base_SetConfig+0x154>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00f      	beq.n	8004e40 <TIM_Base_SetConfig+0x110>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a1a      	ldr	r2, [pc, #104]	@ (8004e8c <TIM_Base_SetConfig+0x15c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d00b      	beq.n	8004e40 <TIM_Base_SetConfig+0x110>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a19      	ldr	r2, [pc, #100]	@ (8004e90 <TIM_Base_SetConfig+0x160>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d007      	beq.n	8004e40 <TIM_Base_SetConfig+0x110>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a18      	ldr	r2, [pc, #96]	@ (8004e94 <TIM_Base_SetConfig+0x164>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d003      	beq.n	8004e40 <TIM_Base_SetConfig+0x110>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a13      	ldr	r2, [pc, #76]	@ (8004e88 <TIM_Base_SetConfig+0x158>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d103      	bne.n	8004e48 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d105      	bne.n	8004e66 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f023 0201 	bic.w	r2, r3, #1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	611a      	str	r2, [r3, #16]
  }
}
 8004e66:	bf00      	nop
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40012c00 	.word	0x40012c00
 8004e78:	40000400 	.word	0x40000400
 8004e7c:	40000800 	.word	0x40000800
 8004e80:	40000c00 	.word	0x40000c00
 8004e84:	40013400 	.word	0x40013400
 8004e88:	40015000 	.word	0x40015000
 8004e8c:	40014000 	.word	0x40014000
 8004e90:	40014400 	.word	0x40014400
 8004e94:	40014800 	.word	0x40014800

08004e98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	f023 0201 	bic.w	r2, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0303 	bic.w	r3, r3, #3
 8004ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f023 0302 	bic.w	r3, r3, #2
 8004ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a30      	ldr	r2, [pc, #192]	@ (8004fb4 <TIM_OC1_SetConfig+0x11c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d013      	beq.n	8004f20 <TIM_OC1_SetConfig+0x88>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a2f      	ldr	r2, [pc, #188]	@ (8004fb8 <TIM_OC1_SetConfig+0x120>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00f      	beq.n	8004f20 <TIM_OC1_SetConfig+0x88>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a2e      	ldr	r2, [pc, #184]	@ (8004fbc <TIM_OC1_SetConfig+0x124>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00b      	beq.n	8004f20 <TIM_OC1_SetConfig+0x88>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a2d      	ldr	r2, [pc, #180]	@ (8004fc0 <TIM_OC1_SetConfig+0x128>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d007      	beq.n	8004f20 <TIM_OC1_SetConfig+0x88>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a2c      	ldr	r2, [pc, #176]	@ (8004fc4 <TIM_OC1_SetConfig+0x12c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <TIM_OC1_SetConfig+0x88>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a2b      	ldr	r2, [pc, #172]	@ (8004fc8 <TIM_OC1_SetConfig+0x130>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d10c      	bne.n	8004f3a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f023 0308 	bic.w	r3, r3, #8
 8004f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f023 0304 	bic.w	r3, r3, #4
 8004f38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004fb4 <TIM_OC1_SetConfig+0x11c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d013      	beq.n	8004f6a <TIM_OC1_SetConfig+0xd2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb8 <TIM_OC1_SetConfig+0x120>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d00f      	beq.n	8004f6a <TIM_OC1_SetConfig+0xd2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004fbc <TIM_OC1_SetConfig+0x124>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00b      	beq.n	8004f6a <TIM_OC1_SetConfig+0xd2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a1a      	ldr	r2, [pc, #104]	@ (8004fc0 <TIM_OC1_SetConfig+0x128>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d007      	beq.n	8004f6a <TIM_OC1_SetConfig+0xd2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a19      	ldr	r2, [pc, #100]	@ (8004fc4 <TIM_OC1_SetConfig+0x12c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d003      	beq.n	8004f6a <TIM_OC1_SetConfig+0xd2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a18      	ldr	r2, [pc, #96]	@ (8004fc8 <TIM_OC1_SetConfig+0x130>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d111      	bne.n	8004f8e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	621a      	str	r2, [r3, #32]
}
 8004fa8:	bf00      	nop
 8004faa:	371c      	adds	r7, #28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	40012c00 	.word	0x40012c00
 8004fb8:	40013400 	.word	0x40013400
 8004fbc:	40014000 	.word	0x40014000
 8004fc0:	40014400 	.word	0x40014400
 8004fc4:	40014800 	.word	0x40014800
 8004fc8:	40015000 	.word	0x40015000

08004fcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	f023 0210 	bic.w	r2, r3, #16
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	021b      	lsls	r3, r3, #8
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4313      	orrs	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f023 0320 	bic.w	r3, r3, #32
 800501a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4313      	orrs	r3, r2
 8005026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a2c      	ldr	r2, [pc, #176]	@ (80050dc <TIM_OC2_SetConfig+0x110>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d007      	beq.n	8005040 <TIM_OC2_SetConfig+0x74>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a2b      	ldr	r2, [pc, #172]	@ (80050e0 <TIM_OC2_SetConfig+0x114>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d003      	beq.n	8005040 <TIM_OC2_SetConfig+0x74>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a2a      	ldr	r2, [pc, #168]	@ (80050e4 <TIM_OC2_SetConfig+0x118>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d10d      	bne.n	800505c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800505a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a1f      	ldr	r2, [pc, #124]	@ (80050dc <TIM_OC2_SetConfig+0x110>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d013      	beq.n	800508c <TIM_OC2_SetConfig+0xc0>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a1e      	ldr	r2, [pc, #120]	@ (80050e0 <TIM_OC2_SetConfig+0x114>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00f      	beq.n	800508c <TIM_OC2_SetConfig+0xc0>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a1e      	ldr	r2, [pc, #120]	@ (80050e8 <TIM_OC2_SetConfig+0x11c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00b      	beq.n	800508c <TIM_OC2_SetConfig+0xc0>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a1d      	ldr	r2, [pc, #116]	@ (80050ec <TIM_OC2_SetConfig+0x120>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d007      	beq.n	800508c <TIM_OC2_SetConfig+0xc0>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a1c      	ldr	r2, [pc, #112]	@ (80050f0 <TIM_OC2_SetConfig+0x124>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d003      	beq.n	800508c <TIM_OC2_SetConfig+0xc0>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a17      	ldr	r2, [pc, #92]	@ (80050e4 <TIM_OC2_SetConfig+0x118>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d113      	bne.n	80050b4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005092:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800509a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	621a      	str	r2, [r3, #32]
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40012c00 	.word	0x40012c00
 80050e0:	40013400 	.word	0x40013400
 80050e4:	40015000 	.word	0x40015000
 80050e8:	40014000 	.word	0x40014000
 80050ec:	40014400 	.word	0x40014400
 80050f0:	40014800 	.word	0x40014800

080050f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0303 	bic.w	r3, r3, #3
 800512e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a2b      	ldr	r2, [pc, #172]	@ (8005200 <TIM_OC3_SetConfig+0x10c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d007      	beq.n	8005166 <TIM_OC3_SetConfig+0x72>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a2a      	ldr	r2, [pc, #168]	@ (8005204 <TIM_OC3_SetConfig+0x110>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d003      	beq.n	8005166 <TIM_OC3_SetConfig+0x72>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a29      	ldr	r2, [pc, #164]	@ (8005208 <TIM_OC3_SetConfig+0x114>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d10d      	bne.n	8005182 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800516c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a1e      	ldr	r2, [pc, #120]	@ (8005200 <TIM_OC3_SetConfig+0x10c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d013      	beq.n	80051b2 <TIM_OC3_SetConfig+0xbe>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a1d      	ldr	r2, [pc, #116]	@ (8005204 <TIM_OC3_SetConfig+0x110>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00f      	beq.n	80051b2 <TIM_OC3_SetConfig+0xbe>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a1d      	ldr	r2, [pc, #116]	@ (800520c <TIM_OC3_SetConfig+0x118>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00b      	beq.n	80051b2 <TIM_OC3_SetConfig+0xbe>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a1c      	ldr	r2, [pc, #112]	@ (8005210 <TIM_OC3_SetConfig+0x11c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d007      	beq.n	80051b2 <TIM_OC3_SetConfig+0xbe>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005214 <TIM_OC3_SetConfig+0x120>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_OC3_SetConfig+0xbe>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a16      	ldr	r2, [pc, #88]	@ (8005208 <TIM_OC3_SetConfig+0x114>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d113      	bne.n	80051da <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	621a      	str	r2, [r3, #32]
}
 80051f4:	bf00      	nop
 80051f6:	371c      	adds	r7, #28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	40012c00 	.word	0x40012c00
 8005204:	40013400 	.word	0x40013400
 8005208:	40015000 	.word	0x40015000
 800520c:	40014000 	.word	0x40014000
 8005210:	40014400 	.word	0x40014400
 8005214:	40014800 	.word	0x40014800

08005218 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005246:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800524a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	021b      	lsls	r3, r3, #8
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005266:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	031b      	lsls	r3, r3, #12
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a2c      	ldr	r2, [pc, #176]	@ (8005328 <TIM_OC4_SetConfig+0x110>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d007      	beq.n	800528c <TIM_OC4_SetConfig+0x74>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a2b      	ldr	r2, [pc, #172]	@ (800532c <TIM_OC4_SetConfig+0x114>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d003      	beq.n	800528c <TIM_OC4_SetConfig+0x74>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a2a      	ldr	r2, [pc, #168]	@ (8005330 <TIM_OC4_SetConfig+0x118>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d10d      	bne.n	80052a8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	031b      	lsls	r3, r3, #12
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005328 <TIM_OC4_SetConfig+0x110>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d013      	beq.n	80052d8 <TIM_OC4_SetConfig+0xc0>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a1e      	ldr	r2, [pc, #120]	@ (800532c <TIM_OC4_SetConfig+0x114>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00f      	beq.n	80052d8 <TIM_OC4_SetConfig+0xc0>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005334 <TIM_OC4_SetConfig+0x11c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d00b      	beq.n	80052d8 <TIM_OC4_SetConfig+0xc0>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a1d      	ldr	r2, [pc, #116]	@ (8005338 <TIM_OC4_SetConfig+0x120>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d007      	beq.n	80052d8 <TIM_OC4_SetConfig+0xc0>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a1c      	ldr	r2, [pc, #112]	@ (800533c <TIM_OC4_SetConfig+0x124>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d003      	beq.n	80052d8 <TIM_OC4_SetConfig+0xc0>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a17      	ldr	r2, [pc, #92]	@ (8005330 <TIM_OC4_SetConfig+0x118>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d113      	bne.n	8005300 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052de:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80052e6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	019b      	lsls	r3, r3, #6
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	019b      	lsls	r3, r3, #6
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	621a      	str	r2, [r3, #32]
}
 800531a:	bf00      	nop
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40012c00 	.word	0x40012c00
 800532c:	40013400 	.word	0x40013400
 8005330:	40015000 	.word	0x40015000
 8005334:	40014000 	.word	0x40014000
 8005338:	40014400 	.word	0x40014400
 800533c:	40014800 	.word	0x40014800

08005340 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800536e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005384:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	041b      	lsls	r3, r3, #16
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a19      	ldr	r2, [pc, #100]	@ (80053fc <TIM_OC5_SetConfig+0xbc>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d013      	beq.n	80053c2 <TIM_OC5_SetConfig+0x82>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a18      	ldr	r2, [pc, #96]	@ (8005400 <TIM_OC5_SetConfig+0xc0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00f      	beq.n	80053c2 <TIM_OC5_SetConfig+0x82>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a17      	ldr	r2, [pc, #92]	@ (8005404 <TIM_OC5_SetConfig+0xc4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00b      	beq.n	80053c2 <TIM_OC5_SetConfig+0x82>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a16      	ldr	r2, [pc, #88]	@ (8005408 <TIM_OC5_SetConfig+0xc8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d007      	beq.n	80053c2 <TIM_OC5_SetConfig+0x82>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a15      	ldr	r2, [pc, #84]	@ (800540c <TIM_OC5_SetConfig+0xcc>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d003      	beq.n	80053c2 <TIM_OC5_SetConfig+0x82>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a14      	ldr	r2, [pc, #80]	@ (8005410 <TIM_OC5_SetConfig+0xd0>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d109      	bne.n	80053d6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	621a      	str	r2, [r3, #32]
}
 80053f0:	bf00      	nop
 80053f2:	371c      	adds	r7, #28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	40012c00 	.word	0x40012c00
 8005400:	40013400 	.word	0x40013400
 8005404:	40014000 	.word	0x40014000
 8005408:	40014400 	.word	0x40014400
 800540c:	40014800 	.word	0x40014800
 8005410:	40015000 	.word	0x40015000

08005414 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005442:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800545a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	051b      	lsls	r3, r3, #20
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a1a      	ldr	r2, [pc, #104]	@ (80054d4 <TIM_OC6_SetConfig+0xc0>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d013      	beq.n	8005498 <TIM_OC6_SetConfig+0x84>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a19      	ldr	r2, [pc, #100]	@ (80054d8 <TIM_OC6_SetConfig+0xc4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00f      	beq.n	8005498 <TIM_OC6_SetConfig+0x84>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a18      	ldr	r2, [pc, #96]	@ (80054dc <TIM_OC6_SetConfig+0xc8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d00b      	beq.n	8005498 <TIM_OC6_SetConfig+0x84>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a17      	ldr	r2, [pc, #92]	@ (80054e0 <TIM_OC6_SetConfig+0xcc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d007      	beq.n	8005498 <TIM_OC6_SetConfig+0x84>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a16      	ldr	r2, [pc, #88]	@ (80054e4 <TIM_OC6_SetConfig+0xd0>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d003      	beq.n	8005498 <TIM_OC6_SetConfig+0x84>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a15      	ldr	r2, [pc, #84]	@ (80054e8 <TIM_OC6_SetConfig+0xd4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d109      	bne.n	80054ac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800549e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	029b      	lsls	r3, r3, #10
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	621a      	str	r2, [r3, #32]
}
 80054c6:	bf00      	nop
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40012c00 	.word	0x40012c00
 80054d8:	40013400 	.word	0x40013400
 80054dc:	40014000 	.word	0x40014000
 80054e0:	40014400 	.word	0x40014400
 80054e4:	40014800 	.word	0x40014800
 80054e8:	40015000 	.word	0x40015000

080054ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	f023 0201 	bic.w	r2, r3, #1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f023 030a 	bic.w	r3, r3, #10
 8005528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	621a      	str	r2, [r3, #32]
}
 800553e:	bf00      	nop
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800554a:	b480      	push	{r7}
 800554c:	b087      	sub	sp, #28
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	f023 0210 	bic.w	r2, r3, #16
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005574:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	031b      	lsls	r3, r3, #12
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	4313      	orrs	r3, r2
 800557e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005586:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80055c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f043 0307 	orr.w	r3, r3, #7
 80055d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	609a      	str	r2, [r3, #8]
}
 80055d8:	bf00      	nop
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	021a      	lsls	r2, r3, #8
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	431a      	orrs	r2, r3
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4313      	orrs	r3, r2
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	609a      	str	r2, [r3, #8]
}
 8005618:	bf00      	nop
 800561a:	371c      	adds	r7, #28
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f003 031f 	and.w	r3, r3, #31
 8005636:	2201      	movs	r2, #1
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a1a      	ldr	r2, [r3, #32]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	43db      	mvns	r3, r3
 8005646:	401a      	ands	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a1a      	ldr	r2, [r3, #32]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f003 031f 	and.w	r3, r3, #31
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	fa01 f303 	lsl.w	r3, r1, r3
 800565c:	431a      	orrs	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	621a      	str	r2, [r3, #32]
}
 8005662:	bf00      	nop
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
	...

08005670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005684:	2302      	movs	r3, #2
 8005686:	e074      	b.n	8005772 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a34      	ldr	r2, [pc, #208]	@ (8005780 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d009      	beq.n	80056c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a33      	ldr	r2, [pc, #204]	@ (8005784 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d004      	beq.n	80056c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a31      	ldr	r2, [pc, #196]	@ (8005788 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d108      	bne.n	80056d8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80056cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80056de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a21      	ldr	r2, [pc, #132]	@ (8005780 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d022      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005708:	d01d      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a1f      	ldr	r2, [pc, #124]	@ (800578c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d018      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a1d      	ldr	r2, [pc, #116]	@ (8005790 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d013      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1c      	ldr	r2, [pc, #112]	@ (8005794 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00e      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a15      	ldr	r2, [pc, #84]	@ (8005784 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d009      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a18      	ldr	r2, [pc, #96]	@ (8005798 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d004      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a11      	ldr	r2, [pc, #68]	@ (8005788 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d10c      	bne.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800574c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	4313      	orrs	r3, r2
 8005756:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40012c00 	.word	0x40012c00
 8005784:	40013400 	.word	0x40013400
 8005788:	40015000 	.word	0x40015000
 800578c:	40000400 	.word	0x40000400
 8005790:	40000800 	.word	0x40000800
 8005794:	40000c00 	.word	0x40000c00
 8005798:	40014000 	.word	0x40014000

0800579c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e078      	b.n	80058aa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	041b      	lsls	r3, r3, #16
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1c      	ldr	r2, [pc, #112]	@ (80058b8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d009      	beq.n	800585e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a1b      	ldr	r2, [pc, #108]	@ (80058bc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d004      	beq.n	800585e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a19      	ldr	r2, [pc, #100]	@ (80058c0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d11c      	bne.n	8005898 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005868:	051b      	lsls	r3, r3, #20
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	40012c00 	.word	0x40012c00
 80058bc:	40013400 	.word	0x40013400
 80058c0:	40015000 	.word	0x40015000

080058c4 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	ed93 7a06 	vldr	s14, [r3, #24]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	edd3 7a07 	vldr	s15, [r3, #28]
 80058da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80058e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	edd3 7a06 	vldr	s15, [r3, #24]
 80058f4:	eeb1 7a67 	vneg.f32	s14, s15
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80058fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005902:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a1a      	ldr	r2, [r3, #32]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d006      	beq.n	8005928 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	330c      	adds	r3, #12
 800591e:	220c      	movs	r2, #12
 8005920:	2100      	movs	r1, #0
 8005922:	4618      	mov	r0, r3
 8005924:	f000 f804 	bl	8005930 <memset>
  }

}
 8005928:	bf00      	nop
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <memset>:
 8005930:	4402      	add	r2, r0
 8005932:	4603      	mov	r3, r0
 8005934:	4293      	cmp	r3, r2
 8005936:	d100      	bne.n	800593a <memset+0xa>
 8005938:	4770      	bx	lr
 800593a:	f803 1b01 	strb.w	r1, [r3], #1
 800593e:	e7f9      	b.n	8005934 <memset+0x4>

08005940 <__libc_init_array>:
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	4d0d      	ldr	r5, [pc, #52]	@ (8005978 <__libc_init_array+0x38>)
 8005944:	4c0d      	ldr	r4, [pc, #52]	@ (800597c <__libc_init_array+0x3c>)
 8005946:	1b64      	subs	r4, r4, r5
 8005948:	10a4      	asrs	r4, r4, #2
 800594a:	2600      	movs	r6, #0
 800594c:	42a6      	cmp	r6, r4
 800594e:	d109      	bne.n	8005964 <__libc_init_array+0x24>
 8005950:	4d0b      	ldr	r5, [pc, #44]	@ (8005980 <__libc_init_array+0x40>)
 8005952:	4c0c      	ldr	r4, [pc, #48]	@ (8005984 <__libc_init_array+0x44>)
 8005954:	f000 f818 	bl	8005988 <_init>
 8005958:	1b64      	subs	r4, r4, r5
 800595a:	10a4      	asrs	r4, r4, #2
 800595c:	2600      	movs	r6, #0
 800595e:	42a6      	cmp	r6, r4
 8005960:	d105      	bne.n	800596e <__libc_init_array+0x2e>
 8005962:	bd70      	pop	{r4, r5, r6, pc}
 8005964:	f855 3b04 	ldr.w	r3, [r5], #4
 8005968:	4798      	blx	r3
 800596a:	3601      	adds	r6, #1
 800596c:	e7ee      	b.n	800594c <__libc_init_array+0xc>
 800596e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005972:	4798      	blx	r3
 8005974:	3601      	adds	r6, #1
 8005976:	e7f2      	b.n	800595e <__libc_init_array+0x1e>
 8005978:	080059b0 	.word	0x080059b0
 800597c:	080059b0 	.word	0x080059b0
 8005980:	080059b0 	.word	0x080059b0
 8005984:	080059b4 	.word	0x080059b4

08005988 <_init>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	bf00      	nop
 800598c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598e:	bc08      	pop	{r3}
 8005990:	469e      	mov	lr, r3
 8005992:	4770      	bx	lr

08005994 <_fini>:
 8005994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005996:	bf00      	nop
 8005998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599a:	bc08      	pop	{r3}
 800599c:	469e      	mov	lr, r3
 800599e:	4770      	bx	lr
